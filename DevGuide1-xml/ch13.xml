<!-- $Id: ch13.xml,v 1.5 2002/09/10 23:08:36 mshill Exp $ -->
<chapter label="13">
	<title>Cryptography</title>

	<sect1>
		<title>Overview</title>

		<para>
		It seems every security book contains the obligatory chapter
		with an overview of cryptography. Personally we never read them
		and wanted to avoid writing one. But cryptography is such an
		important part of building web applications that a
		referenceable overview section in the document seemed
		appropriate.
		</para>

		<para>
		Cryptography is no silver bullet.  A common phrase of "Sure,
		we'll encrypt it then, that'll solve the problem" is all
		too easy to apply to common scenarios.  But cryptography
		is hard to get right in the real world.  To encrypt a piece
		of data typically requires the system to have established
		out of band trust relationships or have exchanged keys
		securely.  The cryptography industry has recently been
		swamped with snake-oil vendors pushing fantastical
		claims about their products when a cursory glance often
		highlights significant weaknesses.  If a vendor mentions
		"military grade" or "unbreakable" start to run!  A great
		FAQ is available on snake oil cryptography at: <ulink
		url="http://www.interhack.net/people/cmcurtin/snake-oil-faq.html">http://www.interhack.net/people/cmcurtin/snake-oil-faq.html</ulink>
		</para>

		<para>
		Good cryptography is based on being reliant on the secrecy of
		the key and not the algorithm for security. This is an important
		point. A good algorithm is one which can be publicly
		scrutinized and proven to be secure. If a vendor says "trust us,
		we've had experts look at this", chances are they weren't
		experts!
		</para>

		<para>Cryptography can be used to provide:</para>

		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Confidentiality - ensure data is read only by
				authorized parties,
				</para>
			</listitem>

			<listitem>
				<para>
				Data integrity - ensure data wasn't altered
				between sender and recipient,
				</para>
			</listitem>

			<listitem>
				<para>
				Authentication - ensure data originated from a
				particular party.
				</para>
			</listitem>
		</itemizedlist>

		<para>
		A cryptographic system (or a cipher system) is a method of
		hiding data so that only certain people can view it.
		Cryptography is the practice of creating and using cryptographic
		systems. Cryptanalysis is the science of analyzing and reverse
		engineering cryptographic systems.  The original data is called
		plaintext. The protected data is called ciphertext. Encryption
		is a procedure to convert plaintext into ciphertext. Decryption
		is a procedure to convert ciphertext into plaintext. A
		cryptographic system typically consists of algorithms, keys, and
		key management facilities.
		</para>

		<para>
		There are two basic types of cryptographic systems: symmetric
		("private key") and asymmetric ("public key").
		</para>

		<para>
		Symmetric key systems require both the sender and the recipient
		to have the same key. This key is used by the sender to encrypt
		the data, and again by the recipient to decrypt the data. Key
		exchange is clearly a problem. How do you securely send a key
		that will enable you to send other data securely? If a private
		key is intercepted or stolen, the adversary can act as either
		party and view all data and communications. You can think of the
		symmetric crypto system as akin to the Chubb type of door locks.
		You must be in possession of a key to both open and lock the
		door.
		</para>

		<para>
		Asymmetric cryptographic systems are considered much more
		flexible. Each user has both a public key and a private key.
		Messages are encrypted with one key and can be decrypted only by
		the other key. The public key can be published widely while the
		private key is kept secret.  If Alice wishes to send Bob a
		secret, she finds and verifies Bob's public key, encrypts her
		message with it, and mails it off to Bob. When Bob gets the
		message, he uses his private key to decrypt it. Verification of
		public keys is an important step. Failure to verify that the
		public key really does belong to Bob leaves open the possibility
		that Alice is using a key whose associated private key is in the
		hands of an enemy. Public Key Infrastructures or PKI's deal with
		this problem by providing certification authorities that sign
		keys by a supposedly trusted party and make them available for
		download or verification. Asymmetric ciphers are much slower
		than their symmetric counterparts and key sizes are generally
		much larger. You can think of a public key system as akin to a
		Yale type door lock. Anyone can push the door locked, but you
		must be in possession of the correct key to open the door.
		</para>
	</sect1>

	<sect1>
		<title>Symmetric Cryptography</title>

		<para>
		Symmetric cryptography uses a single private key to both encrypt
		and decrypt data. Any party that has the key can use it to
		encrypt and decrypt data. They are also referred to as block
		ciphers.
		</para>

		<para>
		Symmetric cryptography algorithms are typically fast and are
		suitable for processing large streams of data.
		</para>

		<para>
		The disadvantage of symmetric cryptography is that it presumes
		two parties have agreed on a key and been able to exchange that
		key in a secure manner prior to communication. This is a
		significant challenge. Symmetric algorithms are usually mixed
		with public key algorithms to obtain a blend of security and
		speed.
		</para>
	</sect1>

	<sect1>
		<title>Asymmetric, or Public Key, Cryptography</title>

		<para>
		Public-key cryptography is also called asymmetric. It uses a
		secret key that must be kept from unauthorized users and a
		public key that can be made public to anyone. Both the public
		key and the private key are mathematically linked; data
		encrypted with the public key can be decrypted only by the
		private key, and data signed with the private key can only be
		verified with the public key.
		</para>

		<para>
		The public key can be published to anyone. Both keys are unique
		to the communication session.
		</para>

		<para>
		Public-key cryptographic algorithms use a fixed buffer size.
		Private-key cryptographic algorithms use a variable length
		buffer. Public-key algorithms cannot be used to chain data
		together into streams like private-key algorithms can. With
		private-key algorithms only a small block size can be processed,
		typically 8 or 16 bytes.
		</para>
	</sect1>

	<sect1>
		<title>Digital Signatures</title>

		<para>
		Public-key and private-key algorithms can also be used to form
		digital signatures. Digital signatures authenticate the identity
		of a sender (if you trust the sender's public key) and protect
		the integrity of data. You may also hear the term MAC (Message
		Authentication Code).
		</para>
	</sect1>

	<sect1>
		<title>Hash Values</title>

		<para>
		Hash algorithms are one-way mathematical algorithms that
		take an arbitrary length input and produce a fixed length
		output string.	A hash value is a unique and extremely
		compact numerical representation of a piece of data. MD5
		produces 128 bits for instance. It is computationally
		improbable to find two distinct inputs that hash to the
		same value (or ``collide''). Hash functions have some very
		useful applications. They allow a party to prove they know
		something without revealing what it is, and hence are seeing
		widespread use in password schemes. They can also be used
		in digital signatures and integrity protection.
		</para>

		<para>
		There are several other types of cryptographic algorithms like
		elliptic curve and stream ciphers. For a complete and thorough
		tutorial on implementing cryptographic systems we suggest
		``Applied Cryptography'' by Bruce Schneier.
		</para>
	</sect1>

	<sect1>
		<title>Implementing Cryptography</title>

		<sect2>
			<title>Cryptographic Toolkits and Libraries</title>

			<para>
			There are many cryptographic toolkits to choose from.
			The final choice may be dictated by your development
			platform or the algorithm you wish to use. We list a
			few for your consideration.
			</para>

			<para>
			<ulink
			url="http://java.sun.com/products/jce/">JCE</ulink> and
			<ulink url="http://java.sun.com/products/jsse/">JSSE</ulink> -
			Now an integral part of JDK 1.4, the "Java Cryptography
			Extensions" and the "Java Secure Socket Extensions" are
			a natural choice if you are developing in Java.
			According to Javasoft: ``The Java Cryptography Extension
			(JCE) provides a framework and implementations for
			encryption, key generation, key agreement and message
			authentication code algorithms. Support for encryption
			includes symmetric, asymmetric, block, and stream
			ciphers. The software also supports secure streams and
			sealed objects.''
			</para>

			<para>
			<ulink url="http://www.cryptix.org/">Cryptix</ulink> -
			An open source clean-room implementation of the Java
			Cryptography extensions. Javasoft cannot provide its
			international customers with an implementation of the
			JCE because of US export restrictions. Cryptix JCE is
			being developed to address this problem. Cryptix JCE is
			a complete clean-room implementation of the official JCE
			1.2 API as published by Sun. Cryptix also produce a PGP
			library for those developers needing to integrate Java
			applications with PGP systems.
			</para>

			<para>
			<ulink url="http://www.openssl.org">OpenSSL</ulink> -
			The OpenSSL Project is a collaborative effort to develop
			a robust, commercial-grade, full-featured, and Open
			Source toolkit implementing the Secure Sockets Layer
			(SSL v2/v3) and Transport Layer Security (TLS v1)
			protocols as well as a full-strength general purpose
			cryptography library.  OpenSSL is based on the excellent
			SSLeay library developed by Eric A. Young and Tim J.
			Hudson. The OpenSSL toolkit is licensed under an
			Apache-style license, which basically means that you are
			free to get and use it for commercial and non-commercial
			purposes subject to some simple license conditions.
			</para>

			<para>
			<ulink url="http://www.bouncycastle.org">Legion of the
			Bouncy Castle</ulink> - Despite its quirky name, The
			Legion of the Bouncy Castle produce a first rate Java
			cryptography library for both JSSE and J2ME.
			</para>
		</sect2>

		<sect2>
			<title>Key Generation</title>

			<para>
			Generating keys is extremely important. If the security
			of a cryptographic system is reliant on the security of
			keys then clearly care has to be taken when generating
			keys.
			</para>
		</sect2>

		<sect2>
			<title>Random Number Generation</title>

			<para>
			Cryptographic keys need to be as random as possible so
			that it is infeasible to reproduce them or predict them.
			A trusted random number generator is essential.
			</para>

			<para>
			/dev/(u)random (Linux, FreeBSD, OpenBSD) is a useful source if available.
			</para>

			<para>
			<ulink url="http://www.securesoftware.com/egads.php">EGADS</ulink>
			provides the same kind of functionality as /dev/random
			and /dev/urandom on Linux systems, but works on Windows,
			and as a portable Unix program.
			</para>

			<para>
			<ulink
			url="http://www.counterpane.com/yarrow.html">YARROW</ulink>
			is a high-performance, high-security, pseudo-random
			number generator (PRNG) for Windows, Windows NT, and
			UNIX. It can provide random numbers for a variety of
			cryptographic applications: encryption, signatures,
			integrity, etc.
			</para>
		</sect2>

		<sect2>
			<title>Key Lengths</title>

			<para>
			When thinking about key lengths it is all too easy
			to think ``the bigger, the better''.  While a large
			key will indeed be more difficult to break under
			most circumstances, the additional overhead in
			encrypting and decrypting data with large keys may
			have significant effects on the system.  The key needs
			to be large enough to provide what is referred to
			as cover time.  Cover time is the time the key needs
			to protect the data.  If, for example, you need to send
			time critical data across the Internet that will be
			acted upon or rejected with a small time window of,
			say, a few minutes, even small keys will be able to
			adequately protect the data.  There is little point
			in protecting data with a key that may take 250
			years to be broken, when in reality if the data were
			decrypted and used it would be out of date and not
			be accepted by the system anyhow. A good source of
			current appropriate key lengths can be found at <ulink
			url="http://www.distributed.net/">http://www.distributed.net/</ulink>.

			</para>
		</sect2>
	</sect1>
</chapter>
