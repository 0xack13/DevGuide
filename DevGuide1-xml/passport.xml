<!-- $Id: architectures.xml,v 1.3 2003/01/28 15:15:36 heartogold Exp $ -->
<chapter label="17">
	<chapterinfo>
		<authorgroup>
			<author>
				<firstname>Christopher</firstname>
				<surname>Todd</surname>
				<email>christopher.todd@ey.com</email>
			</author>
		</authorgroup>
	</chapterinfo>
	<title>Web Application Architectures</title>
	<para>Early in the history of dynamic web applications, developers, designers, and 
	architects began to realize that complex web applications were no different from 
	complex stand-alone applications, and that the stability and maintainability of a web 
	application depended critically on its architecture.  Furthermore, as web applications 
	became more complex and web interfaces became increasingly graphic design-intensive, 
	a split developed between the types of people involved in the creation of a web application.  
	Web designers often worked with graphical design issues, page layout, user interface 
	design, etc., while web developers worked with the application logic, the processing 
	of web forms, and the interaction of the web application with its data stores (databases, 
	filesystems, and directories).  A mechanism was needed that would allow web designers 
	and web developers to do their own thing without stepping on each other's toes.  Many 
	potential solutions were developed (and are still being developed), but they can all be 
	traced to an architectural pattern developed many years ago:  the Model-View-Controller 
	design pattern.</para>
	<sect1>
		<title>Model-View-Controller (MVC)</title>
		<para>Originally described by the "Gang of Four" (Erich Gamma, Richard Helm, Ralph 
		Johnson, and John Vlissides) in their seminal work Design Patterns: Elements of Reusable 
		Object-Oriented Software, the Model-View-Controller pattern involves separating the 
		three primary duties every program must perform: maintain a model of the application 
		data, decide what data will be displayed (based on user input and application state), 
		and display data to the user.  The MVC pattern has been successfully applied in many 
		programming languages and paradigms, but it works particularly well in Object-Oriented 
		languages such as Java, C++, Python, and Smalltalk.</para>
		<para>The MVC pattern is based on three components: the controller, the model, and 
		the view.  The View is responsible for presenting data to the user in an appropriate 
		manner.  The model is responsible for processing the data and maintaining the application 
		state and an internal representation of the application data.  The controller is responsible 
		for determining what actions need to take place as a result of a particular user input (or 
		change in the applications internal state).  By clearly separating these three aspects of 
		an application, it becomes easier for web designers to concentrate solely on the user 
		interface, without having to worry about screwing up the data processing, and it alows 
		developers to concentrate on the application logic and data storage without having to 
		worry about screwing up the presentation layer.</para>
	</sect1>
	<sect1>
		<title>Model 1 and Model 2</title>
		<para>Model 2 is essentially the MVC pattern, with a servlet acting as the controller, and 
		JSP pages acting as the View, with JavaBeans acting as the model.  Model 1 has JavaBeans 
		acting as the model, and the JSP acting in a dual role as the View as well as a 
		psuedo-controller, inasmuchas the JSP pages determine what processing occurs next.  
		Model 1 architectures are generally spurned for anything other than simple web applications, 
		as the lines between application logic and presentation logic are blurred.</para>
	</sect1>
	<sect1>
		<title>Applying these architectures to security</title>
		<para>In a nutshell, the web application architectures discussed above can improve web 
		application security by clearly delineating the paths through which application data travel, 
		how they are processed in each step, and how they are finally displayed ot the user.  
		Thinking of each portion of the application as a "boundary" allows a separation of responsibilities 
		among developers, and provides tremendous flexibility in determining how best ot secure the 
		application and its data at that point in the processing.  For example, it has been stated repeatedly 
		throughout this guide that the single most important security-related task a developer must 
		perform is to filter user input.  But deciding what to filter out is dependant on how the data is 
		about to be processed.  For example, if the data is about to put used in a database query, then 
		you would want to filter characters such as ' and - that can be used in SQL injection attacks.  
		But if the data is about to be displayed to the user, then filtering ' and - might mean that Cynthia 
		O'Neill-Jones is going to make a call to customer support to ask why her name is spelled wrong.</para>
		<para>Applying appropriate data processing at various times is greatly facilitated by the use of 
		MVC and similar design patterns, because </para>
		<para>An additional advantage of the MVC pattern is that the Controller acts as a gate-keeper, 
		making it a natural candidate for handling session management, authentication and authorization.  
		Since all requests will go through the Controller before being sent to the appropriate View or Model 
		component, developers can determine whether the request is part of a session, and if so, whether 
		the user that correpsonds to that session is authorized to make that request.</para>
	</sect1>
	<sect1>
		<sect2>
			<title/>
			<para/>
		</sect2>
		<sect2>
			<title/>
			<para/>
			<sect3>
				<title/>
				<para/>
			</sect3>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para/>
				</listitem>
				<listitem>
					<para/>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
</chapter>
