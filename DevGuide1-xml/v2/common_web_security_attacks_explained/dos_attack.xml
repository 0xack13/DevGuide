<sect1>
	<title>Denial of Service attacks</title>
	<para>Denial of Service (DoS) attacks have been primarily targeted against known software, with vulnerabilities that would allow the DoS attack to succeed. Traditionally, DoS attacks have been rarely useful against custom web applications. However, there are techniques that can be used to create DoS situations by exploiting web application vulnerabilities.
	</para>
	<para>The easiest way in which a DoS attack can be launched against an application is to overwhelm the transaction processing capability of the application using automated scripts. For instance, if the account creation page is a simple HTML form, an attacker can write a script to create thousands of accounts per day, and quickly fill up the back-end database. It will also eat up the application or web servers response capability to genuine users. This technique could be used not just for creating new account, but also for multiple logins for the same account, multiple bogus transactions, and any other processing module that the attacker can call in an automated fashion.
	</para>
	<para>A common denial of service attack against operating systems is to lockout user accounts if an account lockout policy is in place. The same technique could be used against a web application as well, if it locks out user accounts after a pre-determined interval of failed authentication attempts. Using an automated script, an attacker would try to enumerate various user accounts and lock them out.
	</para>
	<para>Other denial of service technique may simply involve using any of the attack vectors described in this section, if that particular attack causes resource starvation or an application crash. For instance, feeding a large buffer into a susceptible component of the web application may cause it to either crash that component or the web application itself.
	</para>
</sect1>

<sect1>
	<title>Mitigation techniques</title>
	<para>One of the most widely used mitigation techniques is the one mentioned in the session ID brute-forcing mitigation section. The account creation or transaction confirmation page should contain a dynamically generated image, which displays a string that the user must enter in order to continue with the transaction.
	</para>
	<para>To mitigate against malicious account lockouts of the application users, ensure that it is extremely difficult for an attacker to enumerate valid user accounts in the first place. If for some reason, the application is built in a way where it is not possible to prevent users from knowing the user IDs of other users (say a web-based emails service), then ensure that the after say 3 failed logins, the user must type in the authentication credentials along with the dynamically generated string image. This will drastically slow down an attacker. After 3 more failed logins at this stage, the user's account will be locked out. The application could then provide a means for the user to unlock his/her account using the same mechanism used in the 'forgot password' scheme.
	</para>
	<para>Another option might be to use mod_throttle with Apache, or the RLimitCPU, RlimitMem, RlimitNProc directives of Apache.
	</para>
</sect1>

<sect1>
	<title>Further reading</title>
	<para>http://www.corsaire.com/white-papers/040405-application-level-dos-attacks.pdf </para>
</sect1>

