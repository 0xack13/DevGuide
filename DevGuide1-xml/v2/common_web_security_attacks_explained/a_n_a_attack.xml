<sect1>
	<title>Authentication And Authorization Attacks</title>
	<para>Authentication mechanisms that do not prohibit multiple failed logins can be attacked using tools such as Brutus12. Similarly, if the web site uses HTTP Basic Authentication or does not pass session IDs over SSL (Secure Sockets Layer), an attacker can sniff the traffic to discover user's authentication and/or authorization credentials.
	</para>
	<para>Since HTTP is a stateless protocol, web applications commonly maintain state using session IDs or transaction IDs stored in cookie on the user's system. Thus this session ID becomes the only way that the web application can determine the online identity of the user. If the session ID is stolen (say through XSS), or it can be predicted, then an attacker can take over a genuine user's online identity vis-à-vis the vulnerable web site. Where the algorithm used to generate the session ID is weak, it is trivial to write a Perl script to enumerate through the possible session ID space and break the application's authentication and authorization schemes.
	</para>
	<para>This was illustrated in a paper by David Endler [ref 9], "Brute-Force Exploitation of Web Application Session IDs", where he explains how session IDs of sites like www.123greetings.com, www.register.com, and others could be trivially brute-forced. Thus it was possible to access the unauthorized information simply by writing a Perl script that enumerated all possible IDs within a given range. The most pertinent point here is that although web application may have mechanisms to prevent a user from multiple password guessing attempts during authentication, they do not usually prevent a user from trying to brute-force sessions IDs by resubmitting the URLs.
	</para>
	<para>Another variation of an authorization attack is called as the 'Forced browsing' attack. In this case, the attacker tries to access a sensitive part of the web application without going through the prior stages of authentication. For instance, the attacker may try to access the orders.php page directly, without first having successfully logged in at the login.php page.
	</para>
	<para>The attacker may also bypass the normal flow of the application, and try and access those parts of the web application, which would not normally be accessible. These could include log files, configuration files, or source code, or in some cases sensitive data such as query outputs, people directories with their phones and email addresses, Excel spreadsheets, etc. This is typically done by crawling through the website, trying to determine the directory structure being used, and guessing directories with typical names such as /log/, /modules/, /temp/, /tmp/, /include/, /cgi-bin/, /docs/, /old/, /debug/, /data/, /test/, etc. In the worst case scenario, the attacker may even get access to the web site administration interface, or a SQL query input form, which may have been part of the debugging stage.
	</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>Brute-forcing of the web application's authentication mechanism can be mitigated by ensuring that your application has the following controls in place:
	</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Password complexity measures:
			</para>
			<para>does your application force users to choose complex passwords.
			</para>
		</listitem>
		
		<listitem>
			<para>Account lockout or timeout measures:
			</para>
			<para>does the application maintain state regarding previous failed logins in a given period of time. Ideally, the application should slow down the attacker's attempts after each failed login attempt. Also, after a preset number of failed login attempts, the user's account could be locked out for a specific period of time to prevent an attacker launching a series of password-guessing attacks.
			</para>
		</listitem>
		
		<listitem>
			<para>Prevention of automated attacks:
			</para>
			<para>Scripted or automated brute-force attacks of the authentication component can be handled by introducing dynamically generated 'gif' images, which contain a string that the user must enter along with his username and password. It allows for a variation of the two-factor authentication method.
			</para>
		</listitem>
	</itemizedlist>
	
	<para>Session ID brute-forcing can be mitigated by ensuring you have chosen strong session ID generation techniques. See the "Authorization" section in "Security Techniques" of the guide for more information on this. Another important measure is to ensure that session IDs are expired after a pre-determined interval to prevent session IDs being hijacked. Moreover, you may add code within your web application to detect access to different session IDs from the same source IP address. Also, do not use predictable names for your folders, and then secure them using proper access control rather than choosing security by obscurity.
	</para>
	<para>Other attacks that violate your site's authorization schemes can be mitigated by designing the access control right from the start, listing out the users and groups, and their required privilege levels. This should result in a formal access control policy for your website.
	</para>
	<para>A thorough penetration testing exercise may uncover any serious access control issues. If a source code audit is possible, then it is more likely to uncover logical flaws in the access control and authorization code.
	</para>
	<para>An easy means of detecting a brute-force attempt against the authentication page or the session Id's is to code the web application in a way that it alerts the administrator for multiple failed logins for the same username or from the same IP address. However, this is not always a trivial exercise, and may not be possible in a web application that has already been developed and deployed.
	</para>
	<para>In such a scenario, log analysis might reveal multiple accesses to the same page from the same IP address within a short period of time. Event correlation software such as Simple Event Correlator (SEC)13 can be used to define rules to parse through the logs and generate alerts based on aggregated events. This could also be done by adding a Snort rule for alerting on HTTP Authorization Failed error messages going out from your web server to the user, and SEC can then be used to aggregate and correlate these alerts.
	</para>
</sect1>
