<sect1>
	<title>HTML Injection</title>
	<para>HTML Injection, better known as Cross-site scripting, has received a great deal of press attention. The name originated from the CERT advisory, CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests [http://www.cert.org/advisories/CA-2000-02.html]. Although these attacks are most commonly known as "Cross-site Scripting" (abbreviated XSS), the name is somewhat misleading. The implication of the name "Cross-site Scripting" is that another site or external source must be involved in the attack. Posting links on an external site that inject malicious HTML tags on another site is one way that an HTML Injection attack can be executed, but is by no means the only way. The confusion caused by the implication that another site must be involved has led some developers to underestimate the vulnerabilities of their systems to the full range of HTML Injection attacks. HTML Injection attacks are exploited on the user's system and not the system where the application resides. Of course if the user is an administrator of the system, that scenario can change. To explain the attack let's follow an example. 
	</para>
	<para>Imagine a system offering message board services where one user can post a message and other users can read it. Posted messages normally contain just text, but an attacker could post a message that contains HTML codes including embedded JavaScript. If the messages are accepted without proper input filtering, then the embedded codes and scripts will be rendered in the browsers of those viewing the messages. What's more, they will execute in the security context of the user viewing the message, not the user posting the message. In the above message-board example, imagine an attacker submits the following message. 
	</para>
	<para>
	&lt;script&gt;alert(document.cookie)&lt;/script&gt;
	</para>
	<para>When this message is rendered in the browser of a user who reads the post, it would display that user's cookie in an alert window. In this case, each user reading the message would see his own cookie, but simple extensions to the above script could deliver the cookies to the attacker. The following example would leave the victim's cookie in the web log of a site owned by the attacker.
	</para>
	<para>If that cookie reveals an active session id of another user or a system administrator it gives the attacker an easy means of masquerading as that user in the host system. The "cross-site" version of the above attack would be to post a URL on another site that encoded similar malicious scripts. An attacker's website might offer a link that reads, "click here to purchase this book at Megabooks.com". Embedded into the link could be the same malicious codes as in the above example. If Megabooks.com returned the unfiltered payload to the victim's browser, the cookie of a Megabooks.com account member would be sent to the attacker. In the above examples, the payload is a simple JavaScript command.
	</para>
	<para>Because modern client-side scripting languages now run beyond simple page formatting, a tremendous variety of dangerous payloads can be constructed. In addition many clients are poorly written and rarely patched. These clients may be tricked into executing an even greater number of dangerous functions. There are four basic contexts for input within an HTML document. While the basic technique is the same, all of these contexts require different tests to be conducted to determine whether the application is vulnerable to this form of HTML injection:
	</para>
	
<para>
Tags - This is the most common usage of HTML Injection and involves inserting tags such as &lt;SCRIPT&gt;, &lt;A&gt; &lt;IMG&gt; or &lt;IFRAME&gt; into the HTML document. This context is used when the attack data is displayed as text in the HTML document. 
Events - An often-missed context is the use of scripting events, such as "onclick". This context is usually used when the payload is displayed to the user as an input field or as an attribute of another tag. A form element attribute such as "onclick" can encode the same type of malicious JavaScript commands, executed when a user clicks on the form element, for example: '" onclick="javascript:alert(123)' 
Indirect Scripting - Some web applications, such as message boards, allow limited HTML to be injected by the user. This is sometime done using an intermediate tag library, which is translated by the application into HTML before returning the page to the browser. For example, if: "[IMG]a.gif[/IMG]" generates the following HTML: "&lt;img src=&quot;a.gif&quot;/&gt;" then the technique could be exploited by an input such as this: '[IMG]nonsense.gif" onerror="alert(1)[/IMG]' 
Direct Scripting - Other web applications will occasionally generate scripting code on the fly and include data that originated from users in the script. 
</para>
	<para>As the above examples show, there are many ways in which HTML Injection can be used. HTML Injection attacks are some of the easiest for attackers to uncover because of the immediate test-response cycles and because of the limited knowledge of the application structure required. Malicious attacks can come from internal users as well as outside users. Therefore, preventing HTML Injection attacks is absolutely essential, even for applications on an intranet or other secure system. 
	</para>
	<para>Famous examples of cross-site scripting have been found in sites such as Paypal.com, Apple.com, Citibank's online cash-payment site C2IT.com9, and CNN.com.
	</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>If the web server does not specify which character encoding is in use, the client cannot tell which characters are special. Web pages with unspecified character-encoding work most of the time because most character sets assign the same characters to byte values below 128. Determining which characters above 128 are considered special is somewhat difficult. Web servers should set the character set, then make sure that the data they insert is free from byte sequences that are special in the specified encoding.
	</para>
	<para>This can typically be done by settings in the application server or web server. The server should define the character set in each html page as below. The above tells the browser what character set should be used to properly display the page. In addition, most servers must also be configured to tell the browser what character set to use when submitting form data back to the server and what character set the server application should use internally. The configuration of each server for character set control is different, but is very important in understanding the canonicalization of input data. Control over this process also helps markedly with internationalization efforts. Filtering special meta characters is also important. HTML defines certain characters as "special", if they have an effect on page formatting.
	</para>
	<para>
	In an HTML body:
	</para>
	<para>
&quot;&lt;&quot; introduces a tag. 
&quot;&amp;&quot; introduces a character entity. 
Note: Some browsers try to correct poorly formatted HTML and treat &quot;&gt;&quot; as if it were &quot;&lt;&quot;. 
	</para>
	<para>
In attributes: 
double quotes mark the end of the attribute value. 
single quotes mark the end of the attribute value. 
&quot;&amp;&quot; introduces a character entity. 
	</para>
	<para>
In URLs: 
Space, tab, and new line denote the end of the URL. 
&quot;&amp;&quot; denotes a character entity or separates query string parameters. 
Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs. 
	</para>
	<para>The &quot;%&quot; must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. Ensuring correct encoding of dynamic output can prevent malicious scripts from being passed to the user. While this is no guarantee of prevention, it can help contain the problem in certain circumstances. The application can make an explicit decision to encode untrusted data and leave trusted data untouched, thus preserving mark-up content. Encoding untrusted data can introduce additional problems however. Encoding a &quot;&lt;&quot; in an untrusted stream means converting it to &quot;&lt;&quot;. This conversion makes the string longer, so any length checking of the input should be done only after canonicalization and sanitization of the data. See the section on 'Canonicalization Attacks' below.
	</para>
</sect1>
<sect1>
	<title>Further Reading</title>	
	<para>Appendix B in this document contains source code samples for Data Validation.
	http://www.cert.org/tech_tips/malicious_code_mitigation.html
	</para>
</sect1>
