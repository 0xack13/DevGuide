<sect1>
	<title>OS Command Injection</title>
	<para>Nearly every programming language allows the use of so called &quot;system-commands&quot;, and many applications make use of this type of functionality. System-interfaces in programming and scripting languages pass input (commands) to the underlying operating system. The operating system executes the given input and returns its output to stdout along with various return-codes to the application such as successful, not successful etc. System commands can be a very convenient feature, which with little effort can be integrated into a web-application. Common usage for these commands in web applications are file handling (remove and copy), sending emails, and calling operating system tools to modify the applications input and output in various ways (filters).
	</para>
	<para>Depending on the scripting or programming language and the operating-system it is possible to:
	</para>
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Alter system commands</para>
		</listitem>
		<listitem>
			<para>Alter parameters passed to system commands</para>
		</listitem>
		<listitem>
			<para>Execute additional commands and OS command line tools</para>
		</listitem>
		<listitem>
			<para>Execute additional commands within executed command</para>
		</listitem>
		<listitem>
			<para>Alter system commands</para>
		</listitem>
		<listitem>
			<para>Alter system commands</para>
		</listitem>
	</itemizedlist>
	<para>Some common techniques for calling system commands in various languages that should be carefully checked include:
	</para>
	
	<para>PHP</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>require()</para>
		</listitem>
		<listitem>
			<para>include()</para>
		</listitem>
		<listitem>
			<para>eval()</para>
		</listitem>
		<listitem>
			<para>preg_replace() (with /e modifier)</para>
		</listitem>
		<listitem>
			<para>exec()</para>
		</listitem>
		<listitem>
			<para>passthru()</para>
		</listitem>
		<listitem>
			<para>` (backticks)</para>
		</listitem>
		<listitem>
			<para>system()</para>
		</listitem>
		<listitem>
			<para>popen()</para>
		</listitem>
	</itemizedlist>
	
	<para>Shell Scripts</para>
	<para>
	often problematic and dependent on the shell
	</para>
	
	<para>Perl</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>open()</para>
		</listitem>
		<listitem>
			<para>sysopen()</para>
		</listitem>
		<listitem>
			<para>glob()</para>
		</listitem>
		<listitem>
			<para>system()</para>
		</listitem>
		<listitem>
			<para>` (backticks)</para>
		</listitem>
		<listitem>
			<para>eval()</para>
		</listitem>
	</itemizedlist>

	<para>Java (Servlets, JSP's)</para>

	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>System.* (especially System.Runtime)</para>
		</listitem>
	</itemizedlist>
	
	<para>C and C++</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>system() </para>
		</listitem>
		<listitem>
			<para>exec**() </para>
		</listitem>
		<listitem>
			<para>strcpy </para>
		</listitem>
		<listitem>
			<para>strcat </para>
		</listitem>
		<listitem>
			<para>sprintf </para>
		</listitem>
		<listitem>
			<para>vsprintf </para>
		</listitem>
		<listitem>
			<para>gets </para>
		</listitem>
		<listitem>
			<para>strlen </para>
		</listitem>
		<listitem>
			<para>scanf </para>
		</listitem>
		<listitem>
			<para>fscanf </para>
		</listitem>
		<listitem>
			<para>sscanf </para>
		</listitem>
		<listitem>
			<para>vscanf</para>
		</listitem>
		<listitem>
			<para>vsscanf </para>
		</listitem>
		<listitem>
			<para>vfscanf </para>
		</listitem>
		<listitem>
			<para>realpath </para>
		</listitem>
		<listitem>
			<para>getopt </para>
		</listitem>
		<listitem>
			<para>getpass </para>
		</listitem>
		<listitem>
			<para>streadd </para>
		</listitem>
		<listitem>
			<para>strecpy </para>
		</listitem>
		<listitem>
			<para>strtrns</para>
		</listitem>
	</itemizedlist>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>There are several techniques that can be used to mitigate the risk of passing malicious information to system commands. The best way is to carefully limit all information passed to system commands to only known values. If the options that can be passed to the system commands can be enumerated, that list can be checked and the system can ensure that no malicious information gets through. When the options cannot be enumerated, the other option is to limit the size to the smallest allowable length and to carefully sanitize the input for characters, which could be used to launch the execution of other commands. Those characters will depend on the language used for the application, the specific technique of function being used, as well as the operating system the application runs on. As always, checks will also have to be made for special formatting issues such as Unicoded characters. The complexity of all of these checks should make it very clear why the "only accept known valid data" is the best and easiest approach to implement.
	</para>
</sect1>

