<sect1>
	<title>Null byte and CRLF attacks</title>
	<para>While web applications may be developed in a variety of programming languages, these applications often pass data to underlying lower level C-functions for further processing and functionality.
	</para>
	<para>If a given string, lets say &quot;AAA\0BBB&quot; is accepted as a valid string by a web application (or specifically the programming language), it may be shortened to &quot;AAA&quot; by the underlying C-functions. This occurs because C/C++ perceives the null byte (\0) as the termination of a string. Applications that do not perform adequate input validation can be fooled by inserting null bytes in &quot;critical&quot; parameters. This is normally done by URL Encoding the null bytes (%00). In special cases it is possible to use Unicode characters.
	</para>
	<para>The attack can be used to:</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Disclose physical paths, files and OS-information</para>
		</listitem>
		<listitem>
			<para>Truncate strings</para>
		</listitem>
		<listitem>
			<para>Truncate Paths</para>
		</listitem>
		<listitem>
			<para>Truncate Files</para>
		</listitem>
		<listitem>
			<para>Truncate Commands</para>
		</listitem>
		<listitem>
			<para>Truncate Command parameters</para>
		</listitem>
		<listitem>
			<para>Bypass validity checks, looking for substrings in parameters</para>
		</listitem>
		<listitem>
			<para>Cut off strings passed to SQL Queries</para>
		</listitem>
	</itemizedlist>

	<para>The most popular affected scripting and programming languages are:
	</para>
	
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Perl (highly)</para>
		</listitem>
		<listitem>
			<para>Java (File, RandomAccessFile and similar Java-Classes)</para>
		</listitem>
		<listitem>
			<para>PHP (depending on its configuration, which is covered in 'Language Specific Security')</para>
		</listitem>
	</itemizedlist>

	<para>Another similar attack works by injecting the carriage-return (CR) and linefeed (LF) characters into user input. If say, the user input is being used to make entries in the application or web server's log files, entering the CRLF characters may potentially allow the attacker to write log entries of his choice into the log files.
	</para>
</sect1>

<sect1>
	<title>Mitigation techniques</title>
	<para>Preventing null byte attacks requires that all input be validated before the application acts upon it. The same applies for CRLF as well. This could be done using the mod_security directive 'SecFilterByteRange 32 126', which allows only ASCII characters 32 to 126 as valid input.
	</para>
</sect1>

