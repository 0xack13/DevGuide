<sect1>
	<title>SQL Injection</title>
	<para>Well-designed applications insulate the users from business logic. Some applications however do not validate user input and allow malicious users to make direct database calls to the database. This attack, called direct SQL injection, is surprisingly simple.
	</para>
	<para>Imagine a login screen to a web application. When the user enters his user ID and password in the web form, his browser is creating an HTTP request to the web application and sending the data. This should be done over SSL to protect the data in transit. That typical request actually may look like this (A GET request is used here for demonstration. In practice this should be done using a POST so that the sensitive information is not displayed on a the address bar of the user's browser where a casual passer-by can read it):
	</para>
	<para>
http://www.vulnerablesite.com/login.asp?username=john&amp;password=doe
	</para>
	<para>The application that receives this request takes the two sets of parameters supplied as input:
	</para>
	<para>
Username  = john
Password = doe
	</para>
	<para>The application builds a database query that will check the user ID and password to authenticate the user. That database query may look like this:
	</para>
	<para>
select * from user_table where username='john' and password='doe'
	</para>
	<para>All works just fine until the attacker comes along and figures out he can modify the SQL command that actually gets processed and executed. Here he uses a user ID he does not have a password for and is not authorized to access. For instance: 
	</para>
	<para>
http://www.vulnerablesite.com/login.asp?username=admin&apos;--&amp;password=whatever
	</para>
	<para>The resulting SQL now appears like this:
	</para>
	<para>
select * from user_table where username='john'--' and password='whatever'
	</para>
	<para>The consequences are devastating. The single-quote (') closes the opening single-quote used by the application to construct the query. The -- comments out the rest of the SQL command causing the retrieval to ignore the rest of the query, including the value in the password field. The attacker has been able to bypass the administrative password and authenticate as the admin user. A badly designed web application means hackers are able to retrieve and place data in authoritative systems of record at will. Direct SQL Injection can be used to:
	</para>
	<para>
alter the maxlength attribute which will limit how much info a user can enter
change SQL values 
concatenate SQL statements 
add function calls and stored-procedures to a statement
typecast and concatenate retrieved data 
</para>
	<para>Some examples are shown below to demonstrate these techniques.
	</para>
	<para>
Changing SQL Values Malicious HTTP request 
Username: test'; insert into user_table values ('admin','admin');--
</para>
	<para>
Concatenating SQL Statements Malicious HTTP request
Username: test' union select username, password from user_table;--
</para>
	<para>
Adding function calls and stored-procedures to a statement Malicious HTTP request 
Username: test'; exec xp_cmdshell 'net user r00t3d r00t3d /add';--
</para>
	<para>
The important point to note here is that the SQL injection attack technique will differ significantly based on the back-end database that is being used. For instance, it is much easier to execute multiple queries on an MS SQL database by separating them with the semi-colon (;). However, the same attack on an Oracle database requires the use of UNION and more complicated syntax. An excellent article discussing SQL injection attacks on Oracle written by Pete Finnigan is available at:
</para>
	<para>
http://online.securityfocus.com/infocus/1644
</para>
	<para>
The most publicized occurrences of this vulnerability were on the e-commerce sites of Guess.com6 and PetCo.com7. A 20-year old programmer in Orange County, California, Jeremiah Jacks discovered that it was possible to ferret out highly sensitive data such as credit card numbers, transaction details, etc. from these and a number of other sites using specially crafted URLs containing SQL meta-characters.
</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>If your input validation strategy is to only accept expected input then the problem is significantly reduced. However this approach is unlikely to stop all SQL injection attacks and can be difficult to implement if the input filtering algorithm has to decide whether the data is destined to become part of a query or not, and if it has to know which database such a query might be run against. For example, a user who enters the last name "O'Neil" into a form includes the special meta-character ('). This input must be allowed, since it is a legitimate part of a name, but it may need to be escaped if it becomes part of a database query. Different databases may require that the character be escaped differently, however, so it would also be important to know for which database the data must be sanitized. 
	</para>
	<para>Fortunately, there is usually a very good solution to this problem. The best way to protect a system against SQL injection attacks is to construct all queries with prepared statements and/or parameterized stored procedures. A prepared statement, or parameterized stored procedure, encapsulates variables and should escape special characters within them automatically and in a manner suited to the target database. Common database API's offer developers two different means of writing a SQL query. For example, in JDBC, the standard Java API for relational database queries, one can write a query either using a PreparedStatement or as a simple String. The preferred method from both a performance and a security standpoint should be to use PreparedStatements. With a PreparedStatement, the general query is written using a ? as a placeholder for a parameter value. Parameter values are substituted as a second step. The substitution should be done by the JDBC driver such that the value can only be interpreted as the value for the parameter intended and any special characters within it should be automatically escaped by the driver for the database it targets. Different databases escape characters in different ways, so allowing the JDBC driver to handle this function also makes the system more portable. 
	</para>
	<para>Common database interface layers in other languages offer similar protections. The Perl DBI module, for example, allows for prepared statements to be made in a way very similar to the JDBC PreparedStatement. Another database interface solution is Cayenne8, which provides management of persistent Java objects mapped to relational databases. Developers should test the behavior of prepared statements in their system early in the development cycle.
	</para>
	<para>Parameterized stored procedures are a related technique that can also mitigate SQL Injection attacks and also have the benefit of executing faster in most cases. Most RDBMS systems offer a means of writing an embedded procedure that will execute a SQL statement using parameters provided during the procedure call. Typically these procedures are written in a proprietary Fourth Generation Language (4GL) such as PL/SQL for Oracle or T-SQL for SQL Server. When stored procedures are used, the application calls the procedure passing parameters, rather than constructing the SQL query itself. Like PreparedStatements in JDBC, the stored procedure does the substitution in a manner that is safe for that database.
	</para>
	<para>Use of prepared statements or stored procedures is not a panacea. The JDBC specification does NOT require a JDBC driver to properly escape special characters. Many commercial JDBC drivers will do this correctly, but some definitely do not. Developers should test their JDBC drivers with their target database. Fortunately it is often easy to switch from a bad driver to a good one. Writing stored procedures for all database access is often not practical and can greatly reduce application portability across different databases.
	</para>
	<para>Because of these limitations and the lack of available analogues to these techniques in some application development platforms, proper input data validation is still strongly recommended. This includes proper canonicalization of data since a driver may only recognize the characters to be escaped in one of many encodings. Defense in depth implies that all available techniques should be used if possible. Careful consideration of a data validation technique for prevention of SQL Injection attacks is a critical security issue. Wherever possible use the "only accept known good data" strategy and fall back to sanitizing the data for situations such as "O'Neil". In those cases, the application should filter special characters used in SQL statements. These characters can vary depending on the database used but often include &quot;+&quot;, &quot;-&quot;, &quot;,&quot; &quot;&apos;&quot; (single quote), &apos;&quot;&apos; (double quote), &quot;_&quot;, &quot;*&quot;, &quot;;&quot;, &quot;|&quot;, &quot;?&quot;, &quot;&amp;&quot; and &quot;=&quot;.
	</para>
	<para>An article on detection SQL injection attacks on an Oracle database, written by Pete Finnigan is available at:
	</para>
	<para>
	http://online.securityfocus.com/infocus/1714
	</para>
</sect1>

<sect1>
	<title>Further Reading</title>
	<para>
	Appendix C in this document contains source code samples for SQL Injection Mitigation. 
	</para>
	<para>
	http://www.nextgenss.com/papers/advanced_sql_injection.pdf 
	http://www.sqlsecurity.com/faq-inj.asp  http://www.spidynamics.com/papers/SQLInjectionWhitePaper.pdf 
	http://www.nextgenss.com/papers/advanced_sql_injection.pdf 
	http://www.nextgenss.com/papers/more_advanced_sql_injection.pdf 
	</para>
</sect1>
