<sect1>
	<title>Path Traversal</title>
	<para>Many web applications utilize the file system of the web server in a presentation tier to temporarily and/or permanently save information or load template or configuration files. The WWW-ROOT directory is typically the virtual root directory within a web server, which is accessible to a HTTP Client. Web Applications may store data inside and/or outside WWW-ROOT in designated locations. If the application does NOT properly check and handle meta-characters used to describe paths, for example "../", it is possible that the application is vulnerable to a "Path Traversal" attack. The attacker can construct a malicious request to return files such as /etc/passwd. This is often referred to as a "file disclosure" vulnerability. Traversing back to system directories that contain binaries makes it possible to execute system commands OUTSIDE designated paths instead of simply opening, including or evaluating file. 
	</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>Where possible make use of path normalization functions provided by your development language. Also remove offending path strings such as "../" as well as their Unicode variants from system input. Use of "chrooted" servers can also mitigate this issue. Running a web server or any other server, in a 'chroot' involves configuring the system in a way where the web server believes its installation directory to be the system's root directory. Let say, Apache is installed under /usr/apache/. Creating a chroot jail would require copying those system files and folders from their original locations to corresponding locations under /usr/apache. For instance, if a particular file, say /etc/passwd was being referenced, then it would have to be copied to /usr/apache/etc/passwd. Ideally, an edited version of this file would be copied containing only those entries that are necessary for Apache to run. This would be done for all the other files as well as system libraries used by Apache. Thus you would create a sort of virtual Linux system under your main Linux system, which would have only those files and libraries that are absolutely necessary for the Apache web server. If an attacker did manage to compromise the server, he would simply not have any access to the systems' critical files and folders located outside the 'chroot' root directory.
	</para>
	<para>Above all else by only accepting expected input, the problem is significantly reduced. We cannot stress that this is the correct strategy enough!
	</para>
</sect1>

