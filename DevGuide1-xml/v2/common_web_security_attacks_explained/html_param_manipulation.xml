<sect1>
	<title>HTML Parameter Manipulation</title>
	<para>HTML parameter manipulation is done via form fields or cookie values. It involves modifying the values of those parameters that the web application assumes as specific values. Typically, these values are stored in cookies on the user's system, or they are hidden HTML form fields. In either case, the web application trusts these values and depends on them for its proper functioning.
	</para>
	<para>One such attack is the price manipulation attack. This attack utilizes a vulnerability in which the total payable price of the purchased goods is stored in a hidden HTML field of a dynamically generated web page. An attacker can use a web application proxy such as Achilles10 or Paros11 to simply modify the amount that is payable, when this information flows from the user's browser to the web server. Another technique is to save the final payment page on the attacker's system, open it up in an editor, modify the values, and resubmit it. For instance, in a typically vulnerable shopping cart payment system, the submitted HTTP request would appear as:
	</para>
	<para>merchant_code=AA11&amp;orderid=7137107C17C&amp;currency=USD&amp;amount=879.00
	</para>
	<para>The final payable price (currency=USD&amp;amount=879.00) can be manipulated by the attacker to a value of his choice. This information is eventually sent to the payment gateway with whom the online merchant has partnered. If the volume of transactions is very high, the price manipulation may go completely unnoticed, or may be discovered too late. Repeated attacks of this nature could potentially cripple the viability of the online merchant.
	</para>
	<para>A simple variation is manipulation of drop-down box entries, which list say countries or states, and the server-side code expects the user input to be any one of the values present in the drop-down list. However, it is trivial to manipulate this data and carry out any of the attacks listed herein, including SQL injection.
	</para>
	<para>Another parameter manipulation attack is to modify the session ID or order ID or any other parameter that is being used to uniquely identify either the specific user or the user's specific transaction. Ideally, this parameter should be generated using a cryptographically secure randomization algorithm. However, if the web application uses its own proprietary randomization technique, which is not truly random enough, an attacker can manipulate URLs with modified parameter values to access information of other users or other transactions. For instance, in the above URL, if the order ID (orderid=712371007C17C) is not random enough, an attacker can write a custom Perl script to try and access the same URL but with brute-forced values for the orderid parameter, and potentially gain access to other user's transactions. This was illustrated in a paper by David Endler [ref 9], "Brute-Force Exploitation of Web Application Session IDs", where he explains how session IDs of sites like www.123greetings.com, www.register.com, and others could be trivially brute-forced.
	</para>
	<para>Another possible variant is to simple enter alphabets where the application expects numeric values and vice-versa. This can at times yield interesting results. Typically, it will make the application display an error, which could reveal critical information. In one specific case, we were able to extract the database number and version by simply feeding a numeric value into the field of a Java program expecting numeric input:
	</para>
	<para>http://www.myserver.com/navigate/page_id=AA
	</para>
</sect1>

<sect1>
	<title>Mitigation Techniques</title>
	<para>Do not trust user input and assume it to be in the expected format. Do not trust client-side javascript or VB Script code to clean up user input. Carry out input validation at the server side to ensure that user input is what it should be.
	</para>
	<para>The best method of selecting session IDs is to depend on the application platform. ASP, JSP and PHP have their own session ID generating algorithms, which are better to rely on rather than create your own.
	</para>
</sect1>

