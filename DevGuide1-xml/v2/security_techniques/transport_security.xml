<!-- $Id: transport_security.xml,v 1.7 2004/08/03 12:13:15 awiesmann Exp $ -->
<sect1>
	<title>What is Transport Security?</title>
	<para>
	Transport Security is the process of transmitting data securely between data consumers (clients) and producers (servers). In general, the client and server entities may be computers, network members, or even processes within the same computer.
	</para>
	<para>
	In the context of web applications and services, transport security is often used to secure the communications between tiers. For example, it provides a secure channel through the open network, between the end-user and the presentation tier. However, it also may come into play to tunnel through a <emphasis role="bold">demilitarized zone</emphasis>, which resides between the presentation tier and application tier, or between the application tier and the data tier.
	</para>
	<para>
	The most common transport security protocols are SSL (Secure Sockets Layer), TLS (Transport Layer Security, its successor), IPSec (the IP Security protocol, a link-layer protocol), Secure HTTP (shttp), and Microsoft's Server Gated Cryptography (SGC). There are also various application level utilities, such as Secure FTP (sftp), SSH (the secure shell), and stunnel (a tunneling application, useful to SSL-enable an application where SSL is not built-in).
	</para>
</sect1>

<sect1>
	<title>Motivations</title>
	<para>
	Why is transport security necessary? First, because data transmissions over standard connections are easy to eavesdrop and offer no inherent protection; second, because there are often legal statutes, which require secure information handling (Sarbanes Oxley, HIPAA, etc.) Finally, company data is a valuable asset, which must be protected in its own right.
	</para>
</sect1>

<sect1>
	<title>Benefits, Costs, and Issues</title>
	<para>
	It is important to understand the benefits, costs, and tradeoffs associated with providing transport security. For example, additional resources will be required to develop, test, and deploy secure connections through the product lifecycle, impacting the design, development, test, and operations phases. Secondly, it will be necessary to buy (or make) and manage digital certificates. Finally, it will be desirable to provide performance that scales, in terms of connection setup throughput. Therefore, there is some insight and judgment required in applying transport security strategically and effectively, rather than in a catch-all fashion.
	</para>
</sect1>

<sect1>
	<title>Application-level Transport Security</title>
	<para>
	Sometimes, there will not be the time or opportunity to incorporate transport security directly into the application that requires it. Or, in the situation where discrete files will be transferred under script control, it may be sufficient to use an external transport provider, which provides the transport security. In such cases, the stunnel and ssh applications are a big help.
	</para>
	
	<sect2>
		<title>Stunnel</title>
		<para>
		The stunnel application is an open source SSL endpoint, which is able to establish a connection with an SSL-enabled server. Furthermore, it can use a self-signed or a commercial-grade certificate, which has been issued by a trusted certification authority.
		</para>
		<para>
		The application that uses stunnel simply connects to it using a conventional socket connection. Stunnel forwards the connection, over an SSL connection, to the server determined by its configuration file.
		</para>
		
		<para>
		For more information, see the stunnel man page.
		</para>
	
		<sect3>
			<title>Availability</title>
			<para>
			Stunnel is available in most Linux distributions, or may be obtained from http://www.stunnel.org.
			</para>
		</sect3>

		<sect3>
			<title>Caveats</title>
			<para>
			The connection between stunnel and the client application is a cleartext connection, so using stunnel is not as secure as integrated SSL capability. Therefore, adequate security measures must be in place on the stunnel host (which is often the same computer that the client application is running on). However, stunnel can be used to provide SSL transport capability quickly, in situations where the security considerations aren't rigorous, or are well managed.
			</para>
			<para>
			Stunnel can't be used to provide secure connections for the FTP service. This is because of the nature of the FTP service, which requires one connection to be opened for FTP commands and another for data transfer. In such case, FTP should be replaced with an alternative like scp or anything alike.
			</para>
		</sect3>
		
		<sect3>
			<title>Stunnel Example</title>
			<para>
			This example uses stunnel in a loop-back fashion to provide an SSL connection from an e-mail client system to a Microsoft Outlook Web Access server. The e-mail client connects to localhost port 80 and the connection is forwarded using SSL to https://owa.foo.com.
			</para>
			<para>
			Here are the steps:
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Login to the client system as the administrative user (root).
				</para>
			</listitem>
			<listitem>
				<para>
				Add a service definition to /etc/stunnel/stunnel.conf:
				</para>
				<screen>
				[owa]
				accept  = 80
				connect = owa.foo.com:443
				</screen>
			</listitem>
			<listitem>
				<para>
				Restart (or start) the stunnel service:
				</para>
				<screen>
				# /etc/init.d/stunnel restart
				</screen>
			</listitem>
			</itemizedlist>
			<para>
			Now, client connections to localhost port 80 will be forwarded over an SSL connection to owa.foo.com port 443.
			</para>
		</sect3>
	</sect2>

	<sect2>
		<title>SSH</title>
		<para>
		The SSH protocols came about from a desire to provide secure replacements for the Berkeley/ARPA rsh, rcp, and rlogin commands.
		</para>
		<para>
		SSH is well-suited for providing secure authentication, session, and file transport capabilities for interactive users, scripts, or even software applications. It also features a secure forwarding capability, which works well with X11, VNC, and other application level protocols.
		</para>
		<para>
		Commonly available SSH versions feature a command-line interface, which makes it less suitable than SSL for direct use by a software application.
		</para>
		<para>
		There are two versions of the SSH protocol; SSHv1 and SSHv2. However, due to security issues and because the SSHv2 protocol offers more ciphering options and session negotiation capabilities, the version 1 protocol is deprecated.
		</para>
		<para>
		At least two books are available that describe using SSH in detail. For further information, see Barrett, et al [5] or Dwivedi [6].
		</para>
		
		<sect3>
			<title>Availability</title>
			<para>
			SSH is available on numerous platforms, including most UNIX and Windows editions. The open source version is available from http://www.openssh.org and works on systems ranging from supercomputers, desktop workstations, to handheld computers.
			</para>
		</sect3>

		<sect3>
			<title>Caveats</title>
			<para>
			Ssh doesn't include an application program interface (API), it only provides a simple command line interface. This makes it most suitable for interactive session or scripting environments, instead of direct integration within a software or web application.
			</para>
			<para>
			One method frequently used to support ssh connections to a Windows machine is to download, install, and run the Cygwin32 environment; see the project website at http://www.cygwin.com for further information. Alternatively, one can use the native compiled version by F-Secure or another supplier.
			</para>
			<para>
			Ssh supports the use of  <emphasis role="bold">certificate based authentication</emphasis> in addition, or as an alternative to, basic authentication (i.e. username and password). Certificate based logins provide more robust and efficient authentication, and are especially handy in automation situations, where interactive prompting for username and password may prove unwieldy. See the cited references for further information.
			</para>
		</sect3>
		
		<sect3>
			<title>SSH Example</title>
			<para>
			These examples are for Linux and assume ssh is already installed, configured, and in the shell search path on client and server. For further information, see Barrett, et al [5] and Dwivedi [6].
			</para>
			<para>
			<emphasis role="bold">Starting the SSH Server</emphasis>
			</para>
			<para>
			In general, use the system start-up script to manually manage ssh service:
			</para>
			<para>
			To start:
			</para>
			<screen>
			# /etc/init.d/sshd start
			</screen>
			<para>
			To restart:
			</para>
			<screen>
			# /etc/init.d/sshd restart
			</screen>
			<para>
			To stop:
			</para>
			<screen>
			# /etc/init.d/sshd stop
			</screen>
			<para>
			<emphasis role="bold">Opening an Interactive Session</emphasis>
			</para>
			<para>
			Enter the following command, on the client, to start a session on the server:
			</para>
			<screen>
			$ ssh [-l login-name] hostname
			</screen>
			<para>
			Where
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				login-name
				</para>
				<para>
				The login name to use; the active login name will be assumed otherwise.
				</para>
			</listitem>
			<listitem>
				<para>
				hostname
				</para>
				<para>
				The name of the server to connect to.
				</para>
			</listitem>
			</itemizedlist>
			<para>
			Note: You will be prompted to enter the necessary password.
			</para>
			<para>
			<emphasis role="bold">Sending a Single Command</emphasis>
			</para>
			<para>
			This is similar to opening an interactive session but sends a single command:
			</para>
			<screen>
			$ ssh [-l login-name] hostname command-string
			</screen>
			<para>
			Where
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				login-name
				</para>
				<para>
				The login name to use; the active login name will be assumed otherwise.
				</para>
			</listitem>
			<listitem>
				<para>
				hostname
				</para>
				<para>
				The name of the server to connect to.
				</para>
			</listitem>
			<listitem>
				<para>
				command-string
				</para>
				<para>
				A single shell command, which will be executed on the server. Normal escape characters apply and should be used as necessary.
				</para>
			</listitem>
		</itemizedlist>
	<para>
	Note: You will be prompted to supply the necessary password.
	</para>
		<para>
		<emphasis role="bold">Copying a File</emphasis>
		</para>
		<para>
		Use the scp command to copy a file from client to server:
		</para>
		<screen>
		$ scp source-file login-name@hostname:dest-file
		</screen>
		<para>
		Where
		</para>
		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				source-file
				</para>
				<para>
				The relative or absolute pathname of the file to send.
				</para>
			</listitem>
			<listitem>
				<para>
				login-name
				</para>
				<para>
				The login name to use; the active login name will be assumed otherwise.
				</para>
			</listitem>
			<listitem>
				<para>
				hostname
				</para>
				<para>
				The name of the server to connect to.
				</para>
			</listitem>
			<listitem>
				<para>
				dest-file
				</para>
				<para>
				The relative or absolute pathname, on the server, to send the file to. This may be the same name as on the client or a different name. It may also be a dot (.), which indicates the file should be placed in the user's home directory, on the server, using the same name.
				</para>
			</listitem>
			</itemizedlist>
		</sect3>
	</sect2>
</sect1>

<sect1>
	<title>What are TLS and SSL?</title>
	<para>
	When a URL uses the <emphasis role="bold">https</emphasis> scheme, it refers to HTTP over SSL transport. SSL, or the Secure Sockets Layer, was designed by Netscape Corporation and was first included in the Netscape v1.1 browser in 1995. Today, SSL is the most widely used transport security protocol in the world and is included de facto in all major web browsers and servers. Even VPN products are migrating to SSL, instead of IPSec, because of its proliferation.
	</para>
	<para>
	SSL Version 2 (SSLv2) appeared in 1994, but had a number of security problems that needed to be fixed. SSL Version 3 fixes the problems, includes the ability to negotiate more ciphering schemes, and also includes support for arbitrary-length certificate chains; all important enhancements.
	</para>
	<para>
	Since Netscape's original version of SSL was technically a proprietary protocol, the Internet Engineering Task Force (IETF) assumed responsibility for managing the SSL standard and renamed it to TLS (an acronym for <emphasis role="bold">Transport Layer Security</emphasis>). TLS Version 1.0 is functionally equivalent to SSL Version 3.1, with only minor changes to the original specification.
	</para>
	<para>
	Important Notes:
	</para>
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			In general, SSLv2 is deprecated, due to its security weaknesses and because SSLv3 offers greater flexibility and upward compatibility. Therefore, the most contemporary and security-conscious websites will support SSLv3 and TLS connections.
			</para>
		</listitem>
		<listitem>
			<para>
			SSL is an important component to web applications, but unfortunately, and often incorrectly, it has become ubiquitous with guarantees of comprehensive website security. Many e-commerce sites actively advertise, 'Transactions on our site are secure, because we use 128-bit SSL.'
			</para>
		</listitem>
		<listitem>
			<para>
			SSL, of course, is just one security component, which provides protection in moving data from client to server, but it does not make a website secure by itself. Furthermore, SSL is not immune from its own security and configuration issues, which can actually lead to significant vulnerabilities, unless understood and managed properly.
			</para>
		</listitem>
	</itemizedlist>
	
	<sect2>
		<title>How TLS and SSL Work</title>
		<para>
		At least two books have been written on the protocols, so just a brief presentation will be made here. For detailed information, see Rescorla [1] or Thomas [2].
		</para>
		<para>
		TLS and SSL are based on the Public Key Infrastructure (PKI) technology. Both protocols feature server-only or mutual authentication methods, by the use of private/public keys, digital certificates, and the Public Key Cryptography Standards (PKCS).
		</para>
		<para>
		For the purpose of simplicity, we will refer to TLS and SSL as just <emphasis role="bold">SSL</emphasis>, clarifying when necessary.
		</para>
		<para>
		SSL provides three essential security services when transporting data to and from web applications or services:
		</para>
		<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Message Confidentiality
			</para>
		</listitem>
		<listitem>
			<para>
			Message Integrity
			</para>
		</listitem>
		<listitem>
			<para>
			Entity Authentication
			</para>
		</listitem>
		</itemizedlist>
		<para>
		For security and performance reasons, SSL uses public key cryptography initially and switches to bulk data encryption with shared secret key and symmetric ciphering. The use of digital certificates assists in communicating the shared secret key in a secure fashion and also provides the Entity Authentication functionality. The SSL certificates are conventional X.509 certificates, which may include certificate extensions that designate special usage or features.
		</para>
		<para>
		A digital certificate includes textual information identifying the originator, a public key, and certification authority chaining information to validate trust (this chaining information is also referred to as the <emphasis role="bold">Hierarchy of Trust</emphasis> or <emphasis role="bold">HOT</emphasis>). Finally, the certificate is digitally-signed by a trusted third party, which is usually the issuing certification authority.
		</para>
		<para>
		As mentioned earlier, SSL features two entity authentication modes: The first, and most common, is for just the server to be authenticated by the client. The second, and most secure case, is for the server and client to mutually authenticate. For both cases, the SSL connection setup is completed before any HTTP transfer occurs.
		</para>
		
		<sect3>
			<title>SSL with Server-only Authentication</title>
			<para>
			SSL negotiation with server-only authentication is a nine-step process (see the figure).
			</para>
			<para>
			Note: In the steps below, #4, #6, and #8 are intentionally missing, because they are relevant only for the mutual authentication mode, which is described in the next section.
			</para>
			<para>
			Figure 1 -- SSL connection setup with server verification only
			</para>
			<para>
			MISSING IMAGE HERE
			</para>
			
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				1
				</para>
				<para>
				First, the client sends a <emphasis role="bold">Client Hello</emphasis> message to the server. The message contains the SSL version, the cipher suites, and the maximum key lengths the client is capable of communicating with.
				</para>
			</listitem>
			<listitem>
				<para>
				2
				</para>
				<para>
				The server answers with a <emphasis role="bold">Server Hello</emphasis> message, which proposes the SSL version, ciphers, and key lengths, from among the choices offered in the Client Hello.
				</para>
			</listitem>
			<listitem>
				<para>
				3
				</para>
				<para>
				The server sends its digital certificate to the client. The client will check the certificate (depending on configuration) and warn the user if the certificate is expired, revoked, or its hierarchy of trust doesn't chain up to a well-known root certification authority.
				</para>
			</listitem>
			<listitem>
				<para>
				5
				</para>
				<para>
				The server sends a <emphasis role="bold">Server Hello Done</emphasis> message, indicating it has concluded this portion of the connection setup process.
				</para>
			</listitem>
			<listitem>
				<para>
				7
				</para>
				<para>
				The client generates a secret key for symmetric ciphering and encrypts it using the server's public key, taken from the server's validated digital certificate. It sends this message to the server.
				</para>
			</listitem>
			<listitem>
				<para>
				9
				</para>
				<para>
				The client sends a <emphasis role="bold">Change Cipher Spec</emphasis> message, telling the server all future communications will utilize the shared secret key and specified symmetric ciphering scheme for efficient bulk data transmission.
				</para>
			</listitem>
			<listitem>
				<para>
				10
				</para>
				<para>
				The client sends a <emphasis role="bold">Finished</emphasis> message, encrypted using the shared secret key, which will also determine if the server is capable of decrypting the message, and therefore that symmetric ciphering negotiation has been successfully completed.
				</para>
			</listitem>
			<listitem>
				<para>
				11
				</para>
				<para>
				The server sends a <emphasis role="bold">Change Cipher Spec</emphasis> message, acknowledging that all future communications will be encrypted using the shared secret key and selected symmetric ciphering scheme.
				</para>
			</listitem>
			<listitem>
				<para>
				12
				</para>
				<para>
				The server sends a <emphasis role="bold">Finished</emphasis> message, encrypted using the shared secret key. If the client can decrypt this message successfully, the negotiation is complete, and the secure socket has been established.
				</para>
			</listitem>
			</itemizedlist>
		</sect3>
		
		<sect3>
			<title>SSL with Mutual Authentication</title>
			<para>
			SSL negotiation with mutual authentication (client/server) is a twelve-step process (see the following figure), which includes three more steps that the previously described process.
			</para>
			<para>
			Figure 2 -- SSL connection setup with client and server verification
			</para>
			<para>
			MISSING IMAGE HERE
			</para>
			<para>
			The additional steps are:
			</para>
			
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				4
				</para>
				<para>
				After sending its certificate, the server sends a <emphasis role="bold">Certificate Request</emphasis> message to the client, and then sends the <emphasis role="bold">Server Hello Done</emphasis> message.
				</para>
			</listitem>
			<listitem>
				<para>
				6
				</para>
				<para>
				The client responds with its digital certificate.
				</para>
			</listitem>
			<listitem>
				<para>
				8
				</para>
				<para>
				The client sends a <emphasis role="bold">Certificate Verify</emphasis> message, which includes a known piece of plaintext, encrypted using its private key. The server uses the client's certificate to decrypt the text, thereby confirming the client had the private key.
				</para>
			</listitem>
			</itemizedlist>
		</sect3>
	</sect2>
	
	<sect2>
		<title>Important Considerations</title>
		<para>
		As seen from the basic protocol flow, there are many security decisions and processes which occur seamlessly during SSL session setup, all of which may have significant impact on the website's end security. Although we cannot cover them all here, some important considerations are noted below.
		</para>
	
		<sect3>
			<title>SSL Provides Transport Security Only</title>
			<para>
			It is important to understand that SSL alone is insufficient to prevent all of the OWASP Top Ten [11] attack types from happening. For example, SQL injection cannot be prevented just because the HTTP request is transported over a secure connection. Therefore, transport security is just one component to ensure comprehensive web application security.
			</para>
		</sect3>
		
		<sect3>
			<title>Server Certificate Check</title>
			<para>
			The client should check the server's certificate for validity. Generally, it's a client-side configuration option to require checking the server's certificate, and the default is usually to skip this check. Therefore, corporate security policies should require the client browser to perform certificate validation, which at a minimum should include checking the validity dates, or more thoroughly, checking revocation information and the hierarchy of trust as well.
			</para>
		</sect3>
		
		<sect3>
			<title>Client Proposed Cipher and Key Length</title>
			<para>
			The client starts the SSL connection process by informing the server about the cipher types and key lengths it will support. If the options offered by the client provide only weak encryption, then the server should be configured in such fashion as to deny the connection. Make sure the server is configured appropriately, because in general, the default will be to use the selections preferred by the client.
			</para>
		</sect3>
		
		<sect3>
			<title>Client Proposed SSL Version</title>
			<para>
			As mentioned in Section 5.0, protocol versions before SSLv3 are deprecated. Therefore, the server should be configured to accept only SSLv3 or TLS connections, while logging failed SSLv2 connections appropriately.
			</para>
		</sect3>
		
		<sect3>
			<title>Client Proposed Key Exchange Algorithm</title>
			<para>
			The server should be configured to accept only suitable strength key exchange algorithms from the client. Furthermore, the server should not allow the client to back down the key exchange algorithm or bulk data encryption strength.
			</para>
		</sect3>
		
		<sect3>
			<title>X.509 Certificate Extensions May Give the Game Away</title>
			<para>
			As mentioned in Section 5.1, digital certificates may include extensions, which indicate special usage or features. It is important that such extensions be complementary to the SSL protocol to avoid introducing security vulnerabilities.
			</para>
			<para>
			MISSING EXAMPLE!
			</para>
		</sect3>
	</sect2>
	
	<sect2>
		<title>OpenSSL</title>
		<para>
		The OpenSSL project is a collaborative open-source initiative that publishes a multi-platform implementation of the TLS/SSLv3 protocols, which also includes the useful openssl cryptographic utility. For further information, see the project's home page, at http://www.openssl.org.
		</para>
	</sect2>
	
	<sect2>
		<title>PureTLS</title>
		<para>
		The PureTLS project is an open-source initiative that publishes a 100% Java implementation of the TLS protocol for use in Java environments. For further information, see the project's home page at http://www.rtfm.com/puretls.
		</para>
	</sect2>
	
	<sect2>
		<title>Digital Certificate Infrastructure and Lifecycle</title>
		<para>
		There is a quite elaborate infrastructure and lifecycle associated with digital certificates. A full presentation is beyond the scope of this guide, but the basics are mentioned below. For detailed information, see Feghhi, et al [7].
		</para>
	</sect2>
	
	<sect2>
		<title>Certificate Management Entities and Processes</title>
		<para>
		All X.509 based implementations share certain common entities and processes. They include:
		</para>
		
		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				One or more Registration Authorities (RA)
				</para>
				<para>
				The RA(s) are responsible for gathering registration information from applicants and creating certificate signing requests (CSRs).
				</para>
			</listitem>
			<listitem>
				<para>
				A Certification Authority (CA)
				</para>
				<para>
				The CA is responsible for generating certificates, in response to requests from an RA or by CSR submittals. The CA creates the certificate file, calculates and adds a unique hash value, and signs it using its own private key, which indelibly marks the certificate as originating from, or being signed by, that CA.
				</para>
				<para>
				The CA is also responsible for periodically publishing revocation information, known as a Certificate Revocation List (CRL) or for providing a network service that allows clients to submit revocation check requests and receive Good/Not Good responses over the network. The most common revocation checking protocols include the On-line Certificate Status Protocol (OCSP) and the Simple Certificate Protocol (SCP).
				</para>
			</listitem>
			<listitem>
				<para>
				One or more optional Validation Authorities (VA)
				</para>
				<para>
				The VA provides a central point of contact for validating certificates and performing revocation checking. The VA provides an economy of scale, by consolidating CRLs or validation checking services received from multiple CAs.
				</para>
			</listitem>
		</itemizedlist>
	</sect2>
	
	<sect2>
		<title>Certificate Management Standards</title>
		<para>
		There are various standards-based management operations for X.509-based certificate implementations. The common operations include:
		</para>
		
		<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Registering to receive a certificate (at a minimum, this requires visiting a registration authority website or generating a certificate signing request, or CSR).
			</para>
		</listitem>
		<listitem>
			<para>
			Submitting the CSR to the registration authority (RA).
			</para>
		</listitem>
		<listitem>
			<para>
			Receiving the certificate and private key from the certification authority (CA).
			</para>
		</listitem>
		<listitem>
			<para>
			Installing the certificate on the end system.
			</para>
		</listitem>
		<listitem>
			<para>
			Performing various utility operations (for example, displaying the certificate validity dates and attributes, validating a certificate, revoking a certificate, renewing a certificate, etc.)
			</para>
		</listitem>
		</itemizedlist>
		
	</sect2>
	
	<sect2>
		<title>Certificate File Types</title>
		<para>
		Depending on the end system platform, it may be necessary to convert among certificate formats (see below for more information on the typical format types; the following sections explain how to use the openssl utility for this purpose).
		</para>
		<para>
		The following file types are common:
		</para>
		<para>
		.cer: An X.509 digital certificate, in binary DER or Base64 format.
		</para>
		<para>
		.crl: Certificate Revocation List
		</para>
		<para>
		.crt: A temporary X.509 Certificate
		</para>
		<para>
		.csr: Certificate Signing Request
		</para>
		<para>
		.der: An X.509 certificate, in Distinguished Encoding Rules format, the certificate fields are encoded using (tag, length, value) triplets.
		</para>
		<para>
		.p7b: An X.509 certificate, stored in PKCS#7 format.
		</para>
		<para>
		.pem: Privacy Enhanced Mail format, a key or X.509 certificate, Base64 encoded, surrounded by BEGIN-END header lines.
		</para>
		<para>
		.pfx or .p12: Personal Information Exchange (PKCS#12) format, a password protected and portable format for storing or transporting the private key and associated certificate.
		</para>
	</sect2>
	
	<sect2>
		<title>Common OpenSSL Operations</title>
		<para>
		The following sections show how to use the openssl utility to perform various certificate management and utility operations.
		</para>
	
		<sect3>
			<title>Creating a CA Signed Certificate</title>
			<para>
			This example is for a fictitious http://www.foo.com certificate.
			</para>
			<para>
			First, visit the RA's or CA's website and check the instructions there. In general, however, the process will follow these steps:
			</para>
			
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Go to your local SSL directory and generate a private key:
				</para>
				<screen>
				# cd /usr/local/ssl/private
				# openssl genrsa -des3 1024 &gt; foo-com.pem
				</screen>
			</listitem>
			<listitem>
				<para>
				Note: You will be prompted to create the key access password. Back up the password and the generated private key file, and save them in a secure fashion.
				</para>
			</listitem>
			<listitem>
				<para>
				Go to the local certs directory and generate a Certificate Signing Request (CSR):
				</para>
				<screen>
				# cd /usr/local/ssl/certs
				# openssl req -new -key ../private/foo-com.pem &gt; foo-com.csr
				</screen>
				<para>
				Note: You will be prompted to supply the various certificate field values.
				</para>
			</listitem>
			<listitem>
				<para>
				Generate a temporary self-signed certificate, good for ten days:
				</para>
				<screen>
				# openssl req -x509 -key ../private/foo-com.pem -in foo-com.csr -days 10 &gt; foo-com.crt
				</screen>
				<para>
				Note: If desired, use this certificate to get your SSL-enabled website running while waiting on the CA signed certificate to arrive.
				</para>
			</listitem>
			<listitem>
				<para>
				Submit the CSR to the CA
				</para>
			</listitem>
			<listitem>
				<para>
				Receive the signed certificate from the CA
				</para>
			</listitem>
			<listitem>
				<para>
				Install the certificate (replace the temporary self-signed certificate with the CA signed certificate)
				</para>
			</listitem>
			</itemizedlist>
		</sect3>
		
		<sect3>
			<title>Creating a Self-signed Certificate</title>
			<para>
			It is possible to use the openssl utility to create a self-signed certificate, too.
			</para>
			<para>
			Caveats:
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				When a certificate is self-signed, it does not have a hierarchy of trust, which chains up to a well-known certification authority. Specifically, it only has trust within the confidence granted to the system that created the certificate. Therefore, it is ill-advised to use a self-signed certificate for an e-commerce website, although it may be an acceptable option for an internal or testing-only website.
				</para>
			</listitem>
			<listitem>
				<para>
				Most web browsers will not accept a self-signed certificate by default. Typically, a pop-up dialog appears to prompt the user to accept the certificate before continuing the connection process.
				</para>
			</listitem>
			</itemizedlist>
			<para>
			To use the openssl utility to generate a self-signed certificate, follow this process:
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Go to your local SSL directory and generate a private key:
				</para>
				<screen>
				# cd /usr/local/ssl/private
				# openssl genrsa [-des3|-aes128|-aes192|-aes256] [numbits] &gt; key.pem
				</screen>
				<para>
				Where
				</para>
				<para>
				<emphasis role="bold">des3</emphasis> or <emphasis role="bold">aes#</emphasis> signify using Triple DES or AES encryption, respectively, for protecting the private key.
				</para>
				<para>
				Note: If you supply one of these options, you will be prompted to create the key access password. Back up the password and the generated private key file, and save them in a secure fashion.
				</para>
				<para>
				<emphasis role="bold">numbits</emphasis> signifies the number of bits for the modulus used to encrypt the private key.
				</para>
				<para>
				Note: The default value is 512; the recommended value is 1024.
				</para>
				<para>
				<emphasis role="bold">key.pem</emphasis> signifies the filename where the encrypted private key will be placed, in PEM format.
				</para>
			</listitem>
			<listitem>
				<para>
				Go to the local certs directory and generate a Certificate Signing Request (CSR):
				</para>
				<screen>
				# cd /usr/local/ssl/certs
				# openssl req -new -key ../private/key.pem &gt; cert.csr
				</screen>
				<para>
				Note: You will be prompted to supply the various certificate field values.
				</para>
			</listitem>
			<listitem>
				<para>
				Generate the self-signed certificate, good for one year:
				</para>
				<screen>
				# openssl req -x509 -key ../private/key.pem -in cert.csr -days 365 &gt; cert.crt
				</screen>
			</listitem>
			<listitem>
				<para>
				Install the certificate.
				</para>
			</listitem>
			</itemizedlist>
		</sect3>
		
		<sect3>
			<title>Converting Among Certificate Formats</title>
			<para>
			Sometimes, a certificate may be received in PEM format, but needs to be installed in PKCS#12 format, or vice versa. The openssl utility is useful to facilitate conversions between the two formats, as shown below.
			</para>
			<para>
			Note: For a description of all the openssl PKCS#12 options, run <emphasis role="bold">openssl pkcs12 help</emphasis>.
			</para>
			
			<sect4>
				<title>Converting PKCS#12 to PKCS#7 Format</title>
				<para>
				This example converts PKCS#12 (.p12 format) to PEM, taking just the client certs with private keys:
				</para>
				<screen>
				$ openssl pkcs12 -in filename.p12 -out client_certs.pem -nodes -clcerts
				</screen>
				<para>
				This example converts PKCS#12 (.p12 format) to PEM, taking just the CA certs:
				</para>
				<screen>
				$ openssl pkcs12 -in filename.p12 -out ca_certs.pem -nokeys -cacerts
				</screen>
			</sect4>
			
			<sect4>
				<title>Converting PKCS#7 to PKCS#12 Format</title>
				<para>
				This example converts a PEM format certificate and private key to PKCS#12 (.p12 format):
				</para>
				<screen>
				$ openssl pkcs12 -export -inkey key.pem -in cert.pem -out filename.p12
				</screen>
				<para>
				This example converts a PEM format certificate and private key to PKCS#12 (.p12 format), but with no encryption of the private key:
				</para>
				<screen>
				$ openssl pkcs12 -export -inkey key.pem -in cert.pem -out filename.p12 -nodes
				</screen>
			</sect4>
		</sect3>
	</sect2>
	
</sect1>


<sect1>
	<title>Summary</title>
	<para>
	Transport Security provides a secure communications channel between client and server systems. The commonly used protocols are SSL/TLS, IPSec, Secure HTTP (shttp), and Microsoft SGC. There are other application-level utilities available, too, including Stunnel, SSH, Secure FTP and S/MIME.
	</para>
	<para>
	SSL is the most widely used transport security protocol and uses public key encryption for session setup with a shared secret key and symmetric ciphering for efficient bulk data encryption. The use of SSL alone doesn't guarantee comprehensive web application security, although it is an important component for that objective. There are also various considerations to address to ensure that an SSL/TLS deployment is configured in an optimally secure fashion.
	</para>
	<para>
	Finally, digital certificates are an important infrastructure component for the SSL protocol. There are two commonly used digital certificates: Ones generated by a well-known and trusted certification authority and those that are self-signed (trusted to the issuing system only).
	</para>
</sect1>

<sect1>
	<title>References</title>
	<para>
	1. SSL and TLS: Designing and Building Secure Systems, Eric Rescorla, Addison-Wesley Press, 2000, ISBN 0201615983.
	</para>
	<para>
	2. SSL and TLS Essentials, Stephen Thomas, Wiley Press, 2000, ISBN 0471383546.
	</para>
	<para>
	3. The TLS Standard, at http://www.ietf.org, RFCs #2246 and #3546.
	</para>
	<para>
	4. The OpenSSL man page, at http://www.openssl.org.
	</para>
	<para>
	5. SSH, the Secure Shell: the Definitive Guide, Daniel J. Barrett, et al, O'Reilly &amp; Associates, 2001, ISBN 0596000111.
	</para>
	<para>
	6. Implementing SSH, Himanshu Dwivedi, Wiley Press, 2003, ISBN 0471458805.
	</para>
	<para>
	7. Digital Certificates: Applied Internet Security, Feghhi, Feghhi, and Williams, Addison-Wesley Press, 1999, ISBN 0201209807.
	</para>
	<para>
	8. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile, at http://www.ietf.org, RFC #3280.
	</para>
	<para>
	9. The PKCS Standards, RSA Security, Inc. at http://www.rsasecurity.com/rsalabs.
	</para>
	<para>
	10. Applied Cryptography, Bruce Schneier, Wiley Press, Second Edition, 1995, ISBN 0471117099.
	</para>
	<para>
	11. The Top Ten List, the Open Web Application Security Project (OWASP), 2004, at http://www.owasp.org.
	</para>
</sect1>

