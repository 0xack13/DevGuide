<sect1>
	<title>Overview</title>
	<para>  
  Initialy the realm of academia, cryptography has become ubiquitous thanks to the Internet.  Whether SSL or biometrics, cryptography has
  permeated through everyday language and through most web development
  projects. 
  	</para>
	<para>
  Cryptography (or crypto) is one of the more advanced topics of
  information security, and one whose understanding requires the most schooling and experience. It is difficult to get right because there are many approaches to encryption, each with advantages and disadvantages that needs to be well understood by the architects and developers of a web development project. In addition, the proper and accurate implementation of cryptography is extremely critical to its security strength. A small mistake in configuration or coding may result in removing most of the protection and rending the objective of crypto useless.

  	</para>
	<para>
  Lastly, a good understanding of crypto is required to be able to
  discern between solid products and systems and snake oil. The
  inherent complexity of crypto make it easy to fall for fantastic
  claims from vendors about their product. Typically these are "a
  breakthrough in cryptography" or "unbreakable" or provides "military
  grade" security.  If a vendor says "trust us, we've had experts look
  at this", chances are they weren't experts! A good  FAQ on snake oil
  cryptography at can be found at http://www.interhack.net/people/cmcurtin/snake-oil-faq.html. In
  addition, Bruce Schneier, a renowned cryptographer, regularly points out some of these vendors in his Crypto-Gram newsletter (http://www.counterpane.com/crypto-gram.html).

  	</para>
</sect1>
	
<sect1>
	<title>Crypto in Theory</title>
	<para>
A cryptographic system (or a cipher system) is a method of hiding data so that only certain people can view it. Cryptography is the practice of creating and using cryptographic systems. Cryptanalysis is the science of analyzing and reverse engineering cryptographic systems. The original data is called plaintext. The protected data is called ciphertext and this is the garbled version of the plaintext.  Encryption is a procedure to convert plaintext into ciphertext. Decryption is a procedure to convert ciphertext into plaintext. A cryptographic system typically consists of algorithms, keys, and key management facilities.

</para>
	<para>
Cryptography can be used to provide:
</para>
	<itemizedlist mark="opencircle">
		<listitem><para>Confidentiality - ensure data is read only by authorized parties,</para></listitem>
		<listitem><para>Data integrity - ensure data wasn't altered between sender and recipient,</para></listitem>
		<listitem><para>Authentication - ensure data originated from a particular party.</para></listitem>
		<listitem><para>Nonrepudiation - ensure party cannot deny previous commitments or actions.</para></listitem>
	</itemizedlist>

	<para>
Although there are dozens of products and algorithms available, the
most basic and widely used approaches to encrypting data are symmetric (private or shared key) and asymmetric (public key).

</para>
	<para>
Symmetric cryptography algorithms are typically fast and are suitable
for processing large streams of data. Symmetric cryptographic systems require both the sender and the recipient to have the same key. This key is used by the sender to encrypt the data, and again by the recipient to decrypt the data. Key exchange may be a problem. How do you securely send a key that will enable you to send other data  securely? If a private key is intercepted or stolen, a malicious party can act as either party and view all data and communications. You can think of the symmetric crypto system as akin to the Chubb type of door locks. You must be in possession of a key to both open and lock the door.

</para>
	<para>
TODO : insert graphic that explains process</para>
	<para>
In general, asymmetric ciphers are slower than their symmetric counterparts and key sizes are generally much larger. Public key cryptographic algorithms use a fixed buffer size whereas private key cryptographic algorithms use a variable length buffer. In addition, public key algorithms cannot be used to chain data together into streams like private key algorithms can. Despite its speed, symmetric cryptography is not optimal for Internet applications due to the nature of key exchange and the inherent scalability problems in managing vast amounts of shared keys. Hence in practice, symmetric algorithms are usually mixed with public key algorithms to obtain a blend of security and speed.

</para>
	<sect2>
		<title>Hash Functions</title>
		<para>
TODO : insert graphic that explains process </para>
		<para>
A hash value is a unique and extremely compact numerical representation of a piece of data, or message. It is unlikely to find two distinct messages that hash to the same value so for our purposes, a hash is completely unique to a message. If this message changes in any way, so will the its resulting hash. The hash value acts like a fingerprint of the message. The most widely used hashing algorithms are MD5 and SHA.

</para>
		<para>
Hash functions have some useful applications and form the basis for other technologies, such as digital signatures.
</para>
	</sect2>
	<sect2>
		<title>Digital Signatures</title>
		<para>
Digital signatures combine hashing with asymmetric cryptography to provide authentication, integrity and nonrepudiation. Confidentiality can be provided using additional cryptography, but confidentiality is not an objective of digital signatures. Many countries have passed laws that allows digital signatures to be as legally binding as a physical signature.

</para>
		<para>
To create a digital signature, the sender hashes the message or document and then encrypts the hash value using his or her private key. This encrypted hash is then appended to the original message and sent to its destination. The receiver, in turn, removes the encrypted hash from the message and decrypts it using the sender's public key. The message is hashed again and the resulting value is compared with the decrypted hash value. If they both match, the receiver has some level of assurance that the message came from the sender and that is was not altered or forged during its transmission. Unless the receiver used a public key that did not belong to the real sender, but to a malicious party masqueraded as such.

TODO : insert graphic that explains process </para>
	</sect2>
	<sect2>
		<title>Public Key Infrastructure</title>
		<para>
Public Key Infrastructure (or PKI)is a framework that uses cryptographic systems, hashing and digital signatures to create an infrastructure that provides all crypto goals (confidentiality, integrity, authentication and nonrepudiation) in an transparent manner.

</para>
		<para>
As stated earlier, symmetric cryptography relies on a shared keys and these are typically physically exchanged so they are out of band. A byproduct of a real world meeting is that both sender and receiver are mutually authenticated. Asymmetric cryptography uses a key pair (private and public key) and the nature and security of the key exchange is critical to preventing spoofing attacks. If a malicious party initially fools the receiver that they are someone else (when exchanging public keys), the trust relationship has been breached. Digital signatures and public key crypto can provide authentication and confidentiality that that individual (who is also the impostor).  PKI provides a solution to secure public key exchange by introducing certification authorities and digital certificates. Certification authorities act like trusted third parties that verify the real world identity of individuals and their association with the public and private keys. They certify an individual's (or subject) public key is authentic using digitally signed files called digital certificates (or public-key certificates). If the certification authority is trusted by the receiver, then the sender's identity and public key (obtained from the digital certificate) is also trusted.

</para>
		<para>
Besides certification authorities, a public key infrastructure includes registration authorities (RAs), directories, certificate management systems (CMSs), policies, and a plethora of services and protocols to admister digital certificates. This administration includes providing ways to:
</para>

	<itemizedlist mark="opencircle">
	<listitem><para>allow individuals to register and obtain digital certificates</para></listitem>
	<listitem><para>verify the real world identity of individuals</para></listitem>
	<listitem><para>validate the authenticity of digital certificates</para></listitem>
	<listitem><para>revoke or update existing digital certificates</para></listitem>
	<listitem><para>securely store digital certificates</para></listitem>
	<listitem><para>transfer the digital certificates securely</para></listitem>
	</itemizedlist>
		
		<para>
Cryptography provides the foundation for information security and its a large and complex field. There are several other types of cryptographic algorithms and approaches besides the ones discussed above. There is elliptic curve cryptography, zero knowledge proof systems, stream ciphers, etc. For example, a novel approach to secure messaging is identity based encryption, that does away with public key certificates or key exchange. The public key can be composed of truly public information (such as the recipient's email address) and a central server distributes short lived private keys on demand.

</para>
		<para>
For a complete and thorough tutorial on cryptographic systems and their implementation, we recommend reading `Applied Cryptography'' by Bruce Schneier (see Bibliography).

</para>
	</sect2>
</sect1>
	
<sect1>
	<title>Crypto in Practice</title>
	<para>
 The objectives of cryptography apply to web applications in a great
 number of ways. Almost every application needs to deal with secrets
 of one type or another. Integrating cryptography into a web application may look deceivingly simple and may seem to work but it doesn't mean it provides the level of security expected. As mentioned earlier, small mistakes in implementation can result in significant reduction in the level of protection. Mistakes in cryptography are typically not obvious and they tend manifest themselves only after a security breach. Cryptographic functions that are custom developed are very likely to contain mistakes. Even implementations of packaged and tested libraries have frequent mistakes prevalent enough to be on the OWASP Top Ten list of vulnerabilities in web applications. The number 8 vulnerability is insecure use of cryptographic functions, especially for protecting information and user credentials.

</para>
	<para>
The best time to start thinking about cryptography and security when building a web application is during application design.  A best practice is to perform a risk assessment to identify the areas of risk and focus. The time and energy spent on the risk assessment is relative to the context of the application and its purpose. A small web site with static pages might deserve an ad hoc conversation with the project team lasting no more than a few minutes. A transactional system that plans to process orders or large sums of money will require a more formal risk analysis process that includes a security risk profile, impact analysis, risk determination, etc.

</para>
		
	<para>
A good way to identify the critical areas that might require cryptography is to step through the transaction or the data lifecycle within the application. Applications that transmit sensitive information (such as credit cards or personal information) need to implement countermeasures to mitigate eavesdropping or spoofing risk. In this case, crypto can be used to secure communications (confidentiality) and verify identity (authentication). Other applications have regulatory and legislative requirements for storing and archiving data securely. High profile web applications are exposed to brand risk if they easily compromised due to, say, insecure session management.

</para>
	<para>
A cost benefit analysis follows from an understanding of the most pressing risks. How can crypto mitigate those risks? What components of the application require crypto? What is the most effective way of using crypto in these components?

</para>
		
	<sect2>
		<title>Crypto for Communication</title>
		<para>
The most popular use of cryptography on the Internet is to secure communication between web browser and web server. The de facto standard for this purpose is TLS, which is based on SSL.

</para>
		<para>
TLS/SSL offers the advantages of cryptography in a simple and effective manner, at a small cost. The cost is significant in terms of additional processing required as well as the cost of certificates. Processing requirements can be mitigated by purchasing additional servers or SSL accelerators and appliances. The cost of third party server certificates are generally small and negligible. TLS/SSL is addressed in more detail in the Transport Security chapter of this guide.

</para>
		<para>
Besides communication between a browser and a web server, cryptography is used to secure transmission between two computers, in the case of VPNs (virtual private networks) or ssh (secure shell). Both are outside the scope of this guide but are commonly used for administration of web applications. Typically web applications are hosted at a collocation or hosting provider. In order to enable remote administration, a best practice is to require strong authentication to connect to the local web server network, using a VPN. Once on that network, then ssh could be used to connect directly to the server.

</para>
	</sect2>
		
	<sect2>
		<title>Crypto for Authentication</title>
		<para>
A secure means of communication is fundamental, but its value would be precarious if one party cannot confirm the other at the end of the line. Sending your credit card information over a secure channel is of little consolation if you sent it to a crook.

</para>
		<para>
TSL/SSL relies on public key cryptography, and thus uses a public key and private key. Digital certificates are used to exchange public keys with other parties and thus to verify identity. You can use a server certificate that allows users to authenticate your server before they transmit sensitive information. You can also use client certificates that allows you to authenticate users prior to sending them information. Certificates are issues by a certification authority (CA) but anybody can run their own CA and generate certificates. How can you one tell the certificate presented is valid and authentic? Who do you trust?

</para>
		<para>
One answer to this question is establishing a direct trust relationship, that is simply to issue the certificate yourself. The certificate authority and all the keys that it issues is automatically trusted because you are running the CA yourself. This approach works best for internal or intranet applications.

</para>
		<para>
Another solution is using a hierachical approach using a limited amount of root CAs that are mutually trusted. For example, if a web browser trusts the Verisign or Thawte certificate authority (CA) and in turn, the CAs trusts the certificate presented by your site, the web browser will accept the certificate as authentic and valid. This is the way most commercial web applications work. Every brower that supports SSL has a list of root certificate authorities that it trusts.

</para>
		<para>
In technical terms the above scenario is called a centralized key infrastructure. Another approach of establishing a trust network is with a web of trust. This approach distributes trust across the users, instead of a few authoritative CAs. This approach is optimal for community oriented sites or for applications that involve a relatively small user pool.

</para>
		<para>
In addition to certificates, cryptography forms the foundation for other approaches to authentication, such as using tokens or one time passwords. A token can be generated using key fobs (like RSA's SecureID), handheld devices or simply a software program. Some are synchronous and the token is generated based on a clock or a counter (or both) and by adding a shared secret key. Others  are asynchronous and they rely on some of type challenge-response mechanism. The use of such tokens, in addition to passwords provides strong authentication and can be used on web applications with more stringent security requirements.

</para>
	</sect2>
		
	<sect2>
		<title>Crypto for Storage</title>
		<para>
California SB 1386, HIPAA, Sarbanes Oxley, GLBA are just some of the laws requiring companies based in US to protect and encrypt sensitive personal data. European companies have the EU Data Protection Directive in addition to their locallegislation. In addition to regulatory requirements, data encryption is increasingly found in business contracts and agreements. For example, Visa has an established set of requirements (Visa CISP) that mandate data encryption for merchants and credit card processors.

</para>
			
		<para>
In the context of web application, secure data storage means database encryption in addition to adequate access controls and system configuration. There are a few options where encryption can be applied, and  specifically at the:
</para>

		<itemizedlist mark="opencircle">
		<listitem><para>file system level</para></listitem>
		<listitem><para>data column level</para></listitem>
		<listitem><para>application level</para></listitem>
		</itemizedlist>
		
		<sect3>
			<title>File System Level</title>
			<para>
File system encryption is a transparent approach to secure data storage in terms of impact to web application. Hardware or software can be used to encrypt the database files, which are subsequently decrypted by the database system. The key can be either stored on a hardware devide or on the server in a secured repository, like the Windows Security Accounts Manager (SAM) database.

This approach is effective against unauthorized access of database files, in the case an attacker the attacker compromises the database server and obtains access to the files. This approach is less effective if the attacker is exploiting a vulnerability in the  web application to extract data (like in the common case of SQL injection).

</para>
		</sect3>
		<sect3>
			<title>Data Column Level</title>
			<para>
Applying encryption at the data column level within a database is a focused approach and is sometimes significantly faster than encryption at the file system. In general, encryption performance is dependent on too many factors (such as database schema, data usage, encryption algorithm, type of solution, etc) and is thus impossible to produce meaningful metrics.

Column level encryption works by storing the encrypted versions of sensitive information within the database. This information is then encrypted and decrypted by the database management system, based on the user connected to the database. Unauthorized users running queries typically receive error messages or no results.

Column level encryption is not as transparent as the file system approach because the web application would be required to use different users to create a database connection. A common practice in web applications is to rely on a single user id with complete access to the database. With this database user id, the application server creates database connection pools to enhance performance. However, column level encryption is a great countermeasure against attacks originating from the web application itself.

</para>
		</sect3>
		<sect3>
			<title>Web Application Level</title>
			<para>
The most comprehensive approach to database encryption is the application level encryption. This approach moves encryption and decryption to the web application itself so the data sent to the database is already encrypted. Some custom code is required as well as a profound grasp of cryptography, depending on the complexity.

</para>
			<para>
For example when storing user passwords, a best practice is to use hashing since it allows a party to prove they know something without revealing what that is. If a user password is "mypassword", the application would hash this string resulting in say, "cb4e0bdaf03845". This string would then be stored be in a database. The next time a user attempts to log in, the application hashes the password received and then checks to see if the resulting hash value matches the one in the database.

</para>
			<para>
In theory application level encryption can offer the most security, but in reality it also offers the most risk of a poor implementation, and thus the most insecurity. There are some vendors that can assist (such as nCipher or Entrust) nevertheless this solution has the highest impact to the application and requires an enormous amount of confidence in the development team.

</para>
		<para>
The three approaches to database encryption are not mutually exclusive. In fact, applications with stringent security requirements may use a combination of approaches. In all cases however, encryption will diminish the overall system performance.

</para>
</sect3>
	</sect2>
	<sect2>
		<title>Summary</title>
		<para>
Cryptography is one of pillars of information security. Its usage and propagation has exploded due to the Internet and its now included in most areas computing. Crypto can be used for
</para>

	<itemizedlist mark="opencircle">
	<listitem><para>Remote access such as IPSec VPN</para></listitem>
	<listitem><para>Certificate based authentication</para></listitem>
	<listitem><para>Securing confidential or sensitive information</para></listitem>
	<listitem><para>Obtaining nonrepudiation using digital certificates</para></listitem>
	<listitem><para>Online orders and payments</para></listitem>
	<listitem><para>Email and messaging security such as S/MIME</para></listitem>
	</itemizedlist>
		
		<para>
A web application can implement cryptography at multiple layers: application, application server or runtime (such as .NET), operating system and hardware. Selecting an optimal approach requires a good understanding of application requirements, the areas of risk and the level of security strength it might require, flexibility, cost, etc.

</para>
		<para>
Although cryptography is not a panacea, the majority of security breaches do not come from brute force computation but from exploiting mistakes in implementation. The strength of a cryptographic system is measured in key length. But using a large key length and then storing the unprotected keys on the same server, eliminates most of the protection benefit gained. Besides the secure storage of keys, another classic mistake is engineering custom cryptographic algorithms (to generate random session id's for example). Many web applications were hacked because the developers thought they could create their crypto functions. Our recommendation is to proven products, tools or packages when it comes to crptography.

</para>
	</sect2>
</sect1>
