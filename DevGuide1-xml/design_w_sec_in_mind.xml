<!-- $Id: design_w_sec_in_mind.xml,v 1.2 2003/07/25 09:00:31 awiesmann Exp $ -->
<chapter>
	<chapterinfo>
                <authorgroup>
                        <author>
                                <firstname>Adrian</firstname>
                                <surname>Wiesmann</surname>
                        </author>
                </authorgroup>
        </chapterinfo>
<title>Designing with security in mind</title>

<sect1>
	<title>Secure design</title>
	
	<para>Just a few years ago, people protected their property mostly physically. This changes very fast, for many of our goods are in electronic form and we leave electronic marks on every place we virtually visit. There is some security measures to protect our property and privacy in these "new" days. But as Ross Anderson writes in his excellent book "Security Engineering" [Anderson01]: "[This new security technology is] nowhere near as good as it should be." So we are here, have the situation that our electronic marks are daily reality, but our protection lacks functionality.</para>
	
	<para>This is actually the place where this section starts. The next few pages want to give an overview over Security Design and with what technology, methods or frameworks the security design can be enhanced. While the whole Guide is about security in the web applications, this section is only about the first few steps in the creation of software. The design phase.</para>
	<para>The text is sometimes kept **general** for illustrational purposes. It is no intention to anger anyone or to **flame** somebody.</para>
	
</sect1>

<sect1>
	<title>Understanding the requirements</title>
	
	<para>Many software projects - at least a few years ago - were often kind of a programmers masturbation. Programmers coded something they thought the customers wants or needs. The only goal was to be as fast as possible to be able to get as much money out of the project as doable.</para>
	
	<para>Nowadays things begin to change on a broader scale. Suppliers need to know their customers needs or they will lose them. While this was no problem a few years ago, it definitely is now. Many processes and methods were defined which state how to do customer projects. It is a well known fact that the customer needs to be put into the whole process of the project. While this is good for the business, it is not good enoug, since the security is still missing quite often.</para>
	
	<para>Besides that problem there is also a broader use of networked services. Many applications in use nowadays use networks extensively and all those protocols and services are getting more complicated over time. This asks for a deeper knowledge of the used technology by the engineers using those.</para>
	
	<para>It is with the security as with the whole projects: customers must be asked how they are used to work, why they do their processes like they do them and what kind of workmethods they are used to. In a security specific view, it is also absolutely necessary, that customers have some kind of <bold>Corporate Security Guidelines</bold> where they recorded what they do allow and what is not allowed concerning software. These rules and behaviour must be known by the software architects before the planning can start.</para>
	
</sect1>

<sect1>
	<title>Corporate Security Guidelines</title>
	
	<para>Every firm and it's management should have some kind of Corporate Security Guidelines. These guidelines are for protecting the firm and its management in the case of a security problem, but also for developers and suppliers to know what this firm allows concerning security.</para>
	
</sect1>

<sect1>
	<title>Designing pitfalls</title>
	
	<para>There are several pitfalls a Software Architect can walk into while designing secure software.</para>
	
	<sect2>
		<title>Environment</title>
	
		<para>The best applications security is crap if the environment is unsecure. While this is widely known, many Software Architects leave backdoors with their design because they do not know the environment thoroughly. A simple example of such a behaviour in a project can be something like what happened within a project at a bigger customer once. The software architects idea was to have all the business logic and database access behind some firewalls in a separate subnet. He needed to tunnel through some networks and firewalls to come to the subnet where the webserver stood and on which he wanted to implement the web interface setting upon the just described business logic. While this is normal behaviour which can be found in many books, it left 2 serious problems: The system administrators administrating the subnets and firewalls were not that comfortable with knowing this developer is tunneling something through their defence mechanisms. It were "classical unix admins" with no idea what those DCOM technology or that ASP was all about. On the other hand the Software Architect hated it to ask the security personel for tunneling allowance, he had absolutely no idea what those defence mechanisms were all about and it was just a general annoyance.</para>
		<para>At the end there was an implemented Web Application which tunneled the Database requests through multiple defence layers more or less directly into the database. The System Administrators had no idea about what kind of data was tunneling and the Software Architect opened a huge hole in the clients defense mechanism with allowing some kind of SQL Injection in his application.</para>
	
	</sect2>

	<sect2>
		<title>Bought / used middleware</title>
	
		<para>Used middleware can be highly insecure. reference to snakeoil</para>
	
	</sect2>
	
	<sect2>
		<title>Communication</title>
	
		<para>"A communication interruption can only mean one thing: Invasion" :)</para>
	
	</sect2>
	
	<sect2>
		<title>Developers</title>
	
		<para>The best theoreticaly secure application is crap, if it is implemented badly. Developers need to be trained for security relevant considerations. Software Architects and Team Leaders should therefore work together to not only design an application secure but also train the developers coding that application for security specific themes.</para>
		<para>One such possibility of training can be a monthly code review in which the developers discuss their own code and look at common problems which arise in the current applications environment. This needs to be a constant process for the security specific themes are not so important for the normal developer. Generally developers try to solve the problem of getting the application running as fast as possible. Every further mechanisms is implemented afterwards - if there is still some time available in the project.</para>
	
	</sect2>
	
</sect1>

<sect1>
	<title>Designing for users</title>
	
	<para>Security is hated by user for it is keeping them away from their work. Find the best way in between convenience and security. Users write down their passwords if they are to long or complicated. So a design of an application should enforce security measurements according the respective Corporates Security Guidelines but it should be as transparent to the user as possible. Single sign on systems can be a good start for users, for they only need to log on once or twice a day and then (except they leave their workplace for coffee multiple times a day for multiple minutes :) ) do have access to all the systems they have to work on without further interruption of logon masks or similar.</para>
	<para>The Application Designer should always find the best way in between easy to use security systems and complicated ones which provoke the circumvention by users. Easier to be used systems (or shorter passwords) does not generally mean bader security, it all depends on the technology used and the current environment.</para>
	
</sect1>

<sect1>
	<title>Design Methods</title>
	
	<para>RUP?  Open Source Security Testing Methodology? MSF?</para>
	
</sect1>

</chapter>
