<!-- $Id: ch08.xml,v 1.3 2002/09/09 21:35:24 russcoon Exp $ -->
<chapter label="8">
<title>
Access Control and Authorization
</title>
<para>
Access control mechanisms are a necessary and crucial design element to any
application's security.  In general, a web application should protect front-end
and back-end data and system resources by implementing access control
restrictions on what users can do, which resources they have access to, and what
functions they are allowed to perform on the data.  Ideally, an access control
scheme should protect against the unauthorized viewing, modification, or copying
of data.  Additionally, access control mechanisms can also help limit malicious
code execution, or unauthorized actions through an attacker exploiting
infrastructure dependencies (DNS server, ACE server, etc.).
</para>
<para>
Authorization and Access Control are terms often mistakenly interchanged.
Authorization is the act of checking to see if a user has the proper permission
to access a particular file or perform a particular action, assuming that user
has successfully authenticated himself.  Authorization is very much credential
focused and dependent on specific rules and access control lists preset by the
web application administrator(s) or data owners.  Typical authorization checks
involve querying for membership in a particular user group, possession of a
particular clearance, or looking for that user on a resource's approved access
control list, akin to a bouncer at an exclusive nightclub.  Any access control
mechanism is clearly dependent on effective and forge-resistant authentication
controls used for authorization.
</para>
<para>
Access Control refers to the much more general way of controlling access to web
resources, including restrictions based on things like the time of day, the IP
address of the HTTP client browser, the domain of the HTTP client browser, the
type of encryption the HTTP client can support, number of times the user has
authenticated that day, the possession of any number of types of
hardware/software tokens, or any other derived variables that can be extracted
or calculated easily.
</para>
<para>
Before choosing the access control mechanisms specific to your web application,
several preparatory steps can help expedite and clarify the design process;
</para>
<orderedlist numeration="arabic" spacing="compact">
	<listitem>
		<para>
		Try to quantify the relative value of information to be
		protected in terms of Confidentiality, Sensitivity,
		Classification, Privacy, and Integrity related to the
		organization as well as the individual users.  Consider the
		worst case financial loss that unauthorized disclosure,
		modification, or denial of service of the information could
		cause. Designing elaborate and inconvenient access controls
		around unclassified or non-sensitive data can be
		counterproductive to the ultimate goal or purpose of the web
		application.
		</para>
	</listitem>
	<listitem>
		<para>
		Determine the relative interaction that data owners and creators
		will have within the web application.  Some applications may
		restrict any and all creation or ownership of data to anyone but
		the administrative or built-in system users.  Are specific roles
		required to further codify the interactions between different
		types of users and administrators?
		</para>
	</listitem>
	<listitem>
		<para>
		Specify the process for granting and revoking user access
		control rights on the system, whether it be a manual process,
		automatic upon registration or account creation, or through an
		administrative front-end tool.
		</para>
	</listitem>
	<listitem>
		<para>
		Clearly delineate the types of role driven functions the
		application will support.  Try to determine which specific user
		functions should be built into the web application (logging in,
		viewing their information, modifying their information, sending
		a help request, etc.) as well as administrative functions
		(changing passwords, viewing any users data, performing
		maintenance on the application, viewing transaction logs, etc.).
		</para>
	</listitem>
	<listitem>
		<para>
		Try to align your access control mechanisms as closely as
		possible to your organization's security policy.  Many things
		from the policy can map very well over to the implementation
		side of access control (acceptable time of day of certain data
		access, types of users allowed to see certain data or perform
		certain tasks, etc.).  These types of mappings usually work the
		best with Role Based Access Control.
		</para>
	</listitem>
</orderedlist>
<para>
There are a plethora of accepted access control models in the information
security realm.  Many of these contain aspects that translate very well into the
web application space, while others do not.  A successful access control
protection mechanism will likely combine aspects of each of the following models
and should be applied not only to user management, but code and application
integration of certain functions.
</para>
<sect1>
	<title>
	Discretionary Access Control
	</title>
	<para>
	Discretionary Access Control (DAC) is a means of restricting access to
	information based on the identity of users and/or membership in certain
	groups.  Access decisions are typically based on the authorizations
	granted to a user based on the credentials he presented at the time of
	authentication (user name, password, hardware/software token, etc.).  In
	most typical DAC models, the owner of information or any resource is
	able to change its permissions at his discretion (thus the name).  DAC
	has the drawback of the administrators not being able to centrally
	manage these permissions on files/information stored on the web server.
	A DAC access control model often exhibits one or more of the following
	attributes.
	</para>
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Data Owners can transfer ownership of information to
			other users
			</para>
		</listitem>
		<listitem>
			<para>
			Data Owners can determine the type of access given to
			other users (read, write, copy, etc.)
			</para>
		</listitem>
		<listitem>
			<para>
			Repetitive authorization failures to access the same
			resource or object generates an alarm and/or restricts
			the user's access
			</para>
		</listitem>
		<listitem>
			<para>
			Special add-on or plug-in software required to apply to
			an HTTP client to prevent indiscriminant copying by users
			("cutting and pasting" of information)
			</para>
		</listitem>
		<listitem>
			<para>
			Users who do not have access to information should not
			be able to determine its characteristics (file size,
			file name, directory path, etc.)
			</para>
		</listitem>
		<listitem>
			<para>
			Access to information is determined based on
			authorizations to access control lists based on user
			identifier and group membership.
			</para>
		</listitem>
	</itemizedlist>
</sect1>
<sect1>
	<title>
	Mandatory Access Control
	</title>
	<para>
	Mandatory Access Control (MAC) ensures that the enforcement of
	organizational security policy does not rely on voluntary web
	application user compliance.  MAC secures information by assigning
	sensitivity labels on information and comparing this to the level of
	sensitivity a user is operating at.  In general, MAC access control
	mechanisms are more secure than DAC yet have trade offs in performance
	and convenience to users.  MAC mechanisms assign a security level to all
	information, assign a security clearance to each user, and ensure that
	all users only have access to that data for which they have a clearance.
	MAC is usually appropriate for extremely secure systems including
	multilevel secure military applications or mission critical data
	applications.  A MAC access control model often exhibits one or more of
	the following attributes.
	</para>
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Only administrators, not data owners, make changes to a
			resource's security label.
			</para>
		</listitem>
		<listitem>
			<para>
			All data is assigned security level that reflects its
			relative sensitivity, confidentiality, and protection
			value.
			</para>
		</listitem>
		<listitem>
			<para>
			All users can read from a lower classification than the
			one they are granted (A "secret" user can read an
			unclassified document).
			</para>
		</listitem>
		<listitem>
			<para>
			All users can write to a higher classification (A
			"secret" user can post information to a Top Secret
			resource).
			</para>
		</listitem>
		<listitem>
			<para>
			All users are given read/write access to objects only of
			the same classification (a "secret" user can only
			read/write to a secret document).
			</para>
		</listitem>
		<listitem>
			<para>
			Access is authorized or restricted to objects based on
			the time of day depending on the labeling on the
			resource and the user's credentials (driven by policy).
			</para>
		</listitem>
		<listitem>
			<para>
			Access is authorized or restricted to objects based on
			the security characteristics of the HTTP client (e.g.
			SSL bit length, version information, originating IP
			address or domain,  etc.)
			</para>
		</listitem>
	</itemizedlist>
</sect1>
<sect1>
	<title>
	Role Based Access Control
	</title>
	<para>
	In Role-Based Access Control (RBAC), access decisions are based on an
	individual's roles and responsibilities within the organization or user
	base.  The process of defining roles is usually based on analyzing the
	fundamental goals and structure of an organization and is usually linked
	to the security policy. For instance, in a medical organization, the
	different roles of users may include those such as doctor, nurse,
	attendant, nurse, patients, etc.  Obviously, these members require
	different levels of access in order to perform their functions, but also
	the types of web transactions and their allowed context vary greatly
	depending on the security policy and any relevant regulations (HIPAA,
	Gramm-Leach-Bliley, etc.).
	</para>
	<para>
	An RBAC access control framework should provide web application security
	administrators with the ability to determine who can perform what
	actions, when, from where, in what order, and in some cases under what
	relational circumstances. http://csrc.nist.gov/rbac/ provides some great
	resources for RBAC implementation. The following aspects exhibit RBAC
	attributes to an access control model.
	</para>
	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Roles are assigned based on organizational structure
			with emphasis on the organizational security policy
			</para>
		</listitem>
		<listitem>
			<para>
			Roles are assigned by the administrator based on
			relative relationships within the organization or user
			base.  For instance, a manager would have certain
			authorized transactions over his employees.  An
			administrator would have certain authorized transactions
			over his specific realm of duties (backup, account
			creation, etc.)
			</para>
		</listitem>
		<listitem>
			<para>
			Each role is designated a profile that includes all
			authorized commands, transactions, and allowable
			information access.
			</para>
		</listitem>
		<listitem>
			<para>
			Roles are granted permissions based on the principle of
			least privilege.
			</para>
		</listitem>
		<listitem>
			<para>
			Roles are determined with a separation of duties in mind
			so that a developer Role should not overlap a QA tester
			Role.
			</para>
		</listitem>
		<listitem>
			<para>
			Roles are activated statically and dynamically as
			appropriate to certain relational triggers (help desk
			queue, security alert, initiation of a new project,
			etc.)
			</para>
		</listitem>
		<listitem>
			<para>
			Roles can be only be transferred or delegated using
			strict sign-offs and procedures.
			</para>
		</listitem>
		<listitem>
			<para>
			Roles are managed centrally by a security administrator
			or project leader.
			</para>
		</listitem>
	</itemizedlist>
</sect1>
</chapter>










