<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<chapter label="17"><chapterinfo><authorgroup><author><firstname>Andrew</firstname><surname>van der Stock</surname><email>ajv.owasp@greebo.net</email></author></authorgroup></chapterinfo><title>.NET Passport</title><sect1><title>What is .NET Passport</title><para>.NET Passport is a mechanism to authenticate users to your application, within certain limitations. Passport:<itemizedlist mark="opencircle" spacing="compact"><listitem><para>only provides outsourced authentication services</para></listitem><listitem><para>is typically used by websites who wish to personalize their web site experience</para></listitem><listitem><para>does not provide any authorization framework</para></listitem><listitem><para>does not allow you to manage the user creation process</para></listitem><listitem><para>does not give you access to accurate user information which could be relied upon in a legal sense</para></listitem></itemizedlist></para><para>So why use .NET Passport? Read on – it makes more sense if you work to its limitations, rather than its negatives.</para></sect1><sect1><title>Passport – how it works</title><para>Effectively, Passport outsources user creation and authentication to Microsoft. There are various reasons why you’d want to do this, but the main one is to leverage the millions of pre-registered Passport users. </para><para>There are several stages to developing a Passport web site:</para><itemizedlist mark="opencircle" spacing="compact"><listitem><para>Register your development site with Microsoft to obtain a preproduction (PREP) Passport and Site ID</para></listitem><listitem><para>Develop your site to Passport’s standards</para></listitem><listitem><para>Run through the Passport compliance review with Microsoft, and fix your site until it passes</para></listitem><listitem><para>Pay license fees for Passport use</para></listitem><listitem><para>Go live</para></listitem><listitem><para>Maintain the site</para></listitem></itemizedlist><para>Although the .NET Passport SDK and development of your PREP site is free, using .NET Passport is not free. For more details on licensing and compliance requirements, please review the .NET Passport SGK.</para><sect1><title>Data structures</title><para>On the client’s computer, a cookie is created by their browser when they sign into their first Passport site. The cookie can contain up to five data sections. The passport data structures are private to passport.com and cannot be directly read by your application. </para><itemizedlist mark="opencircle" spacing="compact"><listitem><para>Profile – contains core profile attributes encrypted with the Passport’s key</para></listitem><listitem><para>Secure – when your site uses SSL based Passport login, this option is set to provide certainty to the Passport service that SSL was indeed used</para></listitem><listitem><para>Ticket – contains an encrypted ticket which Passport uses to determine the user’s signed in status. </para></listitem><listitem><para>Ticket Granting – used in SSL-based silent single sign in</para></listitem><listitem><para>Sign Out – a list of sites which must be signed out of when the user clicks “Sign Out”</para></listitem></itemizedlist><para>As these are opaque structures, discussion here will be limited. For more details see the Passport SGK</para><para>Through the Passport API, you can obtain various data structures pertaining to each user, but the main ones are:</para><itemizedlist mark="opencircle" spacing="compact"><listitem><para>PassportIdentity - PUID – the Passport User ID. This contains a 64 bit number which uniquely identifies each authenticated Passport user. You use it as a key into your personalization and authorization functionality.</para></listitem><listitem><para>Core Profile – the core (e-mail address and PUID) and optional information (name, country, nickname, etc) a user voluntarily supplies to Passport</para></listitem><listitem><para></para></listitem><listitem><para></para></listitem><listitem><para></para></listitem><listitem><para></para></listitem></itemizedlist><para>For more details see the Passport SGK</para></sect1></sect1><sect1><title>Authentication</title><para>Passport’s raison d’être is authentication. </para><para>The usual method of performing .NET Passport authentication in non-Passport aware languages, like ASP or PHP is to query the Passport manager if the current user is authenticated. If not, redirect them to a sign in page. </para><para></para></sect1><sect1><title>Authorization</title><para></para><para></para><para></para></sect1><sect1><title>Access control</title><para></para><para></para><para></para></sect1><sect1><title>Privacy</title><para></para><para></para><para></para></sect1><sect1><title>Gat</title><para></para><para></para><para></para></sect1></chapter>