<!-- $Id: data_validation.xml,v 1.7 2003/03/17 06:01:54 gene_mckenna Exp $ -->
<appendix id="ValidationSource">
   <appendixinfo>
     <authorgroup>
       <author><firstname>Gene</firstname><surname>McKenna</surname>
       </author>
     </authorgroup>
   </appendixinfo>
	<title>Appendix B - Data Validation Source Samples</title>
	<sect1>
		<title>CGI Input Data Validation - Rejection of Known Bad Data</title>
		<para>
	As mentioned in Chapter 11, a well designed system should
	validate all user input data. If all requests come in to a
	central location and leave from a central location then the
	problem is easier to solve with a common component.
	</para>
		<para>
	The following code samples show a simple component for data
	validation for J2EE servlets and another for Perl CGI scripts.
	In both cases, the samples test the user input to see if it
	matches a certain regular expression. The regular expression
	defines any HTML tag and if it is matched, the input is
	considered invalid. Other regular expressions, can, of course,
	be used to meet one's needs.
	</para>
		<para>
	The samples are not intended to serve as production code ready
	to meet any specific data validation need. Different
	applications will have different data validation needs and no
	one component could work in all situations. Rather these
	samples are code "snippets" that demonstrate the basic
	concept.
	</para>
		<sect2>
			<title>J2EE - Input Validation With Servlets</title>
			<para></para>
			<programlisting>


import java.util.* ;
import javax.servlet.* ;
import javax.servlet.http.* ;
import javax.servlet.jsp.* ;
import org.apache.oro.text.regex.* ; // regular expression package
import org.apache.oro.text.* ;       // used for matching input data

/**
 * This servlet will match all user input for GET and POST 
 * requests and sanitize the input by converting &lt; and &gt;
 * to &amp;lt; and &amp;gt; respectively.
 * 
 * This sample program relies on the ORO regular expression package
 * version 2.0.4 from the Apache group. http://jakarta.apache.org
 */
public class ValidationServlet
     extends HttpServlet
{
  private static Perl5Compiler       sCompiler ;         // a pattern compiler
  private static PatternCacheLRU     sCachedPatterns ;
  private static final Perl5Matcher  sMatcher = new Perl5Matcher() ;

  /**
   * Things in here will only happen once for each instance of
   * the servlet.
   */
  public void init( ServletConfig config )
       throws ServletException
  {
    super.init( config ) ;

    // Create Perl5Compiler and Perl5Matcher instances.
    sCompiler = new Perl5Compiler() ;
    sCachedPatterns = new PatternCacheLRU( 20, sCompiler ) ;
  }
  
  /**
   * Method to handle requests of type POST. Check the length
   * and forward to the doGet method.
   */
  public void doPost( HttpServletRequest  request,
                      HttpServletResponse response )
       throws java.io.IOException, ServletException
  {
    // check the length of the post to make sure it isn't too big
    int length    = request.getContentLength() ;
    if ( length &gt; 1024 ) // &gt; 1024 bytes is considered too big
    {
      try { response.getOutputStream().println( "POST exceeds 1024 bytes - not accepted." ) ; }
      catch( java.io.IOException ioe ) { ; }
      return ;
    }  
    else // everything is fine, forward request to the doGet method
    {
      doGet( request, response ) ;
    }
  }

  /**
   * Method to handle requests of type GET
   */
  public void doGet( HttpServletRequest  request,
                     HttpServletResponse response )
       throws java.io.IOException, ServletException
  {
    // validate input data before processing
    HashMap validatedParams = validateInput( request ) ; 

    // Do whatever it is this servlet is supposed to do
    // but instead of getting parameters from "request" 
    // get them from validatedParams.
    try { response.getOutputStream().println( "Hello World" ) ; }
    catch( java.io.IOException ioe ) { ; }

    return ;
  }
	  

  /**
   * Iterates through all the input variables and ensures
   * that their values meet validation requirements by
   * calling the validateString method on each value.
   */
  public HashMap validateInput( HttpServletRequest request )
  {
    HashMap validatedParams = new HashMap() ;

    // Loop through all variables in the request and validate their values
    for ( Enumeration e = request.getParameterNames() ; e.hasMoreElements() ; )
    { 
      // get the name of the first input variable 
      String   name = (String) e.nextElement() ;
      // each variable can have zero or more values
      String[] vals = request.getParameterValues( name ) ;
      if ( vals != null )
      {
        StringBuffer sb = new StringBuffer() ;
        for ( int i = 0 ; i &lt; vals.length ; i++ )
          sb.append( vals[i] + "\n" ) ;

        // validate the string
        validatedParams.put( name, validateString( sb.toString() ) ) ;
      }
    }

    return validatedParams ;
  }

  /**
   * Validate parameter. Validate all input parameters.
   * This methods calls "substitute" twice to replace &lt; and &gt;
   * with the proper URL encoding &amp;lt; &amp;gt;  Other
   * validation and sanitization such as length checking,
   * data typing, etc. could be performed as well.
   */
  public String validateString( String s0 )
  {
    try
    {
      String s1 = substitute( s0, "(&gt;)", "&gt;" ) ;
      String s2 = substitute( s1, "(&lt;)", "&lt;" ) ;
      return s2 ;
    }
    catch( MalformedPatternException e )
    {
      System.out.println( e ) ;
      return null ;
    }
  }
  
  /**
   * Use the Perl5Substitution class to replace  &lt; and &gt;
   * with the proper URL encoding &amp;lt; &amp;gt;
   */
  public String substitute( String inputString, 
                            String patternString, 
                            String substitutionString )
       throws MalformedPatternException
  {
    Perl5Substitution substitution = 
      new Perl5Substitution( substitutionString, Perl5Substitution.INTERPOLATE_ALL ) ;
    Pattern pattern = (Perl5Pattern) 
      sCachedPatterns.addPattern( patternString, Perl5Compiler.DEFAULT_MASK  ) ; 
		
    return org.apache.oro.text.regex.Util.substitute( sMatcher, pattern, substitution, 
                                                      inputString, 
                                                      org.apache.oro.text.regex.Util.SUBSTITUTE_ALL ) ;
  }  
}
		</programlisting>
		</sect2>
		<sect2>
			<title>Perl - Input Validation For CGI Scripts</title>
			<para>
		Perl scripts are not necessarily as standardized as their J2EE
		servlet counterparts. Nonetheless, most Perl CGI scripts have
		a subroutine that is used to place the submitted CGI data 
		into an associative array (similar to hashtable). 
		</para>
			<para>
		In the example below, the method &amp;parseCGI which is not included
		is assumed to return the name/value pairs submitted with
		the request (whether it is a GET or POST request) as the
		associative array, %input. The subroutine validateData will substitute
                &lt; and &gt; with &amp;lt; and &amp;gt; respectively.
		</para>
		<programlisting>

#!/usr/bin/perl
use strict ;

my %input = &amp;parseCGI ; 
&amp;validateInput() ;

print "Content-type: text/html\n\n" ;
print "Hello world\n" ;

exit 1 ;

sub validateInput
{
  my $key ;
  my $value ;
  foreach $key (keys %input)
  {
    $input{ $key } =~ s/&lt;/&amp;&lt;/g ;
    $input{ $key } =~ s/&gt;/&amp;&gt;/g ;
  }
}
		</programlisting>
		</sect2>
	</sect1>
</appendix>
