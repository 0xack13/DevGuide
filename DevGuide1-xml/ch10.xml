<!-- $Id: ch10.xml,v 1.8 2003/01/29 06:43:34 mcurphey Exp $ -->
<chapter label="10">
   <chapterinfo>
     <authorgroup>
       <author><firstname>Mark</firstname><surname>Curphey</surname></author>
       <author><firstname>Gene</firstname><surname>McKenna</surname>
       </author>
     </authorgroup>
   </chapterinfo>
	<title>
Data Validation
</title>

<para>
Most of the common attacks on systems (whose descriptions follow this section)
can be prevented, or the threat of their occurring can be significantly
reduced, by appropriate data validation. Data validation is one of the most
important aspects of designing a secure web application. When we refer to data
validation we are referring to both input to and output from a web application.
</para>

	<sect1>
	<title>
	Validation Strategies
	</title>

	<para>
	Data validation strategies are often heavily influenced by the
	architecture for the application. If the application is already in
	production it will be significantly harder to build the optimal
	architecture than if the application is still in a design stage. If a
	system takes a typical architectural approach of providing common
	services then one common component can filter all input and output,
	thus optimizing the rules and minimizing efforts.
	</para>

	<para>
	There are three main models to think about when designing a data
	validation strategy.
	</para>

		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
			<para>
			Accept Only Known Valid Data
			</para>
			</listitem>

			<listitem>
			<para>
			Reject Known Bad Data
			</para>
			</listitem>

			<listitem>
			<para>
			Sanitize Bad Data
			</para>
			</listitem>
		</itemizedlist>

	<para>
	We cannot emphasize strongly enough that "Accept Only Known Valid Data"
	is the best strategy. We do, however, recognize that this isn't always
	feasible for political, financial or technical reasons, and so we
	describe the other strategies as well.
	</para>

	<para>
	All three methods must check:
	</para>

		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
			<para>
			Data Type
			</para>
			</listitem>

			<listitem>
			<para>
			Syntax
			</para>
			</listitem>

			<listitem>
			<para>
			Length
			</para>
			</listitem>
		</itemizedlist>

	<para>
	Data type checking is extremely important. The application should check
	to ensure a string is being submitted and not an object, for instance.
	</para>

		<sect2>
		<title>
		Accept Only Known Valid Data
		</title>

		<para>
		As we mentioned, this is the preferred way to validate data.
		Applications should accept only input that is known to be safe
		and expected. As an example, let's assume a password reset
		system takes in usernames as input. Valid usernames would be
		defined as ASCII A-Z and 0-9. The application should check
		that the input is of type string, is comprised of A-Z and 0-9
		(performing canonicalization checks as appropriate) and is of
		a valid length.
		</para>
		</sect2>

		<sect2>
		<title>
		Reject Known Bad Data
		</title>

		<para>
		The rejecting bad data strategy relies on the application
		knowing about specific malicious payloads. While it is true that
		this strategy can limit exposure, it is very difficult for any
		application to maintain an up-to-date database of web
		application attack signatures.
		</para>
		</sect2>

		<sect2>
		<title>
		Sanitize All Data
		</title>

		<para>
		Attempting to make bad data harmless is certainly an effective
		second line of defense, especially when dealing with rejecting
		bad input. However, as described in the canonicalization section
		of this document, the task is extremely hard and should not be
		relied upon as a primary defense technique.
		</para>
		</sect2>
	</sect1>

	<sect1>
	<title>
	Never Rely on Client-Side Data Validation
	</title>

	<para>
	Client-side validation can always be be bypassed. All data validation
	must be done on the trusted server or under control of the application.
	With any client-side processing an attacker can simply watch the return
	value and modify it at will. This seems surprisingly obvious, yet many
	sites still validate users, including login, using only client-side
	code such as JavaScript. Data validation on the client side, for
	purposes of ease of use or user friendliness, is acceptable, but should
	not be considered a true validation process. All validation should be
	on the server side, even if it is redundant to cursory validation
	performed on the client side.
	</para>
	</sect1>
</chapter>
