<!-- $Id: language_specifics.xml,v 1.13 2003/04/03 13:55:59 awiesmann Exp $ -->
<chapter id="ch14">
	<chapterinfo>
		<authorgroup>
			<author>
				<firstname>Christopher</firstname>
				<surname>Todd</surname>
			</author>
		</authorgroup>
	</chapterinfo>
	<title>Language-specific guidelines</title>
	<para>The chapters you've read up to now have dealt largely with the issues of 
	web application security at an abstract or conceptual level.  While they do a
	good job of presenting web developers with an outline of the concepts necessary
	to write secure web applications, they provide little along the lines of
	specific guidance or examples of how to accomplish these tasks in the most
	common web application development languages.
	</para>
	<para>This chapter will provide you with some of the language-specific tools and
	techniques you'll need to begin developing secure web applications.  Each of the
	following sections focuses on a particular web development language or platform,
	and discusses some of the language-specific security capabilities inherent to
	that language or platform.  In many cases, specific code examples or
	configuration examples are provided.  Any security "gotchas" that may be
	inherent to the language or platform are discussed, and solutions to those
	problems and challenges are described.
	</para>
	<sect1>
		<sect1info>
			<author>
				<firstname>Christopher</firstname>
				<surname>Todd</surname>
			</author>
		</sect1info>
		<title>Java</title>
		<para>Among the languages that are widely used to create web applications, 
		Java is one of the most secure.  It does not suffer from the buffer overflows of 
		C and C++, and while it does contain methods for executing external programs
		(similar to eval() and exec() in Perl and PHP), it is extremely rare for Java developers 
		to use them.  Web applications written in Java will utilize (at a minimum) the Servlet
		API's and a servlet container, and possibly also Java Server Pages (JSP), which
		are similar in structure and function to Active Server Pages or PHP.  Java web
		developers may also use Enterprise Java Beans (which requires the use of an EJB
		container).  Servlet and EJB containers provide many security functions that simplify 
		the task of developing secure web applications.  Finally, the standard Java language
		API's include numerous classes and packages that assist web application 	developers 
		in creating secure web applications.
		</para>
		<para>In this section, we will highlight each of the key components of web 
		application security as discussed in earlier sections of this guide, and explain 
		how the Java language API's or the services provided by servlet and EJB containers 
		can be used to address those issues.			
		</para>
		<sect2>
			<title>Authentication, Access control, and Authorization</title>
			<para>The Java Authentication and Authorization Service 
			<ulink url="http://java.sun.com/products/jaas/">(JAAS)</ulink> set of APIs provides
			a means to authenticate and authorize users against a variety of authentication databases.
			It implements the Pluggable Authentication Module (PAM) interface in Java, allowing Java 
			applications to use the operating system-specific user databases provided on Solaris and
			Linux.  Its pluggable architecture means Java applications can use virtually any of the
			most popular user authentication databases and protocols for authentication and 
			authorization.
			</para>
			<para>If you are able to use a servlet container that is compatible with version 2.3 of
			the Java Servlet Specification, then you have another powerful tool for performing
			authentication and authorization in your web applications: Filters.  The javax.servlet.Filter
			class differs from a servlet in that it is not intended to process a request and return a
			result to the browser.  Filters are designed to process a request (or a response), possibly
			modify the request, and then forward the request to the appropriate servlet or JSP page.
			As a result, Filters are excellent candidates for acting as the Controller in the Model-View-Controller
			design pattern (see chapter 17).<!--  NOTE:  I need to insert a real cross-reference here-->
			Such Filters can act as gate-keepers to your application by checking whether a request is part
			of an already established user session, and if so, whether the authenticated user is authorized
			to access the resource being requested.  If a request is not part of an already established session,
			then the Filter can return the login page ot the browser.
			</para>
			<para>The Java Servlet Specification provides mechanisms for protecting access to particular sets
			of URIs within your web application.  This access can be declarative (that is, described in the
			web application deployment descriptor), or programmatic (that is, you can code it into your servlets
			and JSP pages).  In general, for complex applications with large user bases, declarative security is 
			more manageable, but it is often the case that fine-grained access control is best done using the
			programmatic approach.  For more details, see the Servlet Specification at 
			<ulink url="http://java.sun.com">java.sun.com</ulink>.
			</para>
		</sect2>
		<sect2>
			<title>User sessions</title>
			<para>One of the most convenient features of the Java servlet specification
			is the built-in support for managing user sessions.  In fact, session management is
			almost entirely handled by the servlet container; all the developer has to do is create
			a session at an appropriate place in the application "flow", and the servlet container
			will generate the session ID and place it in a cookie or in the URL, depending on
			whether the developer wants to require the use of cookies.  The servlet API provides
			relatively simple means for encoding the session ID in the URL for those browsers
			that do not support cookies, or when users have disabled cookies.</para>
		</sect2>
		<sect2>
			<title>Data validation</title>
			<para>Java does not provide any built-in cohesive API's for performing data validation.
			However, there are several third-party libraries available to assist Java developers in
			this crucial task.  For example:</para>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>The <ulink url="http://www.owasp.org/filters/">OWASP Filters</ulink> 
					project is in the process of developing input filtering libraries geared towards 
					the security needs of web applications.  These libraries eventually will be 
					provided for several web development languages.</para>
				</listitem>
				<listitem>
					<para>The <ulink url="http://jakarta.apache.org/commons/validator/index.html">
					Jakarta Validator</ulink> package originally was developed for use with the 
					Jakarta Struts platform, but has been found to be so generally useful that it 
					has become its own project under the jakarta banner.  It provides a library 
					with generic data validation routines, but is extensible so developers can 
					write Validators to meet	their specific needs.</para>
				</listitem>
				<listitem>
					<para>Regular Expressions can be used to create home-grown data validation
					routines.  A regular expressions package is built in to the JDK 1.4, but several
					third-party packages are available for doing regular expressions in Java:  
					the Jakarta <ulink url="http://jakarta.apache.org/oro/">ORO</ulink> and 
					<ulink url="http://jakarta.apache.org/regexp/">regexp</ulink> packages and the 
					<ulink url="http://www.cacas.org/java/gnu/regexp/">gnu.regexp</ulink> package.
					These packages can be used to construct your own filters for user input, though
					they will require developers to learn the voodoo of regular expressions, and 
					effective use of regular expressions to mitigate the most common user input-related
					security problems found in web applications will require developers to be very familiar
					with most of the concepts discussed in this guide.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Event logging</title>
			<para>Java web applications have several options for logging important application events.
			Servlets and JSP pages can write to the servlet container's log file or create and use log files
			of their own.  If you decide you use application-specific log files (instead of the servlet
			container's log files), you have several options.  You can simply use the standard I/O 
			libraries, or you can use a third-party logging package such as 
			<ulink url="http://jakarta.apache.org/log4j/">log4j</ulink>, or if you are running the JDK 1.4,
			you can use the new 
			<ulink url="http://java.sun.com/j2se/1.4.1/docs/api/java/util/logging/package-summary.html">
			java.util.logging.*</ulink> package.  Regardless of the mechanism used, for logging to be
			effective, the entire development team must know how to use these API's, and must be
			committed to using them throughout the application.</para>
			<!-- TODO:  It would be nice to include example code for each of these logging options.
				Maybe in version 2.1 of the guide. -->
		</sect2>
		<sect2>
			<title>Privacy considerations</title>
			<!-- TODO: Make the reference to chapter 12 just below an actual cross-reference, so it won't break
				when we move stuff around
			 -->
			<para>The web application privacy concerns described in Chapter 12 can all be addressed
			easily using Java, though this requires a little effort on the developer's part.  For example:</para>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>The Servlet API provides methods for setting HTTP headers and META 
					tags to provide Privacy-enhanced login.</para>
				</listitem>
				<listitem>
					<para>Regular expressions can be used to mask sensitive information (e.g.
					representing a credit card number as ****6789).</para>
				</listitem>
				<listitem>
					<para>The servlet container can be configured to force the use of SSL in order
					to access a particular HTML page, servlet, of JSP page, or set of URLs.</para>
				</listitem>
				<listitem>
					<para>The servlet container can be configured to use relatively short session
					timeout values to minimize the possibility of session hijacking.</para>
				</listitem>
				<listitem>
					<para>Java's cryptography libraries can be used to encrypt any and all sensitive
					data for storage.</para>
				</listitem>
				<listitem>
					<para>It is trivial to make all forms use POST rather than GET.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Cryptography</title>
			<para>Java provides a rich set of API's for performing various cryptographic functions.
			The approach taken by the Java platform is that of "cryptographic providers", which are
			plug-and-play implementations of the Java crypto API's.  This approach provides flexibility
			to developers, who can choose their crypto providers based on feature set, efficiency,
			support for particular algorithms, or algorithm strength.</para>
			<para>The topic of cryptography, and the full-featured API's provided by Java for doing
			cryptography, are subjects too broad to be given justice here.  We recommend the 
			following references:
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>
						<xref linkend="Oaks01"/>
					</para>
				</listitem>
				<listitem>
					<para>
						<xref linkend="Knudsen98"/>
					</para>
				</listitem>
				<listitem>
					<para>
						<xref linkend="SunJCE03"/>
					</para>
				</listitem>
			</itemizedlist>
			<!-- TODO:  I need to figure out how to cross-reference the bibliographic entires for these references. -->
			<para>While a full discussion of the Java API's for cryptography is beyond the scope 
			of this paper, there are a few portions of the API's that are most likely to be helpful, 
			and a few "gotchas" that Java web developers should be familiar with:</para>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>If you need to generate pseudo-random numbers (e.g. for user IDs, account 
					numbers, etc.), use java.security.SecureRandom rather than java.util.Random 
					(or Math.random()).  The former uses a cryptographically strong pseudo-random 
					number generator (PRNG), while java.util.Random and Math.random() use the 
					current system time (in milliseconds) as a seed by default (though developers 
					can use their own seed using a different constructor), and the algorithm used 
					guarantees that two instances of Random created with the same seed are 
					guaranteed to produce the same sequence of numbers.  Thus, an attacker that 
					can make an educated guess about the time the instance of Random was created
					can greatly reduce the size of the pool of possible numbers.
					</para>
				</listitem>
				<listitem>
					<para>Prior to the JDK 1.4, most of the cryptography related packages were 
					distributed separately from the main JDK.  This often causes confusion among
					developers new to Java cryptography.  The latest JDK (1.4) includes most
					of the Java cryptographic APIs by default, although you may have to download
					a separate policy to enable support for strong encryption (longer key lengths).
					</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>JSPs vs. Servlets, source code disclosure, and templating systems</title>
			<para>Among the server-side scripting languages, such as PHP, ASP, and JSP, in which 
			web application code is written in script files that are interpreted by the web application 
			server or container rather than being executed from compiled code, there exists a risk 
			that the source code for a given page will be displayed to the user.  This most often 
			occurs when there is a bug or misconfiguration of the web application server, and 
			instead of parsing the script page and executing the code, the web application server 
			presents that un-parsed page as if it were a static HTML page.</para>
			<para>There are several ways web application developers can mitigate this risk for 
			Java based web applications.  First, and most obvious, is to create the web application 
			using only servlets and not JSPs.  This has several disadvantages not related to security
			which will be obvious to any experienced servlet or JSP developer, not the least of which
			is that HTML page designers will have to work with servlets, and place their work inside
			out.println() statements.  This approach does, however, completely eliminate the possibility
			of disclosing the source code of your web application.</para>
			<para>A second mechanism for avoiding JSP disclosure vulnerabilities is to use one of 
			the available "templating" systems, such as 
			<ulink url="http://jakarta.apache.org/velocity/">Velocity</ulink>, 
			<ulink url="http://www.webmacro.org">WebMacro</ulink>, 
			<ulink url="http://www.freemarker.org">Freemarker</ulink>, and others.  The basic 
			approach taken by these templating engines is to use a servlet to parse the template code,
			thus relieving the servlet container of the task.  While this might seem to simply push the
			problem from the servlet container to the parsing servlet itself, in most cases, it is nearly
			impossible to obtain the source of the template file, and even if it were possible, the 
			separation between application code and display code provided by these templating
			systems means that any template pages that are disclosed will contain less information
			that could be useful to an attacker.</para>
			<para>A third alternative would be to use a JSP compiler to pre-compile all of your JSP
			pages, then only deploy the compiled JSPs to your production (and even development 
			and testing) platforms.  This is probably the simplest alternative, as it provides all the 
			advantages of using JSP without the possibility of source code disclosure.</para>
		</sect2>
		<sect2>
			<title>Issues not directly addressed by the Java language</title>
			<subtitle>Or, stuff you still gotta do.</subtitle>
			<para>A number of the issues discussed so far in this guide are not directly addressed 
			by Java language security, and must be addressed using other means.  They include: </para>
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>Keeping up to date with vendor patches.  No development language can
					help web server administrators do this.</para>
				</listitem>
				<listitem>
					<para>Eliminating backup files from the web root.  You can, however, mitigate 
					this issue somewhat by explicitly mapping requests (in web.xml) to particular 
					JSP pages or servlets, and provide a default mapping that captures all other 
					requests.</para>
				</listitem>
				<listitem>
					<para>Default accounts.  Consult your servlet container documentation to 
					determine if there are default accounts for administration applications.</para>
				</listitem>
				<listitem>
					<para>Comments in HTML code.  If you are using servlets, simply do not
					include comments in out.println() statements.  If you are using JSP pages, 
					place comments inside scriptlets, as these will be removed when the JSP 
					is compiled.</para>
				</listitem>
				<listitem>
					<para>Secure system configurations and server hardening.</para>
				</listitem>
				<listitem>
					<para>Modifiable debug settings.  If your web application uses custom-written 
					debugging routines that return output to the user, you will have to ensure that
					there is no way for a user to turn such output on or off via an HTTP request.</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Issues unique to Java</title>
			<subtitle>Or, security precautions for the truly paranoid</subtitle>
			<para>While the Java language is not vulnerable to many of the security-related
			problems that have plagued other programming languages (e.g. buffer overflows
			and format string vulnerabilities), there are several aspects of the Java language
			that developers must understand in order to write truly secure code.  While some
			of the recommendations below are less relevant to web applications than they
			are to standalone applications, they are included here for completeness.  For
			more complete discussions of these and other Java-related security issues, see
			Gong, 1999, Wheeler, 2002, Oaks, 2001, McGraw and Felton, 1999, and Viega 
			and McGraw, 2002.</para>
			<!-- TODO:  I need to insert the cross-references to the bibliogrpahic entries for these references,
				and add the McGraw and Felton reference -->
			<itemizedlist mark="opencircle" spacing="compact">
				<!-- QUESTION:  Should I expand on the rationale for each of these recommendations, or is
				it sufficient to refer the reader to the works mentioned above?
			 -->
				<listitem>
					<para>If you are running more than one web application on your server 
			 		(e.g. if you are running a hosting environment), consult your vendor 
			 		documentation to ensure that each web application uses its own classloader.
			 		This can help mitigate a large variety of malicious code attacks.</para>
				</listitem>
				<listitem>
					<para>Run your servlet container under a SecurityManager (if your container
					supports this; not all may).</para>
				</listitem>
				<listitem>
					<para>Restrict access to fields.  Make all fields private, and provide 
					accessor methods (get/set methods).</para>
				</listitem>
				<listitem>
					<para>Make all public static fields final.</para>
				</listitem>
				<listitem>
					<para>Make all classes final, if possible.</para>
				</listitem>
				<listitem>
					<para>Make all classes either un-cloneable or final.</para>
				</listitem>
				<listitem>
					<para>Make all classes unserializable, or if they must be serialized, make 
					them final.</para>
				</listitem>
				<listitem>
					<para>Use mutable objects (such as arrays, Vectors, or various classes
					in the Collections API) for storing sensitive information (such as passwords
					or personally identifying information) rather than Strings.  While this is difficult
					to do comprehensively in web applications, given that all HTTP parameters, 
					headers, and cookies are returned as Strings, any data your application
					obtains from databases or external sources should be stored in mutable 
					objects, if at all possible.</para>
				</listitem>
				<listitem>
					<para>Never return a mutable object to potentially malicious code, and never 
					accept a mutable object from potentially malicious code without cloning it first.  
					Then operate only on the cloned copy.</para>
				</listitem>
				<listitem>
					<para>Do not depend on packages for security; use sealed packages if at all
					possible.</para>
				</listitem>
				<listitem>
					<para>Digitally sign jar files to prevent mix-and-match attacks.</para>
				</listitem>
				<listitem>
					<para>Be careful when determining the name of a class, as attackers can
					try mix-and-match attacks.</para>
				</listitem>
				<listitem>
					<para>Native code runs outside the security control of the JVM and should 
					not be trusted.</para>
				</listitem>
				<listitem>
					<para>Try not to use inner classes, if at all possible, as the class obtains package 
					scope, and their private fields obtain package scope, when compiled.</para>
				</listitem>
				<listitem>
					<para>Do not hard code secrets such as passwords or cryptographic keys
					in your code; Java bytecode is notoriously easy to decompile.</para>
				</listitem>
				<listitem>
					<para>Always encrypt sensitive data, and keep it encrypted for as long as 
					possible while in memory.  When decrypted, the sensitive data should be 
					stored in a mutable object (such as an array) so that it may be cleared from
					memory as soon as it is no longer needed.</para>
				</listitem>
				<listitem>
					<para>Avoid using privileged code blocks if at all possible, as these blocks
					circumnavigate the security controls of a SecurityManager.</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1>
		<title>PHP</title>
		<para/>
	</sect1>
	<sect1>
		<title>Perl</title>
		<para/>
	</sect1>
	<sect1>
		<title>C#/.NET</title>
		<para/>
	</sect1>
	<sect1>
		<title>Python</title>
		<para/>
	</sect1>
	<sect1>
		<title>C/C++</title>
		<para/>
	</sect1>
</chapter>
