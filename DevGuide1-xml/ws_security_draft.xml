<!-- $Id: ws_security_draft.xml,v 1.10 2003/01/19 00:04:43 awiesmann Exp $ -->
<chapter label="16">
<title>XML and Web Services Security</title>
<sect1>
    <para>
    This chapter describes and dicusses standards for XML and Web Services security. It is not meant as a reference about Web Services, this is discussed in chapter 02. But we will look at XML Security Standards which can be used within Web Services. After each standard is described in detail, an example is presented to demonstrate how the standard can be used in the real world. The chapter concludes with a discussion of the common mistakes we see in implementing web services and XML security.
    </para>
</sect1>
<sect1>
	<title>XML Security Standards</title>
	<para>
	You may approach different security needs during design or implementation of Web Services. To meet these needs there are several XML Security Standards in various stages of completion. Some of these standards are discussed in this section. To get the full picture of every standards and it's purpose, every subsection contains an overview of the problem the standard seeks to address, discusses the technical details and then presents an example.
	</para>
	<para>
	At the end we will looked at the standards in a more comparing manner to show the intended usage and possibilities of implementation together or all alone.
	</para>
	<sect2>
		<title>Security Assertion Markup Language - SAML</title>
		<para>
		Include section by Abe Kang here.
		</para>
	</sect2>
	<sect2>
		<title>XML Encryption</title>
		<para>
		With the standard of XML Encryption you have the possibility to generally encrypt data. This data will be represented as XML formatted text within an EncryptedData element.
		While the encrypted data may be included in the EncryptedData element in the document itself, it is also possible to save it externaly and use an URI in the document to identify the "external place" containing the encrypted data.
		</para>
		
		<para>
		The EncryptedData element contains the following structure with the encryption information in the ds:KeyInfo node and the encrypted data in the CipherData node. The EncryptionProperties node may contain additional information concerning the generation of the nodes EncryptedData or EncryptedKey.
		</para>
		
		<para>
		Such an EncryptedData element is of the following structure:
		</para>
		
		<programlisting>
		&lt;EncryptedData ID Type MimeType Encoding&gt;
			&lt;EncryptionMethod/&gt;
			&lt;ds:KeyInfo&gt;	
			&lt;CipherData&gt;	
			&lt;EncryptionProperties/&gt;	
		&lt;EncryptedData/&gt;	
		</programlisting>
		<sect3>
			<title>EncryptionMethod</title>
			<para>
			The EncryptionMethod node can contain informations about the used algorithm and
			could be of the following value:
			</para>
			<programlisting>
			&lt;EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#tripledes-cbc'/&gt;
			</programlisting>
			<para>
			which would define the used algorithm as a symmetric key cipher knwon as 3DES CBC.
			</para>
		</sect3>
		<sect3>
			<title>ds:KeyInfo</title>
			<para>
			This node is optional and may be used to transport public keys. It may contain the 
			EncryptedKey element. It is important to note that EncryptedKey can also be used as
			a stand-alone XML document.
			</para>
			<para>
			Within a ReferenceList one can store pointers to objects encrypted by that key.
			</para>
		</sect3>
		<sect3>
			<title>CipherData</title>
			<para>
			This node contains either a CipherValue or a CipherReference. If it contains a 
			CipherValue, this means that the base64 encoded data is enclosed in the XML
			document itself. If it contains a CipherReference it has to provide a reference to an 
			external location containing the encrypted octet sequence.
			</para>
		</sect3>
		<sect3>
			<title>EncryptionProperties</title>
			<para>
			This element is used for storing additional informations concerning the generation of 
			the EncryptedData or EncryptedKey element. These informations can be data, time
			hardware number of processing hardware or anything of importance.
			</para>
		</sect3>
		
		<para>
		Another element is named EncryptedKey and is quite similar to the EncryptedData element. Except the data it contains is the information about used keys.
		</para>
		
		<para>
		The elements above, EncryptedType and EncryptedData, are derived from an abstract element. This abstract element is named EncryptedType and may contain the following attributes:
		</para>
		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				ID
				</para>
				<para>
				Identifier identifying this element. This attribute is optional. It can help identify a 
				single node when having multiple EncryptedData elements in one XML document.
				</para>
			</listitem>
			<listitem>
				<para>
				Type
				</para>
				<para>
				Optional argument defining the type of the replaced data. Will most probably be:
				</para>
				<programlisting>
				Type='http://www.w3.org/2001/04/xmlenc#Element'
				</programlisting>
				<para>
				If your replaced data was no element, it may be 'content' or something else, which
				can alternatively be identified with the MimeType attribute. 
				</para>
			</listitem>
			<listitem>
				<para>
				MimeType
				</para>
				<para>
				The Mime Type describing the encoded data. Optional as well.
				</para>
			</listitem>
			<listitem>
				<para>
				Encoding
				</para>
				<para>
				This contains informations about the encoding and is optional.
				</para>
			</listitem>
		</itemizedlist>
		
		<sect3>
			<title>Example of usage</title>
			<para>
			The following example shows how an XML with credit card informations can be
			encrypted and the therefore the credit card informations be securely transmitted.
			</para>
			<programlisting>
			&lt;?xml version='1.0'?&gt;
  			&lt;OrderInfo xmlns='http://example.org/order'&gt;
  				&lt;Name&gt;Eric Doe&lt;/Name&gt;
 				&lt;CreditCard Limit='2,000' Currency='EUR'&gt;
 					&lt;Number&gt;4019 2445 0277 5567&lt;/Number&gt;
 					&lt;Issuer&gt;Example Bank of Switzerland&lt;/Issuer&gt;
 					&lt;Expiration&gt;04/04&lt;/Expiration&gt;
 				&lt;CreditCard&gt;
  			&lt;/PaymentInfo&gt;
			</programlisting>
			<para>
			While the version above contains all the informations in human readable format,
			the next version shows how things look after a complete encryption.
			</para>
			<programlisting>
			&lt;?xml version='1.0'?&gt;
  			&lt;EncryptedData xmlns='http://www.w3.org/2001/04/xmlenc#' MimeType='application/xenc+xml'&gt;
  				&lt;CipherData&gt;
 					&lt;CipherValue&gt;AI36H75SL03&lt;/CipherValue&gt;
 				&lt;CypherData&gt;
  			&lt;/EncryptedData&gt;
			</programlisting>
			<para>
			While this is the most "radical" method you may use, you also can encrypt some subnodes only.
			Say if your security policies allow you to encrypt the credit card number only, you may do so 
			within the XML and encode only the Number node.
			</para>
			<para>
			The following example will show alternatively how things look if only one single element is
			encrypted.
			</para>
			<programlisting>
			&lt;?xml version='1.0'?&gt;
  			&lt;OrderInfo xmlns='http://example.org/order'&gt;
  				&lt;Name&gt;Eric Doe&lt;/Name&gt;
 				&lt;CreditCard Limit='2,000' Currency='EUR'&gt;
 					&lt;EncryptedData xmlns='http://www.w3.org/2001/04/xmlenc#'&gt;
  						&lt;CipherData&gt;
 							&lt;CipherValue&gt;DhU251DfSL&lt;/CipherValue&gt;
 						&lt;CypherData&gt;
  					&lt;/EncryptedData&gt;
 					&lt;Issuer&gt;Example Bank of Switzerland&lt;/Issuer&gt;
 					&lt;Expiration&gt;04/04&lt;/Expiration&gt;
 				&lt;CreditCard&gt;
  			&lt;/PaymentInfo&gt;
			</programlisting>
			<para>
			XML Encryption is a powerful tool, but it does not take your responsibility for planning and 
			defining security policies away. There are many ways to do things with XML encryption and your
			policy should define which one you are allowed to choose.
			</para>
		</sect3>
		<para>
		The special mime type to declare the respective document as XML Encrypted is the following: application/xenc+xml.
		</para>
		<sect3>
			<title>
			Further Reading
			</title>
			<para>
			Further informations can be found under the following links:
			</para>
			<para>
			Definition by the W3C: 
			<ulink url="http://www.w3.org/TR/xmlenc-core/">http://www.w3.org/TR/xmlenc-core/</ulink>
			</para>
			<para>
			Introduction on IBM's Developerworks website:
			<ulink url="http://www-106.ibm.com/developerworks/xml/library/x-encrypt/?dwzone=xml">http://www-106.ibm.com/developerworks/xml/library/x-encrypt/?dwzone=xml</ulink>			
			</para>
			<para>
			Suns Digital Encryption API Website:
			<ulink url="http://jcp.org/en/jsr/detail?id=106">http://jcp.org/en/jsr/detail?id=106</ulink>
			</para>
		</sect3>
	</sect2>
        <sect2>
                <title>XML Key Management - XKMS</title>
		<para>
		XKMS was invented to allow trusted web services. The specification defines therefore XML formated messages that let web services register key pairs, locate services to get keys for later use and validate informations concerning those keys. XKMS was designed to interact with XML Digital Signatures, to not require an underlying public key infrastructure (X.509) but to be compatible with such infrastructures.
		</para>
		
		<para>
		In other words this means that XKMS is a framework which helps developers of Web Services use PKI for inter-application security. It does so defining three functions.
		With the Register service handles the key pair registration and handling. It is not defined if the generation of the key needs to be done client- or server-side.
		The Locate service helps find a digital signature which is handled and managed within a Register service. If you once get a key, you can use it to either proof a signature or for encryption.
		And with the third, the Validation service, it is possible to ensure that a registered key is valid and not revoked.
		</para>
		<sect3>
			<title>
			Further Reading
			</title>
			<para>
			These links contain further informations concerning XKMS
			</para>
			<para>
			Notes from the W3C
			<ulink url="http://www.w3.org/TR/xkms/">http://www.w3.org/TR/xkms/</ulink>
			</para>
			<para>
			Informations from XML Trustcenter, which contains informations about XML and Public Crypto and which is sponsored by Verisign, Inc. <ulink url="http://www.xmltrustcenter.org/xkms/index.htm">http://www.xmltrustcenter.org/xkms/index.htm</ulink>
			</para>
		</sect3>
        </sect2>
        <sect2>
		<title>XML Digital Signature - XML DigSig</title>
		<para>
		XML signatures are meant to add authentication, data integrity and support for
		non-repudiation to the signed data. The main difference between other signature
		technologies and XML digital signatures is that it accounts specifically to XML 
		formed data.
		</para>
		<para>
		It is possible to sign only subtrees of the document without the need to sign the
		complete document. This may be used and be of advantage if one document can 
		have different authors or a history which changes. So one party can prepare an
		XML document and sign its content, while the other party may add its response
		and sign that part later without having to change or modify the data they got in 
		the first place.
		</para>
		<para>
		Also other data not included in the original tree can be signed. To do so one has
		to declare a Reference element in the XML tree which will contain the DigestMode
		and DigestValue containing the Digital Signature of any resource reachable via its
		URI. To allow a verification of such a signature, there is also the possibility to
		enclose a KeyInfo element in the XML document. This KeyInfo element contains 
		the keys subject and the certificate and key. This allows a verification of any signature
		in the XML document.
		</para>
		<sect3>
			<title>Example of usage</title>
			<para>
			The following example will show how a detached signature looks like:
			</para>
			<programlisting>
				&lt;Signature Id='DemoSignature' xmlns='http://www.w3.org/2000/09/xmldsig#'&gt;
  				
 	 				&lt;SignatureValue&gt;wqer2Ue8hkiUEw8sl03&lt;/SignatureValue&gt; 	
  				
  					&lt;SignedInfo&gt;
  				
  						&lt;CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;
  				
  						&lt;SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha1"/&gt;
  					
  						&lt;Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/"&gt; 
							&lt;Transforms&gt; 
								&lt;Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt; 
							&lt;/Transforms&gt;
 	 						&lt;DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/&gt;    
 							&lt;DigestValue&gt;sdKJH65gFg76JHvpmqs&lt;/DigestValue&gt;
 	 					&lt;/Reference&gt;
  				
  					&lt;/SignedInfo&gt; 
  				
  					&lt;KeyInfo&gt;
						&lt;KeyValue&gt;
							&lt;DSAKeyValue&gt;&lt;/DSAKeyValue&gt; 
						&lt;/KeyValue&gt;
  					&lt;/KeyInfo&gt;			
  				&lt;/Signature&gt;
			</programlisting>
			<para>
			This demonstration consists of different elements. The signature element is the root node of any XML 
			signature. It may contain an attribute named Id which contains a unifique identifier, identifying the 
			respective signature, so it can be referenced in the signed XML.
			</para>
			<para>
			The following elements are the most important ones in a XML signature and are described below.
			</para>
		</sect3>
		<sect3>
			<title>
			SignatureValue
			</title>
			<para>
			This node contains the actual value of the digital signature and is encoded with base64. It may also 
			contain an Id attribute for a detailed reference.
			</para>
		</sect3>
		<sect3>
			<title>
			SignedInfo
			</title>
			<para>
			SignedInfo consists of 3 sub-element, all of which you can see in the example above. The one is the
			SignatureMethod which defines the algorithm used for signing the data. The other is the Reference
			element and the last one is the CanonicalizationMethod.
			</para>
		</sect3>
		<sect3>
			<title>
			CanonicalizationMethod
			</title>
			<para>
			CanonicalizationMethod is a required element that specifies the canonicalization algorithm applied to 
			the SignedInfo element prior to performing signature calculations.
			</para>
		</sect3>
		<sect3>
			<title>
			SignatureMethod
			</title>
			<para>
			This element specifies the algorithm used for the signing process and will be needed for the validation
			of the signature too.
			</para>
		</sect3>
		<sect3>
			<title>
			Reference
			</title>
			<para>
			This element contains a DigestMethod and a DigestValue. The Method contains an algorithm used to 
			generate the Digest. The DigestMethod is applied to the signed object and results in the DigestValue. 
			The DigestValue is base64 encoded.
			</para>
			<para>
			The Transforms element contains Transform elements. Every Transform element describes how the 
			signer obtained the data object that was digested. This process can be reapplied to a new 
			Transformation eloement. The output from the last Transform is the input for the DigestMethod algorithm.
			</para>
		</sect3>
		<sect3>
			<title>
			KeyInfo
			</title>
			<para>
			The KeyInfo is an optional element. You will need the informations in this node to validate a signature.
			It can contain keys, names, certificates and any PKI informations.
			</para>
		</sect3>
		<sect3>
			<title>KeyName</title>
			
			<para>
			This element can be used to attach a human readable name to a key or certificate.
			</para>			
		</sect3>
		<sect3>
			<title>KeyValue</title>
			
			<para>
			A sub-element of this element is either a DSAKeyValue, RSAKeyValue, PGPData, SPKIData, 
			rawX509Certificate or any other supported method.
			</para>
		
		</sect3>
		<sect3>
			
			<title>Further Reading</title>
			
			<para>
			Further informations can be found under the following links:
			</para>
			
			<para>
			Specifications by the W3C
			<ulink url="http://www.w3.org/TR/xmldsig-core/">http://www.w3.org/TR/xmldsig-core/</ulink>
			</para>
			
			<para>
			Informations from the IETF
				<ulink url="http://www.ietf.org/html.charters/xmldsig-charter.html">
				http://www.ietf.org/html.charters/xmldsig-charter.html
				</ulink>
			</para>
			
			<para>
			Article containing informations about XML Digital Signature
				<ulink url="http://www.xml.com/pub/a/2001/08/08/xmldsig.html">
				http://www.xml.com/pub/a/2001/08/08/xmldsig.html
				</ulink>
			</para>
		</sect3>
	</sect2>
	<sect2>
		<title>XML Access Control Markup Language - XACML</title>
		<para>
		XACML is the common language for expressing security policies. In medium
		to big sized companies a security policy has many departments in which they are created, enforced, controlled or otherwise worked with. Elements of security policies may be managed by the information systems, the human ressources, the legal or any other department and enforced on any technical system like LAN or remote access system. Untill today this is handled with more or less expenditure across all points and elements as accurately as possible.
		</para>
		
		<para>
		Since this practice is expensive, nearly not managable and opens up many 
		possible points of failure, XACML tries to fulfill the need for a common language for expressing security policies. If all entities in the creation, management and enforement of security policies can read and understand this XML based language, the whole process should be getting much easier.
		</para>
		<sect3>
			<title>Top level elements</title>
			<para>
			In XACML three top-level elements do exist: Rule, Policy and PolicySet. The Rule element contains one boolean expression. Policy elements can contain Rule elements and forms an authorization decision. Such an authorization decision represents a function which evaluates to a Permit, Deny, Indeterminate, NotApplicable or other results.
			The PolicySet element may contain Policy or other PolicySet elements. This element is used to combine different Policies together to one set.
			</para>
		</sect3>
		<sect3>
			<title>Example</title>
			<para>
			In the first example we generate a Request with a question concerning access for Jon Doe to access the ressource in the form of some medical records at a hospital.
			</para>
			
			<programlisting>
			&lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;Request&gt;
				&lt;Subject&gt;
					&lt;Attribute
						DataType="identifier:rfc822name"&gt;
						&lt;AttributeValue&gt;jon@doe.com&lt;/AttributeValue&gt;
					&lt;/Attribute&gt;
				&lt;/Subject&gt;
				&lt;Resource&gt;
					&lt;Attribute
						AttributeId="identifier:resource:resource-uri"
						DataType="xs:anyURI"&gt;
						&lt;AttributeValue&gt;http://hospital.com/medicalrecords/&lt;/AttributeValue&gt;
					&lt;/Attribute&gt;
				&lt;/Resource&gt;
				
			&lt;/Request&gt;
			</programlisting>
			
			<para>
			This Request is answered in the following example with a Deny.
			</para>
			
			<programlisting>
			&lt;?xml version="1.0" encoding="UTF-8"?&gt;
			&lt;Response&gt;
				&lt;Result&gt;
					&lt;Decision&gt;Deny&lt;/Decision&gt;
				&lt;/Result&gt;
			&lt;/Response&gt;
			</programlisting>
			
		</sect3>
		<sect3>
			
			<title>Further Reading</title>
			
			<para>
			Further informations can be found under the following link:
			</para>
			
			<para>
			Informations from Oasis
			<ulink url="http://www.oasis-open.org/committees/xacml/"> http://www.oasis-open.org/committees/xacml/</ulink>
			</para>
		</sect3>
	</sect2>
	<sect2>	
		<title>eXtensible rights Markup Language - XrML</title>
		<para>
		XrML - eXtensible rights Markup Language - is the language for Digital Rights management. With XrML one can securely specify and manage rights and conditions associated with all kinds of resources including digital content as well as services.
		XrML is designed by ContentGuard, Inc and was contributed by them to MPEG-21, the OASIS Rights Language Technical Committee and the Open eBook Forum (OeBF). In each case they are using XrML as the base for their rights language specification. Furthest along is MPEG, where the process has reached Committee Draft.
		</para>
		<para>
		Design description - More to come
		</para>
		<sect3>
			
			<title>Further Reading</title>
			
			<para>
			Further informations can be found under the following link:
			</para>
			
			<para>
			General informations
			<ulink url="http://www.xrml.org/">http://www.xrml.org/</ulink>
			</para>
			<para>
			The Open Digital Rights Language Initiative
			<ulink url="http://www.xrml.org/">http://odrl.org/</ulink>
			</para>
		</sect3>
	</sect2>
</sect1>
<sect1>
	<title>Web Services Security Standards</title>
	<para>
	This section describes the technical details of various web services security standards. 
        As well as an overview of what problem each specification solves, the details of how they are 
        used will be covered. 
	</para>	
	<para>
        Before deciding what kind of security described above to implement, one has to decide what
        kind of protection is looked for. Let's group those different kinds of protection into communication
        security, non repudiation and authenticity.
	</para>
	<sect2>
		<title>Communication Security</title>
		<para>
		- SSL
		- XML Encryption
		</para>
	</sect2>
	<sect2>
		<title>Non repudiation</title>
		<para>
		- XML Digital Signature
		- XKMS
		</para>
	</sect2>
	<sect2>
		<title>Authenticity</title>
		<para>
		
		</para>
	</sect2>
	<sect2>
		<title>Special</title>
		<para>
		- XrML
		- XACML
		</para>
	</sect2>
</sect1>
<sect1>
	<title>Implementing Web Services and XML Security</title>
	<para>
        This section will discuss how basic web services can be secured using SOAP over SSL etc
	</para>
	<para>
	While there is of course the need for operating system security and the need to harden 
	the running services on the different platforms, many corporations think that there is no
	sufficent possibility of protecting web services sufficiently. But all of the above in detail 
	described specifications can be used to secure Web Services. While system hardening
	and other security technologies can help securing the server running the service, those
	enable a standard in securing the above services.   
	</para>
	<para>
	Most important as ever is the decision of the management about what kind of informations
	which is normaly done with security policies. It is then the job of the software architect to
	enforce those policies in the services she designs with the technologies available.
	</para>
	<sect2>
		<title>Example of implementation</title>
		<para>
		To show in an example how an implementation of the above technologies may 
		look like, let us discuss a possible internet based bookstore, selling books around
		the world, 24h a day. The firm behind the website which one can visit in the 
		internet belongs to the fictive firm CheapestBooks. While you may order on their
		website, they do not have any stock, nor any knowhow about delivery methods.
		So the question arises, how you will get the book in case of a placed order?
		</para>
		<para>
		If you place an order, that informations you supplied there will go directly into 
		CheapestBooks own databasesystem for further processing. Once every hour a 
		service job scans the order database and processes every open order. Every
		order will then be structured into an XML document to be processed with the 
		business partners. And this is where the web services security enters this 
		example.
		</para>
		<para>
		Cheapest Book has two business partners: BillThem and BookMailer. The one is
		specialized in payment processing, the other in delivery of books. So Cheapest 
		Book generated that XML document for both these firms. Besides the need of
		protecting the transmission - which could be either done with XML Encryption
		or SSL - BookMailer also has no need to know the customers CreditCard 
		informations. 
		</para>
		<para>
		So Cheapest Book generates one single XML document of every order they
		get. That XML contains all informations. To ensure BookMailer, that this XML
		is really from Cheapest Book and that the ordered amount is correct, the
		XML generating process signs the important parts with an XML signature.
		BookMailer then has the proof, that not only the origin of the XML document
		is the correct source, but also that the amount of books and the place of
		delivery was not altered since the order. 
		</para>
		<para>
		Since BillThem is the only business partner needing the Credit Cards 
		informations, the generating process also encrypts the Credit Card part of
		the XML with the public key of BillThem, so noone else can read the
		Credit Card informations.
		</para>
		<para>
		With such an arcitecture all three parties can work securely. The transport
		is crypted using SSL, the business partners can only read the informations
		they need to know to do their work.
		</para>
	</sect2>
</sect1>
<sect1>
	<title>XML and Web Services Security Standards alone are not enough</title>
	<para>
	As mentioned before, web services security are only as good as it's weakest link.
	The web services underlying platform needs hardening and observation technologies
	to ensure it's correctnes. The web service frameworks need to be secure too, there
	should be no possibility to tunnel from a web service implementation through the
	framework into the underlying system. One of those techniques widely used is
	SQL Fault Injection with which one can tunnel very easily from a Web GUI into
	the database - and if that one is configured badly - directly into the operating system
	as an administrator.
	</para>
	<para>
	The one techniques one can use to secure the web services themselfs (besides
	of the programming standards and techniques one should used which are 
	described through this Guide) are surely the XML security specifications described
	in this chapter.
	</para>
	<para>
	But beware: XML security is far away from being a web services silver bullet. As with
	any other technology and security standard, one needs to design a robust 
	architecture before implementation. That architecture needs to fulfill a firms security
	policies and should use standard algorithms and mathematical functions. Many 
	breaches and security related problems in Web Services are because of false
	applied or not applied security mechanisms, which then were misused in a not so
	planned manner. Not only a systems architect, but also the implementator should
	understand every single technology used, so it can be applied as intended.
	</para>
	<para>
	Following those rules, the above described specifications and techniques will be a 
	huge help in reaching the creation of a secure web service.
	</para>
</sect1>
</chapter>
