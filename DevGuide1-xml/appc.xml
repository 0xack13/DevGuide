<!-- $Id: appc.xml,v 1.4 2003/01/28 07:07:30 gene_mckenna Exp $ -->
<appendix id="SQLSource">
   <appendixinfo>
     <authorgroup>
       <author><firstname>Gene</firstname><surname>McKenna</surname>
       </author>
     </authorgroup>
   </appendixinfo>
	<title>Appendix C - SQL Injection Mitigation</title>
	<sect1>
		<title>Using Prepared Statements</title>
		<para>
		As mentioned in Chapter 11, a well designed system should not
		allow the user to change the nature of a query that is being
		executed. Typically this could be done if the user input
		contains special characters, such as " or '.
		</para>
		<para>
		The following code samples show the proper way to execute
		queries using JDBC and the Perl DBI module. Both use a technique
		known as a Prepared Statement which automatically escapes
		special characters to preserve the intent of the query. Both
		also allow for faster execution by allowing the database to
		reuse the query plan for each prepared statement.
		</para>
		<sect2>
			<title>J2EE - JDBC Queries With Prepared Statements</title>
			<para>
			The following code shows how an EJB Session Bean might
			be used to set a user password.
			</para>
			<programlisting>
	  public class UserServerBean
	     implements SessionBean
	  {
	    private static DataSource sDataSource = null;

	    public void ejbCreate() throws javax.ejb.CreateException, 
                 java.rmi.RemoteException 
	    {
	      if ( sDataSource == null) 
              {
                try 
		{
                  Context ctx = new InitialContext();
		  sDataSource = (DataSource) ctx.lookup( "jdbc/sample" ) ;
                  if( sDataSource == null) 
		    System.out.println( "No data source found" ) ;
		}
              }
              catch (Exception e) 
	      {
                System.out.println( "Naming service exception: " + 
		                    e.getMessage() ) ;
              }
            } 

	    public ResultSet getUserList( String keywords ) 
	    {
	      java.sql.Connection con = sDataSource.getConnection() ;

	      PreparedStatement selectUsers = con.prepareStatement(
	  	  "SELECT id, name FROM app_user WHERE name LIKE ? " ) ;

	      // Note, the parameters in the query are numbered starting at 1, not 0
	      selectUsers.setString( 1, "%"+keywords+"%" ) ; 

	      // execute the query
	      return selectUsers.executeQuery() ;
	    }

	    public int setUserPassword( int userId, String newPassword ) 
	    {
	      int count = 0 ;
	      try
	      {
	        java.sql.Connection con = sDataSource.getConnection() ;

	        PreparedStatement setPassword = con.prepareStatement(
	  	  "UPDATE app_user SET password = ? WHERE id = ? " ) ;

	        // Note, the parameters in the query are numbered starting at 1, not 0
	        setPassword.setString( 1, newPassword ) ; 
	        setPassword.setInt(    2, userId      ) ;

	        // execute the query
		count = setPassword.executeUpdate() ;
	      }
	      catch( SQLException e )
	      {
	        System.out.println( "SQLException in setUserPassword " + e ) ;
	      }
	      return count ;
	    }
			</programlisting>
		</sect2>
		<sect2>
			<title>Perl - ODBC Queries With Prepared Statements</title>
			<para>
			The Perl examples below show similar queries made using
			the Perl DBI module interface. The DBI interface allows
			for easy variable binding as arguments to the execute
			function, as shown below. Advanced binding with more
			control over the binding type is also available.
			</para>
			<programlisting>
#!/usr/bin/perl

use strict ;
use DBI ;

my $id ;
my $name ;

my $dbh = DBI->connect( "DBI:Oracle:$dbInstance", "$dbUserName", "$dbPassword" )
    or die "Couldn't connect to database: " . DBI->errstr ;

my $userUpdate = "UPDATE app_user SET password = ? WHERE id = ?" ;
my $userList   = "SELECT id,name FROM app_user WHERE upper(name) LIKE '%'\|\|?\|\|'%'" ;

my $sthUserList = $dbh->prepare( $userList )
  or die "Couldn't prepare user list query " . $dbh->errstr;
my $sthUserUpdate = $dbh->prepare( $userUpdate )
  or die "Couldn't prepare user update query " . $dbh->errstr;

# find all users whose name contains the string "mith" in any case
&amp;userList( "mith" ) ;

# set the password for user 100 to superSecret
&amp;userUpdate( 100, "superSecret" ) ;

exit 1 ;

#
# select a list of users whose last name contains the keyword
#
sub userList
{
  my ( $keyword ) = @_ ;

  # translate the keyword to all upper case
  $keyword =~ tr/a-z/A-Z/ ;

  $sthUserList->execute( $keyword ) ;
  while( ( $id, $name ) = $sthUserList->fetchrow_array() )
  {
    print "$id, $name\n" ;
  }
}

#
# set the password for the user specified
#
sub userUpdate
{
  my ( $userId, $password ) = @_ ;

  $sthUserUpdate->execute( $password, $userId ) ;
}
			</programlisting>
		</sect2>
	</sect1>
</appendix>
