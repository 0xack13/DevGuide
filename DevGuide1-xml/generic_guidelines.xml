<!-- $Id: generic_guidelines.xml,v 1.10 2003/04/03 13:55:59 awiesmann Exp $ -->
<chapter id="ch04">

    <chapterinfo>
        <authorgroup>
            <author>
                <firstname>Mark</firstname>
                <surname>Curphey</surname>
            </author>
        </authorgroup>
    </chapterinfo>
<title>Security Guidelines</title>

<para>
The following high-level security principles are useful as reference points
when designing systems.
</para>

<sect1>
	<title>Validate Input and Output</title>

	<para>
	User input and output to and from the system is the route for
	malicious payloads into or out of the system. All user input and
	user output should be checked to ensure it is both appropriate and
	expected. The correct strategy for dealing with system input and
	output is to allow only explicitly defined characteristics and drop
	all other data. If an input field is for a Social Security Number,
	then any data that is not a string of nine digits is not valid. A
	common mistake is to filter for specific strings or payloads in the
	belief that specific problems can be prevented. Imagine a firewall
	that allowed everything except a few special sequences of packets!
	</para>
</sect1>

<sect1>
	<title>Fail Securely (Closed)</title>

	<para>
	Any security mechanism should be designed in such a way that when it
	fails, it fails closed. That is to say, it should fail to a state that
	rejects all subsequent security requests rather than allows them. An
	example would be a user authentication system. If it is not able to
	process a request to authenticate a user or entity and the process
	crashes, further authentication requests should not return negative
	or null authentication criteria. A good analogy is a firewall. If
	a firewall fails it should drop all subsequent packets.
	</para>
</sect1>

<sect1>
	<title>Keep it Simple</title>

	<para>
	While it is tempting to build elaborate and complex security controls,
	the reality is that if a security system is too complex for its user
	base, it will either not be used or users will try to find measures to
	bypass it. Often the most effective security is the simplest security.
	Do not expect users to enter 12 passwords and let the system ask for a
	random number password for instance! This message applies equally
	to tasks that an administrator must perform in order to secure an
	application. Do not expect an administrator to correctly set a 
	thousand individual security settings, or to search through dozens 
	of layers of dialog boxes to understand existing security settings.
	Similarly this message is also intended for security layer API's
	that application developers must use to build the system. If the
	steps to properly secure a function or module of the application
	are too complex, the odds that the steps will not be properly followed
	increase greatly.
	</para>
</sect1>

<sect1>
	<title>Use and Reuse Trusted Components</title>

	<para>
	Invariably other system designers (either on your development team or
	on the Internet) have faced the same problems as you. They may have
	invested large amounts of time researching and developing robust
	solutions to the problem. In many cases they will have improved
	components through an iterative process and learned from common
	mistakes along the way. Using and reusing trusted components makes
	sense both from a resource stance and from a security stance. When
	someone else has proven they got it right, take advantage of it.
	</para>
</sect1>

<sect1>
	<title>Defense in Depth</title>

	<para>
	Relying on one component to perform its function 100% of the time is
	unrealistic. While we hope to build software and hardware that works as
	planned, predicting the unexpected is difficult. Good systems don't
	predict the unexpected, but plan for it. If one component fails to catch
	a security event, a second one should catch it.
	</para>
</sect1>

<sect1>
	<title>Only as Secure as the Weakest Link</title>

	<para>
	We've all seen it, "This system is 100% secure, it uses 128bit SSL".
	While it may be true that the data in transit from the user's browser to
	the web server has appropriate security controls, more often than not
	the focus of security mechanisms is at the wrong place. As in the real
	world where there is no point in placing all of one's locks on one's
	front door to leave the back door swinging in its hinges, careful
	thought must be given to what one is securing. Attackers are lazy and
	will find the weakest point and attempt to exploit it.
	</para>
</sect1>

<sect1>
	<title>Security By Obscurity Won't Work</title>

	<para>
	It's naive to think that hiding things from prying eyes doesn't buy
	some amount of time. Let's face it, some of the biggest exploits
	unveiled in software have been obscured for years. But obscuring
	information is very different from protecting it. You are relying
	on the premise that no one will stumble onto your obfuscation. This
	strategy doesn't work in the long term and has no guarantee of
	working in the short term.
	</para>
</sect1>

<sect1>
	<title>Least Privilege</title>

	<para>
	Systems should be designed in such a way that they run with the least
	amount of system privilege they need to do their job. This is the "need
	to know" approach. If a user account doesn't need root privileges to
	operate, don't assign them in the anticipation they may need them.
	Giving the pool man an unlimited bank account to buy the chemicals for
	your pool while you're on vacation is unlikely to be a positive
	experience.
	</para>
</sect1>

<sect1>
	<title>Compartmentalization (Separation of Privileges)</title>

	<para>
	Similarly, compartmentalizing users, processes and data helps contain
	problems if they do occur. Compartmentalization is an important concept
	widely adopted in the information security realm. Imagine the same pool
	man scenario. Giving the pool man the keys to the house while you are
	away so he can get to the pool house, may not be a wise move.
	Granting him access only to the pool house limits the types of problems
	he could cause.
	</para>
</sect1>

<sect1>
	<title>Don't support Snake Oil</title>

	<para>
	The term 'Snake Oil' is used in many fields to denote something sold without 
	consideration of its quality or its ability to fulfill its vendor's 
	claims. This term originally applied to elixirs sold in traveling 
	medicine shows. The salesmen would claim their elixir would cure just 
	about any ailment that a potential customer could have.
	</para>

	<para>
	This guide is all about best practices and secure programming and design.
	Don't use a technology or tool only because a vendor states it's complete
	secureness. When evaluating any product, be sure to understand your needs. 
	For data security products, what are you trying to protect? You can find
	furtner informations in [SnakeOil98]. 
	</para>

</sect1>

</chapter>





