<!-- $Id: appb.xml,v 1.6 2003/01/28 07:07:48 gene_mckenna Exp $ -->
<appendix id="ValidationSource">
   <appendixinfo>
     <authorgroup>
       <author><firstname>Gene</firstname><surname>McKenna</surname>
       </author>
     </authorgroup>
   </appendixinfo>
	<title>Appendix B - Source Code Samples</title>
	<sect1>
		<title>CGI Input Data Validation - Rejection of Known Bad Data</title>
		<para>
	As mentioned in Chapter 11, a well designed system should
	validate all user input data. If all requests come in to a
	central location and leave from a central location then the
	problem is easier to solve with a common component.
	</para>
		<para>
	The following code samples show a simple component for data
	validation for J2EE servlets and another for Perl CGI scripts.
	In both cases, the samples test the user input to see if it
	matches a certain regular expression. The regular expression
	defines any HTML tag and if it is matched, the input is
	considered invalid. Other regular expressions, can, of course,
	be used to meet one's needs.
	</para>
		<para>
	The samples are not intended to serve as production code ready
	to meet any specific data validation need. Different
	applications will have different data validation needs and no
	one component could work in all situations. Rather these
	samples are code "snippets" that demonstrate the basic
	concept.
	</para>
		<sect2>
			<title>J2EE - Input Validation With Servlets</title>
			<programlisting>

import java.util.* ;
import javax.servlet.* ;
import javax.servlet.http.* ;
import javax.servlet.jsp.* ;
import org.apache.oro.text.regex.* ; // regular expression package
import org.apache.oro.text.* ;       // used for matching input data

/**
 * This servlet will match all user input for GET and POST 
 * requests and validate that the input does not contain 
 * any html tags that might be used to encapsulate malicious
 * JavaScript. 
 * 
 * This sample program relies on the ORO regular expression package
 * version 2.0.4 from the Apache group. http://jakarta.apache.org
 */
public class TestServlet
     extends HttpServlet
{
  private static Perl5Compiler sCompiler ;        // a pattern compiler
  private static String        sTag = "(&lt;.*?&gt;)" ; // regular expression matching any HTML tag
  private static Perl5Pattern  sTagPattern ;      // a compiled pattern for above
  
  /**
   * Things in here will only happen once for each instance of
   * ESPServlet. Therefore, only the static variables should be
   * set here. This is called by the Web Server when the first
   * instance of this servlet class is invoked for the first time.
   */
  public void init( ServletConfig config )
       throws ServletException
  {
    super.init( config ) ;

    // Create Perl5Compiler and Perl5Matcher instances.
    sCompiler = new Perl5Compiler() ;

    try
    {
      sTagPattern = (Perl5Pattern) 
        sCompiler.compile( sTag, Perl5Compiler.READ_ONLY_MASK ) ;
    }
    catch( MalformedPatternException e ) 
    {
      System.out.println( "Malformed Pattern " + sTag ) ;      
    }
  }
  
  /**
   * Method to handle requests of type POST. Check the length
   * and forward to the doGet method.
   */
  public void doPost( HttpServletRequest  request,
                      HttpServletResponse response )
       throws java.io.IOException, ServletException
  {
    // check the length of the post to make sure it isn't too big
    int length    = request.getContentLength() ;
    if ( length > 1024 ) // > 1024 bytes is considered too big
    {
      try { response.getOutputStream().println( "POST exceeds 1024 bytes - not accepted." ) ; }
      catch( java.io.IOException ioe ) { ; }
      return ;
    }  
    else // everything is fine, forward request to the doGet method
    {
      doGet( request, response ) ;
    }
  }

  /**
   * Method to handle requests of type GET
   */
  public void doGet( HttpServletRequest  request,
                     HttpServletResponse response )
       throws java.io.IOException, ServletException
  {
    // validate input data before processing
    try { validateInput( request ) ; }
    catch( DataValidationException e )
    {
      try 
      { 
        response.getOutputStream().println( "This request contained invalid input data." ) ;
        response.getOutputStream().println( "It will nt be processed." ) ; 
      }
      catch( java.io.IOException ioe ) { ; }
      return ;
    }

    // do whatever it is this servlet is supposed to do
    try { response.getOutputStream().println( "Hello World" ) ; }
    catch( java.io.IOException ioe ) { ; }

    return ;
  }
	  

  /**
   * Iterates through all the input variables and ensures
   * that their values meet validation requirements by
   * calling the validateString method on each value.
   */
  public void validateInput( HttpServletRequest request )
       throws DataValidationException 
  {
    // Loop through all variables in the request and validate their values
    for ( Enumeration e = request.getParameterNames() ; e.hasMoreElements() ; )
    { 
      // get the name of the first input variable 
      String   name = (String) e.nextElement() ;
      // each variable can have zero or more values
      String[] vals = request.getParameterValues( name ) ;
      if ( vals != null )
      {
        StringBuffer sb = new StringBuffer() ;
        for ( int i = 0 ; i &lt; vals.length ; i++ )
          sb.append( vals[i] + "\n" ) ;

        // validate the string
        validateString( sb.toString() ) ;
      }
    }
  }

  /**
   * Ensure that the submitted string does not match the 
   * test pattern. In this case, the test pattern is a 
   * a regular expression coding for any HTML tag. If
   * match is found, the exception DataValidationException
   * is thrown.
   */
  public void validateString( String s )
       throws DataValidationException
  {
    PatternMatcherInput input = new PatternMatcherInput( s ) ;
    Perl5Matcher matcher = new Perl5Matcher() ;
    
    int pos = input.getCurrentOffset() ;
    if ( matcher.contains( input, sTagPattern ) )
      throw new DataValidationException( "Bad input: " + s ) ;
  }
}
		</programlisting>
		</sect2>
		<sect2>
			<title>Perl - Input Validation For CGI Scripts</title>
			<para>
		Perl scripts are not necessarily as standardized as their J2EE
		servlet counterparts. Nonetheless, most Perl CGI scripts have
		a subroutine that is used to place the submitted CGI data 
		into an associative array (similar to hashtable). 
		</para>
			<para>
		In the example below, the method &amp;parseCGI which is not included
		is assumed to return the name/value pairs submitted with
		the request (whether it is a GET or POST request) as the
		associative array, %input.
		</para>
		<programlisting>

#!/usr/bin/perl
use strict ;

my %input = &amp;parseCGI ; 

print "Content-type: text/html\n\n" ;

$validated = &amp;validateInput() ;
if ( $validated eq "0" ) 
{ 
  print "Request contains invalid data. Request will not be processed.\n" ; 
}

# data is validated, continue on with CGI script.
print "Hello world\n" ;

exit 1 ;

sub validateInput
{
  my $key ;
  my $value ;
  foreach $key (keys %input)
  {
    $value = $input{ $key } ;
    if ( $value =~ /\&lt;.*\&gt;/ ) { return 0 ;}
  }
  return 1 ;
}
		</programlisting>
		</sect2>
	</sect1>
</appendix>
