<!-- $Id: soap.xml,v 1.4 2003/05/17 20:34:36 draphael Exp $ -->
<chapter id="soap.xml">
	<chapterinfo>
                <authorgroup>
                        <author>
                                <firstname>Adrian</firstname>
                                <surname>Wiesmann</surname>
                        </author>
                </authorgroup>
        </chapterinfo>
	<title>Simple Object Access Protocol (SOAP)</title>	
	<sect1>
		<title>Overview of SOAP</title>
		<sect2>
			<title>Description</title>
			<para>
			SOAP is a protocol which allows the exchange of informations. This protocol was built to let decentralized and distributed environments exchange informations in a structured way. SOAP can work over multiple transport protocols and is XML based. A SOAP message is made out of three parts:
			</para>
			
			<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>Envelope</para>
				</listitem>
				<listitem>
					<para>Encoding Rules</para>
				</listitem>
				<listitem>
					<para>RPC representation</para>
				</listitem>
			</itemizedlist>
			
			<para>
			It may be a irritating to notice that these three parts are defined in different namespaces. This is a planed behaviour to stay simple through modularity.
			</para>
			<para>
			Among the design goals of SOAP is a distributed garbage collection. This is needed for the Remote Procedure Call (RPC) functionality. There are other features which are not described in the SOAP specification by the W3C but which are known from traditional messaging systems and distributed object models.
			</para>
			<para>
			While the word SOAP is often mentioned in the same sentence as Web Services, SOAP is not the only possibility to enable Web Services. SOAP may be the most widely used technology, but there are plenty of others among which are at least XML-RPC, some proprietories and others.
			</para>
		</sect2>
		
		<sect2>
			<title>SOAP Message Exchange Model</title>
			
			<para>
			While SOAP messages theoretically represent one-way transmissions from a sender to a receiver, SOAP messages normally are used like the traditional HTTP request/response model. The message exchange model is free to let application developers use characteristiques of their particular transportation protocol. Like that using HTTP as method of transportation means, that SOAP responses can be delivered with the usual HTTP responses after a request.
			</para>
			
			<para>
			All SOAP messages are XML styled streams of data. Every such message therefore should implement all of the required SOAP specific definitions with the corresponding namespaces. The W3C specification states, that every message which is not well crafted should be discarded.
			</para>
		</sect2>
		<sect2>
			<title>Examples of SOAP messages</title>
			<para>
			This example shows a SOAP message embedded in an HTTP request. This is - as stated above - not the only kind of transportation, but most probably the most widely used these days which is the reason to show this example with HTTP as transportation method.
			</para>
			<para/>
			
			<para>
			The first part of the example shows the HTTP header sent from a client to a server. Please note that this example is not demonstrating the HTTP Extension Framework for this would be definitely offtopic for this guide.
			</para>
		
			<programlisting>
				POST /BillingSystem HTTP/1.1
				Host: www.owasp.org
		Content-Type: text/xml; charset="utf-8"
				Content-Length: nnnn
				SOAPAction: "Some-URI"
			</programlisting>
			
			<para>
			The header contains a reference to a function /BillingSystem on the OWASP projects website (which is completely fictional and was invented by the author). The example also contains a Content-Type of type text/xml which must be set in this case according RFC 2376.
			</para>
			
			<para>
			The second part of the example contains the rest of the XML conform SOAP message. 
			</para>

			<programlisting>
				&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
					SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"&gt;
					&lt;SOAP-ENV:Body&gt;
					&lt;m:CurrentAccountStatus xmlns:m="Some-URI"&gt;
					&lt;account&gt;owasp_guide&lt;/account&gt;
					&lt;/m:CurrentAccountStatus&gt;
					&lt;/SOAP-ENV:Body&gt;
					
				&lt;/SOAP-ENV:Envelope&gt;
			</programlisting>

			<para>
			Every SOAP message contains an envelope, an optional header (which is missing in the example above) and some body. The W3C specifications gave those three parts together the name "SOAP message". 
			</para>
			
			<para>
			A possible answer to the message above could be the result from the example below. Most of the structure looks the same. The differences are within the HTTP header and within the body of the SOAP message.
			</para>

			<programlisting>
				HTTP/1.1 200 OK
				Content-Type: text/xml; charset="utf-8"
				Content-Length: nnnn
		
				&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
					SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/&gt;
					&lt;SOAP-ENV:Body&gt;
					&lt;m:CurrentAccountStatus xmlns:m="Some-URI"&gt;
					&lt;deposit&gt;29672.20&lt;/deposit&gt;
					&lt;currency&gt;EUR&lt;/currency&gt;
					&lt;/m:CurrentAccountStatus&gt;
					&lt;/SOAP-ENV:Body&gt;
				&lt;/SOAP-ENV:Envelope&gt;
			</programlisting>
		</sect2>
		<sect2>
			<title>SOAP message</title>
			<sect3>
				<title>Envelope</title>
				<para>
				The envelope of a SOAP message is like an envelope you use with a written letter. It is mainly a container for the Header and Body elements. Besides that an Envelope can contain informations about SOAP Encoding and fault reporting.
				</para>
			</sect3>
			<sect3>
				<title>Header</title>
				<para>
				This part of the SOAP message is optional and can therefore be omitet. The header contains informations about how a message should be processed.
				</para>
			</sect3>
			<sect3>
				<title>Body</title>
				<para>
				With the SOAP Body an application developer has a simple mechanism for exchanging informations and data intended for the recepient of the message. This data can be either function calls and arguments, but also error codes and other status informations.
				</para>
				<para>
				To carry error codes and fault informations in a SOAP message, SOAP defines a SOAP Fault element which can be used for that purpose. The SOAP Fault element contains many subelements to describe the error in detail.
				</para>
			</sect3>
		</sect2>
		<sect2>
			<title>SOAP Encoding</title>
			<para>
				The idea behind the SOAP Encoding is to allow a narrower definition of types than would be supported by XML. SOAP Encoding allows therefore the definition of value (primitive type), array, struct, simple type (class of simple values) and others. The whole definition is quite complete and is also quite offtopic in the guide. It is just most important to know that a possibility for encoding is available and could be used.
			</para>
		</sect2>
		<sect2>
			<title>SOAP RPC</title>
			<para>
			Method calls within SOAP need some informations to be put into the Body of the SOAP message. Two of these informations most obviously are a targets name and a name for a to be called function. Optionaly there also can be some arguments for the called function. All parameters and informations should be defined by encoding types.
			</para>
		</sect2>
		
		<sect2>
			<title>Further informations</title>
			<para>
			The W3C specifications at
			<ulink url="http://www.w3.org/TR/SOAP/">http://www.w3.org/TR/SOAP/</ulink>
			</para>
			
		</sect2>
	</sect1>
	<sect1>
		<title>Web Services Description Language (WSDL)</title>
		<para>
		The Web Services Description Language (WSDL) is an XML format specified by the World Wide Web Consortium for describing Web services. The supported operations and messages are described abstractly, and then bound to a concrete network protocol and message format.
		</para>
		<para>
		So if a developer wants to publish her Web service to a wider audience, she does so with generating a description and linking that description into a UDDI (Universal Description, Discovery and Integration) repository. Interested persons will then request the corresponding WSDL file. Once they parse that file, they will get every information they need to use that Web Service. They can then use this information from the WSDL file to form a SOAP request to the computer where our developers Web Service is running on.
		</para>
		<sect2>
			<title>Further informations</title>
			<para>We will not go further into the detail concerning WSDL but you can find the specifications and further informations at the following locations:
			</para>
			<para>
			The W3C specifications at
			<ulink url="http://www.w3.org/TR/wsdl">http://www.w3.org/TR/wsdl</ulink>
			</para>
			<para>
			A short description by sun at 
			<ulink url="http://sunonedev.sun.com/building/tech_articles/overview_wsdl.html">
				http://sunonedev.sun.com/building/tech_articles/overview_wsdl.html
			</ulink>
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Security considerations</title>
		<para>
		Many security conciderations concerning SOAP are general problems which can occur within any service related communications design. Our current network designs and the status of informations among network administrators concerning http based services are somewhere between bad and medium. The main problem sums up with the word "tunneling". While many services can (and mostly are) completely blocked or controlled by a system administrator, the nature of SOAP is to tunnel right through a firewalls http gateway right to the place where the action starts.
		</para>
		<para>
		There are some protection mechanisms and proxy systems available for Web Services, but this technology is very young and needs some time to mature (some more). Meanwhile it is very important to fully understand what can protect web services besides those mechanisms and to include those security mechanisms in the design of web services.
		</para>
		<para>
		The main rule should be to never trust any data. Every command, dataset and information which reaches a web service via SOAP should be double checked for it's validity. To enforce some mechanisms one can use XML Encryption and XML Digital Signatures to encrypt or sign some partions of the XML traffic.
		</para>
		<para>
		Besides the cross checking of data the systems running the web services should be completely hardened and the service itself be chrooted and sandboxed so problems within the service itselfs can not tear down the whole system and environment. How this is achieved is discussed some more within the Web Service Security chapter.
		</para>
		
		<sect2>
			<title>Further informations</title>
			<para>
			SOAP Research Summary by Sudarshan "Sun" Murthy
			<ulink url="http://www.cse.ogi.edu/~smurthy/classes/soap/summary.html">				http://www.cse.ogi.edu/~smurthy/classes/soap/summary.html</ulink>
			</para>
		</sect2>
	</sect1>
</chapter>
