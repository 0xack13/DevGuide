<!-- $Id: ch07.xml,v 1.9 2002/10/22 21:04:37 russcoon Exp $ -->
<chapter label="7">

<title>Managing User Sessions</title>

<para>
HTTP is a stateless protocol, meaning web servers respond to client requests
without linking them to each other. Applying a state mechanism scheme allows a
user's multiple requests to be associated with each other across a "session."
Being able to separate and recognize users' actions to specific sessions is
critical to web security. While a preferred cookie mechanism (RFC 2965) exists
to build session management systems, it is up to a web designer / developer to
implement a secure session management scheme. Poorly designed or implemented
schemes can lead to compromised user accounts, which in too many cases may also
have administrative privileges.
</para>

<para>
For most state mechanism schemes, a session token is transmitted between HTTP
server and client.  Session tokens are often stored in cookies, but also in
static URLs, dynamically rewritten URLs, hidden in the HTML of a web page, or
some combination of these methods.
</para>

<sect1>

	<title>Cookies</title>

	<para>
	Love 'em or loath them, cookies are now a requisite for use of many
	online banking and e-commerce sites. Cookies were never designed to
	store usernames and passwords or any sensitive information. Being
	attenuated to this design decision is helpful in understanding how to
	use them correctly. Cookies were originally introduced by Netscape and
	are now specified in RFC 2965 (which supersedes RFC 2109), with RFC 2964
	and BCP44 offering guidance on best practice. There are two categories
	of cookies, secure or non-secure and persistent or non-persistent,
	giving four individual cookies types.
	</para>

	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Persistent and Secure</para>
		</listitem>
		<listitem>
			<para>Persistent and Non-Secure</para>
		</listitem>
		<listitem>
			<para>Non-Persistenet and Secure</para>
		</listitem>
		<listitem>
			<para>Non-Persistent and Non-Secure</para>
		</listitem>
	</itemizedlist>

	<sect2>

		<title>Persistent vs. Non-Persistent</title>

		<para>
		Persistent cookies are stored in a text file (cookies.txt under
		Netscape and multiple *.txt files for Internet Explorer) on the
		client and are valid for as long as the expiry date is set for
		(see below). Non-Persistent cookies are stored in RAM on the
		client and are destroyed when the browser is closed or the
		cookie is explicitly killed by a log-off script.
		</para>

	</sect2>

	<sect2>

		<title>Secure vs. Non-Secure</title>

		<para>
		Secure cookies can only be sent over HTTPS (SSL). Non-Secure
		cookies can be sent over HTTPS or regular HTTP. The title of
		secure is somewhat misleading. It only provides transport
		security. Any data sent to the client should be considered under
		the total control of the end user, regardless of the transport
		mechanism in use.
		</para>

	</sect2>

	<sect2>
		<title>How do Cookies work? </title>

		<para>
		Cookies can be set using two main methods, HTTP headers and
		JavaScript. JavaScript is becoming a popular way to set and read
		cookies as some proxies will filter cookies set as part of an
		HTTP response header. Cookies enable a server and browser to
		pass information among themselves between sessions. Remembering
		HTTP is stateless, this may simply be between requests for
		documents in a same session or even when a user requests an
		image embedded in a page. It is rather like a server stamping a
		client, and saying show this to me next time you come in.
		Cookies can not be shared (read or written) across DNS domains.
		In correct client operation Ddomain A can't read Domain B's
		cookies, but there have been many vulnerabilities in popular web
		clients which have allowed exactly this. Under HTTP the server
		responds to a request with an extra header. This header tells
		the client to add this information to the client's cookies file
		or store the information in RAM. After this, all requests to
		that URL from the browser will include the cookie information as
		an extra header in the request.
		</para>

	</sect2>

	<sect2>
		<title>What's in a cookie?</title> 

		<para>
		A typical cookie used to store a session token (for redhat.com
		for example) looks much like:
		</para>

		<table frame='all'>
				<title>Structure Of A Cookie</title>
				<tgroup cols='7' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1'/>
				<colspec colname='c2'/>
				<colspec colname='c3'/>
				<colspec colname='c4'/>
				<colspec colname='c5'/>
				<colspec colname='c6'/>
				<colspec colname='c7'/>
				<thead>
					<row>
						<entry align="center">
						Domain
						</entry>
						<entry align="center">
						Flag
						</entry>
						<entry align="center">
						Path
						</entry>
						<entry align="center">
						Secure
						</entry>
						<entry align="center">
						Expiration
						</entry>
						<entry align="center">
						Name
						</entry>
						<entry align="center">
						Value
						</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
						www.redhat.com
						</entry>
						<entry>
						FALSE
						</entry>
						<entry>
						/
						</entry>
						<entry>
						FALSE
						</entry>
						<entry>
						1154029490
						</entry>
						<entry>
						Apache
						</entry>
						<entry>
						64.3.40.151.16018996349247480
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<para>
		The columns above illustrate the six parameters that can be stored in a cookie.
		</para>

		<para>
		From left-to-right, here is what each field represents: 
		</para>

		<para>
		<emphasis role="bold">domain:</emphasis> The website domain that
		created and that can read the variable.
		</para>

		<para>
		<emphasis role="bold">flag:</emphasis> A TRUE/FALSE value
		indicating whether all machines within a given domain can access
		the variable.
		</para>

		<para>
		<emphasis role="bold">path:</emphasis> The path attribute
		supplies a URL range for which the cookie is valid. If path is
		set to /reference, the cookie will be sent for URLs in
		/reference as well as sub-directories such
		as/reference/webprotocols. A pathname of " / " indicates that
		the cookie will be used for all URLs at the site from which the
		cookie originated.
		</para>

		<para>
		<emphasis role="bold">secure:</emphasis> A TRUE/FALSE value
		indicating if an SSL connection with the domain is needed to
		access the variable.
		</para>

		<para>
		<emphasis role="bold">expiration:</emphasis> The Unix time that
		the variable will expire on. Unix time is defined as the number
		of seconds since 00:00:00 GMT on Jan 1, 1970. Omitting the
		expiration date signals to the browser to store the cookie only
		in memory; it will be erased when the browser is closed.
		</para>

		<para>
		<emphasis role="bold">name:</emphasis> The name of the variable
		(in this case Apache).
		</para>

		<para>
		So the above cookie value of Apache equals
		64.3.40.151.16018996349247480 and is set to expire on July 27,
		2006, for the website domain at http://www.redhat.com.
		</para>

		<para>
		The website sets the cookie in the user's browser in plaintext
		in the HTTP stream like this:
		</para>

		<para>
		Set-Cookie: Apache="64.3.40.151.16018996349247480"; path="/"; domain="www.redhat.com"; path_spec; expires="2006-07-27 19:39:15Z"; version=0
		</para>

		<para>
		All spec-compliant browsers must be capable of holding at least
		4K of cookie data per host or domain.
		</para>

		<para>
		All spec-compliant browsers must be capable of holding at least
		20 distinct cookies per host or domain.
		</para>

	</sect2>

</sect1>

<sect1>
	<title>Session Tokens</title>

	<sect2>
		<title>Cryptographic Algorithms for Session Tokens</title>

		<para>
		All session tokens (independent of the state mechanisms) should
		be user unique, non-predictable, and resistant to reverse
		engineering. A trusted source of randomness should be used to
		create the token (like a pseudo-random number generator, Yarrow,
		EGADS, etc.).  Additionally, for more security, session tokens
		should be tied in some way to a specific HTTP client instance to
		prevent hijacking and replay attacks. Examples of mechanisms for
		enforcing this restriction may be the use of page tokens which
		are unique for any generated page and may be tied to session
		tokens on the server.  In general, a session token algorithm
		should never be based on or use as variables any user personal
		information (user name, password, home address, etc.)
		</para>

	</sect2>

	<sect2>
		<title>Appropriate Key Space</title>

		<para>
		Even the most cryptographically strong algorithm still allows an
		active session token to be easily determined if the keyspace of
		the token is not sufficiently large.  Attackers can essentially
		"grind" through most possibilities in the token's key space with
		automated brute force scripts.  A token's key space should be
		sufficiently large enough to prevent these types of brute force
		attacks, keeping in mind that computation and bandwith capacity
		increases will make these numbers insufficieint over time.
		</para>

	</sect2>

</sect1>

<sect1>

	<title>Session Management Schemes</title>

	<sect2>

		<title>Session Time-out</title>

		<para>
		Session tokens that do not expire on the HTTP server can allow
		an attacker unlimited time to guess or brute force a valid
		authenticated session token. An example is the "Remember Me"
		option on many retail websites. If a user's cookie file is
		captured or brute-forced, then an attacker can use these
		static-session tokens to gain access to that user's web
		accounts. Additionally, session tokens can be potentially logged
		and cached in proxy servers that, if broken into by an attacker,
		may contain similar sorts of information in logs that can be
		exploited if the particular session has not been expired on the
		HTTP server.
		</para>

	</sect2>

	<sect2>
		<title>Regeneration of Session Tokens</title>

		<para>
		To prevent Session Hijacking and Brute Force attacks from
		occurring to an active session, the HTTP server can seamlessly
		expire and regenerate tokens to give an attacker a smaller window
		of time for replay exploitation of each legitimate token.  Token
		expiration can be performed based on number of requests or time.
		</para>

	</sect2>

	<sect2>

		<title>Session Forging/Brute-Forcing Detection and/or Lockout</title>

		<para>
		Many websites have prohibitions against unrestrained password
		guessing (e.g., it can temporarily lock the account or stop
		listening to the IP address). With regard to session token
		brute-force attacks, an attacker can probably try hundreds or
		thousands of session tokens embedded in a legitimate URL or
		cookie for example without a single complaint from the HTTP
		server. Many intrusion-detection systems do not actively look
		for this type of attack; penetration tests also often overlook
		this weakness in web e-commerce systems.  Designers can
		use "booby trapped" session tokens that never actually
		get assigned but will detect if an attacker is trying to
		brute force a range of tokens. Resulting actions can
		either ban originating IP address (all behind proxy will
		be affected) or lock out the account (potential DoS).
		Anomaly/misuse detection hooks can also be built in to
		detect if an authenticated user tries to manipulate
		their token to gain elevated privileges.
		</para>

	</sect2>

	<sect2>

		<title>Session Re-Authentication</title>

		<para>
		Critical user actions such as money transfer or significant
		purchase decisions should require the user to re-authenticate or
		be reissued another session token immediately prior to
		significant actions.  Developers can also somewhat segment data
		and user actions to the extent where re-authentication is
		required upon crossing certain "boundaries" to prevent some
		types of cross-site scripting attacks that exploit user
		accounts.
		</para>

	</sect2>

	<sect2>

		<title>Session Token Transmission</title>

		<para>
		If a session token is captured in transit through network
		interception, a web application account is then trivially
		prone to a replay or hijacking attack.  Typical web encryption
		technologies include but are not limited to Secure Sockets Layer
		(SSLv2/v3) and Transport Layer Security (TLS v1) protocols in
		order to safeguard the state mechanism token.
		</para>

	</sect2>

	<sect2>

		<title>Session Tokens on Logout</title>

		<para>
		With the popularity of Internet Kiosks and shared computing
		environments on the rise, session tokens take on a new risk. A
		browser only destroys session cookies when the browser thread is
		torn down. Most Internet kiosks maintain the same browser
		thread.  It is therefore a good idea to overwrite session
		cookies when the user logs out of the application.
		</para>

	</sect2>

	<sect2>
		<title>Page Tokens</title>

		<para>
		Page specific tokens or "nonces" may be used in conjunction with
		session specific tokens to provide a measure of authenticity
		when dealing with client requests. Used in conjunction with
		transport layer security mechanisms, page tokens can aide in
		ensuring that the client on the other end of the session is
		indeed the same client which requested the last page in a given
		session. Page tokens are often stored in cookies or query
		strings and should be completely random. It is possible to avoid
		sending session token information to the client entirely through
		the use of page tokens, by creating a mapping between them on
		the server side, this technique should further increase the
		difficulty in brute forcing session authentication tokens.
		</para>

	</sect2>

</sect1>

<sect1>

	<title>SSL and TLS</title>

	<para>
	The Secure Socket Layer protocol or SSL was designed by Netscape and
	included in the Netscape Communicator browser. SSL is probably the
	widest spoken security protocol in the world and is built in to all
	commercial web browsers and web servers. The current version is Version
	2. As the original version of SSL designed by Netscape is technically a
	proprietary protocol the Internet Engineering Task Force (IETF) took
	over responsibilities for upgrading SSL and have now renamed it TLS or
	Transport Layer Security. The first version of TLS is version 3.1
	and has only minor changes from the original specification.
	</para>

	<para>
	SSL can provide three security services for the transport of data to and
	from web services. Those are:
	</para>

	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>Authentication</para>
		</listitem>
		<listitem>
			<para>Confidentiality</para>
		</listitem>
		<listitem>
			<para>Integrity</para>
		</listitem>
	</itemizedlist>

	<para>
	Contrary to the unfounded claims of many marketing campaigns, SSL alone
	does not secure a web application! The phrase "this site is 100% secure,
	we use SSL" can be misleading! SSL only provides the services listed
	above. SSL/TLS provide no additional security once data has left the IP
	stack on either end of a connection. All flaws in execution environments
	which use SSL for session transport are in no way abetted or mitigated
	through the use of SSL.
	</para>

	<para>
	SSL uses both public key and symmetric cryptography. You will often here
	SSL certificates mentioned. SSL certificates are X.509 certificates. A
	certificate is a public key that is signed by another trusted user (with
	some additional information to validate that trust).
	</para>

	<para>
	For the purpose of simplicity we are going to refer to both SSL and TLS
	as SSL in this section. A more complete treatment of these protcols can
	be found in Stephen Thomas's "SSL and TLS Essentials".
	</para>

	<sect2>

		<title>How do SSL and TLS Work?</title>

		<para>
		SSL has two major modes of operation. The first is where the SSL
		tunnel is set up and only the server is authenticated, the
		second is where both the server and client are authenticated. In
		both cases the SSL session is setup before the HTTP transaction
		takes place.
		</para>

		<sect3>

			<title>SSL Negotiation with Server Only Authentication</title>

			<para>SSL negotiation with server authentication only is a nine-step process.</para>

			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ssl_9_step.png" format="PNG"/>
				</imageobject>
				<textobject>
				<phrase>SSL connection setup with only a
				server certificate</phrase>
				</textobject>
			</mediaobject>

			<orderedlist numeration="arabic" spacing="compact">
				<listitem>
					<para>The first step in the process is
					for the client to send the server a
					Client Hello message. This hello
					message contains the SSL version
					and the cipher suites the client
					can talk. The client sends its
					maximum key length details at
					this time. </para>
				</listitem>
				<listitem>
					<para>The server returns the hello
					message with one of its own in which it
					nominates the version of SSL and the
					ciphers and key lengths to be used in
					the conversation, chosen from the choice
					offered in the client hello.</para>
				</listitem>
				<listitem>
					<para>The server sends its digital
					certificate to the client for
					inspection. Most modern browsers
					automatically check the certificate
					(depending on configuration) and warn
					the user if it's not valid. By valid we
					mean if it does not point to a
					certification authority that is
					explicitly trusted or is out of date,
					etc.</para>
				</listitem>
				<listitem>
					<para>The server sends a server done
					message noting it has concluded the
					initial part of the setup
					sequence.</para>
				</listitem>
				<listitem>
					<para>The client generates a symmetric
					key and encrypts it using the
					server's public key (cert). It
					then sends this message to the
					server.</para>
				</listitem>
				<listitem>
					<para>The client sends a cipher spec
					message telling the server all future
					communication should be with the new
					key.</para>
				</listitem>
				<listitem>
					<para>The client now sends a Finished
					message using the new key to determine
					if the server is able to decrypt the
					message and the negotiation was
					successful.</para>
				</listitem>
				<listitem>
					<para>The server sends a Change Cipher
					Spec message telling the client that all
					future communications will be
					encrypted.</para>
				</listitem>
				<listitem>
					<para>The server sends its own Finished
					message encrypted using the key. If the
					client can read this message then the
					negotiation is successfully
					completed.</para>
				</listitem>
			</orderedlist>

		</sect3>

		<sect3>

			<title>SSL with both Client and Server Authentication</title>

			<para>
			SSL negotiation with mutual authentication (client and
			server) is a twelve-step process.
			</para>

			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ssl_12_step.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>SSL connection setup with both client
					and server certificates.</phrase>
				</textobject>
			</mediaobject>

			<para>
			The additional steps are;
			</para>

			<orderedlist numeration="arabic" spacing="compact">
				<listitem>
					<para>4.) The server sends a Certificate
					request after sending its own
					certificate.</para>
				</listitem><listitem>
					<para>6.) The client provides its
					Certificate.</para>
				</listitem><listitem>
					<para>8.) The client sends a Certificate
					verify message in which it encrypts a
					known piece of plaintext using its
					private key. The server uses the client
					certificate to decrypt, therefore
					ascertaining the client has the private
					key.</para>
				</listitem>
			</orderedlist>

		</sect3>

	</sect2>

</sect1>

</chapter>









