<!-- $Id: architectures.xml,v 1.7 2003/08/01 18:58:50 awiesmann Exp $ -->
<chapter id="architectures">
	<chapterinfo>
		<authorgroup>
			<author>
				<firstname>Christopher</firstname>
				<surname>Todd</surname>
			</author>
		</authorgroup>
	</chapterinfo>
	<title>Web Application Architectures</title>
	<para>Early in the history of dynamic web applications, developers, designers, and 
	architects began to realize that complex web applications were no different from 
	complex stand-alone applications, and that the stability and maintainability of a web 
	application depended critically on its architecture.  Furthermore, as web applications 
	became more complex and web interfaces became increasingly graphic design-intensive, 
	a split developed between the types of people involved in the creation of a web application.  
	Web designers often worked with graphical design issues, page layout, user interface 
	design, etc., while web developers worked with the application logic, the processing 
	of web forms, and the interaction of the web application with its data stores (databases, 
	filesystems, and directories).  A mechanism was needed that would allow web designers 
	and web developers to do their own thing without stepping on each other's toes.  Many 
	potential solutions were developed (and are still being developed), but they can all be 
	traced to an architectural pattern developed many years ago:  the Model-View-Controller 
	design pattern.</para>
	<sect1>
		<title>Model-View-Controller (MVC)</title>
		<para>Originally described by the "Gang of Four" (Erich Gamma, Richard Helm, Ralph 
		Johnson, and John Vlissides) in their seminal work Design Patterns: Elements of Reusable 
		Object-Oriented Software, the Model-View-Controller pattern involves separating the 
		three primary duties every program must perform: maintain a model of the application 
		data, decide what data will be displayed (based on user input and application state), 
		and display data to the user.  The MVC pattern has been successfully applied in many 
		programming languages and paradigms, but it works particularly well in Object-Oriented 
		languages such as Java, C++, Python, and Smalltalk.</para>
		<para>The MVC pattern is based on three components: the Controller, the Model, and 
		the View.  The View is responsible for presenting data to the user in an appropriate 
		manner.  The Model is responsible for processing the data and maintaining the application 
		state and an internal representation of the application data.  The Controller is responsible 
		for determining what actions need to take place as a result of a particular user input (or 
		change in the applications internal state).  By clearly separating these three aspects of 
		an application, it becomes easier for web designers to concentrate solely on the user 
		interface, without having to worry about screwing up the data processing, and it allows 
		developers to concentrate on the application logic and data storage without having to 
		worry about screwing up the presentation layer.</para>
	</sect1>
	<sect1>
		<title>Model 1 and Model 2</title>
		<para>In the early days of Java Server Pages (JSP), two approaches to JSP design were 
		described and named (somewhat uncreatively) Model 1 and Model 2.  Model 1 JSP page designs
		encapsulated the View and the Controller parts of the MVC pattern within the same JSP page 
		(or pages), and the data underlying the application (the Model) was represented using JavaBeans.
		While this design was originally discussed only in the context of JSP pages, a great many web
		developers will recognize this pattern from their own work in Active Server Pages, PHP, Perl CGI 
		scripts, or similar scripting page-based web application development systems.  The major problem 
		with this approach, of course, is that before too long the script page becomes unmanageably 
		complex, with HTML-based display code being intermingled with data processing code, wedged in 
		between application flow-processing code.  For all but the simplest web applications, Model 1 is 
		frowned upon as a sustainable design approach.
		</para>
		<para>Model 2 is essentially the MVC pattern, with a servlet acting as the Controller, and 
		JSP pages acting as the View, with JavaBeans acting as the model.  While this approach does
		not completely hide programming details from page designers, it is a vast improvement over Model 1.
		The result is an application that is well designed, maintainable, and which separates (to a great extent) 
		the duties assigned to page designers and web developers.
		</para>
	</sect1>
	<sect1>
		<title>Applying these architectures to security</title>
		<para>One might argue that the primary advantage to using design patterns is to make code easier
		to understand, easier to modify, and easier to maintain.  The end result is software that works more 
		reliably and is easier to fix when bugs are discovered.  So what does any of this have
		to do with web application security?  It has a lot to do with security.  Well designed code is less 
		likely to contain fundamental design-related security flaws. Code that is easy to understand because 
		it is designed well is less likely to be screwed up by new developers on the team.  Code that is easier 
		to maintain will contain fewer bugs, and bugs are the primary cause of many security problems. 
		</para>
		<para>Furthermore, the web application architectures discussed above can improve web 
		application security by clearly delineating the paths through which application data travel, 
		how they are processed in each step, and how they are finally displayed to the user.  
		Thinking of each portion of the application as a "boundary" allows a separation of responsibilities 
		among developers, and provides tremendous flexibility in determining how best to secure the 
		application and its data at that point in the processing.  For example, it has been stated repeatedly 
		throughout this guide that the single most important security-related task a developer must 
		perform is to filter user input.  But deciding what to filter out is dependant on how the data is 
		about to be processed.  For example, if the data is about to be used in a database query, then 
		you would want to filter characters such as ' and - that can be used in SQL injection attacks.  
		But if the data is about to be displayed to the user, then filtering ' and - might mean that Cynthia 
		O'Neill-Jones is going to make a call to customer support to ask why her name is spelled wrong.
		</para>
		<para>Applying appropriate data processing at various times is greatly facilitated by the use of 
		MVC and similar design patterns, because the Model knows how to handle data as it moves through
		the various stages of processing within the application.  This kind of modularity is a hallmark of good
		software design, and well designed software has a much better chance of being secure than poorly
		designed software.
		</para>
		<para>An additional advantage of the MVC pattern is that the Controller acts as a gate-keeper, 
		making it a natural candidate for handling session management, authentication and authorization.  
		Since all requests will go through the Controller before being sent to the appropriate View or Model 
		component, developers can determine whether the request is part of a session, and if so, whether 
		the user that correpsonds to that session is authorized to make that request.  If the request is not
		part of a session, the Controller can return the login page.
		</para>
	</sect1>
	<sect1>
		<title>MVC Frameworks</title>
		<para>The first time a web application developer sees how useful the MVC pattern can be in 
		designing a web application, it often feels like an epiphany.  The joyous feeling of understanding
		wears off pretty quickly when the developer realizes that understanding an idea in the abstract,
		and implementing the idea in the real, are two different things, and implementation is often more 
		difficult than understanding.  The amount of work required to implement a robust, easy to use MVC
		based application can seem daunting, and this process must be repeated for each new web application
		you develop.  Given that laziness is a virtue for most programmers, a number of groups of open-source 
		software developers have created generic, reusable, MVC-based web application development frameworks.
		</para>
		<sect2>
			<title>Jakarta Struts</title>
			<!-- I need to include the links for these -->
			<para>Jakarta Struts is probably the most well known and widely adopted of the MVC frameworks.  Based
			on Java Servlet and Java Server Pages technologies, it is most commonly used with the Tomcat servlet container,
			but it can be used with any compliant servlet container.  It is highly flexible and configurable, capable of 
			using practically any kind of data store for maintaining the Model.
			For the View component, it is flexible enough to support JSP pages, the Velocity templating system, XSLT, 
			and more.  The basic Controller is an ActionServlet that uses ActionMappings to map request URIs to particular
			Action classes.  These Action classes (part of the Model) then process the request, act appropriately on the
			application data, and return the result to the View.
			</para>
		</sect2>
		<sect2>
			<title>Maverick and derivatives</title>
			<para>Maverick is an MVC-based web application development framework that is similar in design to Struts, 
			but designed to be a little simpler and easier to use.  Maverick is based on Java and J2EE, but has also been
			ported to .NET (Maverick.NET) and PHP (Ambivalence).
			</para>
		</sect2>
		<sect2>
			<title>OWASP .NET MVC</title>
			<para>OWASP is in the process of creating an MVC framework for use on the .NET development
			platform.  If you would like to contribute, contact Mark Curphey. <!--  Substitute an appropriate URL or email here -->
			</para>
		</sect2>
		<sect2>
			<title>php.MVC</title>
			<para>On it's website at http://www.phpmvc.net/, php.MVC is described like this:</para>
			<para>php.MVC implements the Model-View-Controller (MVC) design pattern, and encourages application design based on the Model 2 paradigm. This design model allows the Web page or other contents (View) to be mostly separated from the internal application code (Controller/Model), making it easier for designers and programmers to focus on their respective areas of expertise.</para>
			<para>The framework provides a single entry point Controller. The Controller is responsible for allocating HTTP requests to the appropriate Action handler (Model) based on configuration mappings.</para> 
			<para>The Model contains the business logic for the application. The Controller then forwards the request to the appropriate View component, which is usually implemented using a combination of HTML with PHP tags in the form of templates. The resulting contents are returned to the client browser, or via another protocol such as SMTP.</para> 
			<para>php.MVC is a PHP port of Jakarta Struts. It currently supports many features of Struts, including declarative application configuration via the XML digester. For example, mappings from the various Action business logic components to appropriate results pages can be specified declaratively in the XML configuration file</para>
		</sect2>
	</sect1>
</chapter>
