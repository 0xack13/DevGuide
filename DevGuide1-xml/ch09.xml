<!-- $Id: ch09.xml,v 1.4 2002/09/10 23:08:36 mshill Exp $ -->
<chapter label="9">

<title>
Event Logging
</title>

<para>
Logging is essential for providing key security information about a web
application and its associated processes and integrated technologies. Generating
detailed access and transaction logs is important for several reasons:
</para>

<itemizedlist mark="opencircle" spacing="compact">
	<listitem>
		<para>
		Logs are often the only record that suspicious behavior is
		taking place, and they can sometimes be fed real-time directly
		into intrusion detection systems.
		</para>
	</listitem>

	<listitem>
		<para>
		Logs can provide individual accountability in the web
		application system universe by tracking a user's actions.
		</para>
	</listitem>

	<listitem>
		<para>
		Logs are useful in reconstructing events after a problem has
		occurred, security related or not.  Event reconstruction can
		allow a security administrator to determine the full extent of
		an intruder's activities and expedite the recovery process.
		</para>
	</listitem>

	<listitem>
		<para>
		Logs may in some cases be needed in legal proceedings to prove
		wrongdoing.  In this case, the actual handling of the log data
		is crucial.
		</para>
	</listitem>
</itemizedlist>

<para>
Failure to enable or design the proper event logging mechanisms in the web
application may undermine an organization's ability to detect unauthorized
access attempts, and the extent to which these attempts may or may not have
succeeded.
</para>

<sect1>
	<title>
	What to Log
	</title>

	<para>
	On a very low level, the following are groupings of logging system call
	characteristics to design/enable in a web application and supporting
	infrastructure (database, transaction server, etc.).  In general, the
	logging features should include appropriate debugging information such
	as time of event, initiating process or owner of process, and a detailed
	description of the event.  The following are recommended types of system
	events to log in the application:
	</para>

	<itemizedlist mark="opencircle" spacing="compact">
		<listitem>
			<para>
			Reading of data
			</para>
		</listitem>

		<listitem>
			<para> 
			Writing of data
			</para>
		</listitem>

		<listitem>
			<para>
			Modification of any data characteristics should be
			logged, including access control permissions or labels,
			location in database or file system, or data ownership.
			</para>
		</listitem>

		<listitem>
			<para>
			Deletion of any data object should be logged
			</para>
		</listitem>

		<listitem>
			<para>
			Network communications should be logged at all points,
			(bind, connect, accept, etc.)
			</para>
		</listitem>

		<listitem>
			<para>
			All authentication events (logging in, logging out,
			failed logins, etc.)
			</para>
		</listitem>

		<listitem>
			<para>
			All authorization attempts should include time,
			success/failure, resource or function being authorized,
			and the user requesting authorization.
			</para>
		</listitem>

		<listitem>
			<para>
			All administrative functions regardless of overlap
			(account management actions, viewing any user's data,
			enabling or disabling logging, etc.)
			</para>
		</listitem>

		<listitem>
			<para>
			Miscellaneous debugging information that can be enabled
			or disabled on the fly.
			</para>
		</listitem>
	</itemizedlist>
</sect1>

<sect1>
	<title>
	Log Management 
	</title>

	<para>
	It is just as important to have effective log management and collection
	facilities so that the logging capabilities of the web server and
	application are not wasted.  Failure to properly store and manage the
	information being produced by your logging mechanisms could place this
	data at risk of compromise and make it useless for post mortem security
	analysis or legal prosecution. Ideally logs should be collected and
	consolidated on a separate dedicated logging host. The network
	connections or actual log data contents should be encrypted to both
	protect confidentiality and integrity if possible.
	</para>

	<para>
	Logs should be written so that the log file attributes are such that
	only new information can be written (older records cannot be rewritten
	or deleted).  For added security, logs should also be written to a write
	once / read many device such as a CD-R.
	</para>

	<para>
	Copies of log files should be made at regular intervals depending on
	volume and size (daily, weekly, monthly, etc.). .). A common naming
	convention should be adopted with regards to logs, making them easier to
	index. Verification that logging is still actively working is
	overlooked surprisingly often, and can be accomplished via a simple
	cron job!
	</para>

	<para>
	Log files should be copied and moved to permanent storage and
	incorporated into the organization's overall backup strategy. Log files
	and media should be deleted and disposed of properly and incorporated
	into an organization's shredding or secure media disposal plan. Reports
	should be generated on a regular basis, including error reporting and
	anomaly detection trending.
	</para>

	<para>
	Logs can be fed into real time intrusion detection and performance and
	system monitoring tools. All logging components should be synced with a
	timeserver so that all logging can be consolidated effectively without
	latency errors. This time server should be hardened and should not
	provide any other services to the network.
	</para>
</sect1>
</chapter>
