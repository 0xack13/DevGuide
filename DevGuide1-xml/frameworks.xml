<!-- $Id: frameworks.xml,v 1.13 2003/07/19 14:07:55 awiesmann Exp $ -->
<chapter id="frameworks">
	<chapterinfo>
		<authorgroup>
			<author>
                                <firstname>Adrian</firstname>
                                <surname>Wiesmann</surname>
                        </author>
		</authorgroup>
	</chapterinfo>
	<title>Web Application Frameworks</title>
	<sect1>
		<title>Web Application Frameworks</title>
		<para />
	</sect1>
	<sect1>
		<title>Microsoft .NET</title>
		<sect2>
			<title>An Introduction to the .NET Framework</title>
			<para>.NET is the name given to a range of technologies that use the .NET Framework. The .NET Framework is an object orientated run time, suitable for writing applications of all types. The major reason for choosing ASP.NET over ASP or other Windows-centric coding models is the added dollops of security, freedom of language choice, huge  development time improvements, among many other features. As this guide is not an advocacy guide, please visit Microsoft's MSDN .NET site if you need more information.</para>
			
			<para>This chapter is about discussing the safer use of ASP.NET, .NET framework security features, web services, and lastly, how to safely interact with data sources using ADO.NET. This chapter is no development tutorial about how to write managed code for the Win32 platform. This chapter covers in the actual version of the guide the general overview only.</para>
			
			<para>
			Because ASP.NET and the other technologies sit directly ontop of the .NET framework, some security specialities and mechanisms are shared within the framework. This is the reason why we will look at the .NET framework in the beginning of this chapter.
			</para>
			
			<para>
			For it is royal pain to read and write the whole name of the .NET framework all the time through this chapter, we decided to just talk about the framework during this chapter while meaning the .NET framework if not stated differently. 
			</para>
		</sect2>
		<sect2>
			<title>The .NET Framework</title>
			<para>
			Programs running in the framework are either managed or unmanaged code. Unmanaged code represents conventional programs which could also run outside the framework. These programs can not benefit of the features of the framework. Managed code on the other side is code which needs the framework vor execution.
			</para>
			<para>
			The framework behaves generally like any another virtual machine: It executes code unter the control of the runtime. While being the engine executing the code, it can provide functionality like memory management, just-in-time compilation and security services.  
			</para>
		</sect2>
		<sect2>
			<title>The .NET Framework Security</title>
			<para>
			Many Operating Systems and Applications use a user and role based security model. The .NET framework is working similar. It is working with Principals and Identities. Additionally to this method it also provides security on code which is called evidence-based or code access security through most of Microsoft's papers. 
			</para>
			<para>
			Using code access security a program can behave differently on multiple platforms. This means a program can allow the access to a local file if it is run locally. Even the user would theoretically have access to that file, the same program can deny the access to the same local file, if the program - as example - would be run from the internet. This mechanism was built into the .NET framework to allow to satisfy the developers need for security in mobile code.
			</para>
			<para>
			While the framework includes some security mechanisms - into which we will look some more in a few lines - the framework also relies on the security of the operating system it sits upon. The framework actually is allowing some more detailed security than the plain OS.
			</para>
		</sect2>

		<sect2>
			<title>ASP.NET</title>
			<para>
			ASP.NET in contrast to ASP has a few similarities, but is way beyond ASP. ASP.NET is built ontop the .NET framework and benefits from all those features in the framework. Besides that ASP.NET needs the Internet Information Server 6, Microsofts Webserver for functioning.
			</para>
		</sect2>
		
		<sect2>
			<title>ASP.NET Security</title>
			<para>
			Because ASP.NET sits ontop the framework it can use all the security features and modules the framework offers. It is therefore absolutely a must for every developer working with ASP.NET security to fully understand the various security subsystems interaction for not implementing backdoors or security holes.
			</para>
			<sect3>
				<title>Authentication</title>
				<para>
				ASP.NET authentication is done with authentication providers. These providers are code modules which contain all the necessary code to authenticate users credentials. While everybody can write their own authentication provider, three of them are preshipped with ASP.NET out of the box.
				</para>
				<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>
					Forms authentication
					</para>
					<para>
					This is a simple HTML form based method in which a user sends her credentials in a HTML form to the server. The server issues a Cookie and every consequent request is then validated with this cookie. 
					</para>
				</listitem>
				<listitem>
					<para>
					Passport authentication
					</para>
					<para>
					Passport authentication is the provider which interfaces with Microsofts Passport service. This service is quite controversial. Look in the appendix for further informations and decide yourself.
					</para>
				</listitem>
				<listitem>
					<para>
					Windows authentication
					</para>
					<para>
					This authentication mechanism is most probably the most used one. It knows 3 methods which are basic, digest and Integrated Windows Authentication. The last of these three needs a valid windows account to allow access. After a successful authentication ASP.NET uses the authenticated identity to authorize access. Using the basic method means that every authentication request on any system will run under the account which ASP.NET is running under. 
					</para>
				</listitem>
				</itemizedlist>

			</sect3>
			<sect3>
				<title>Authorization</title>
				<para>
				In ASP.NET there are two ways of determine whether a user should be granted the requested access to a requested ressource:
				</para>
				<itemizedlist mark="opencircle" spacing="compact">
				<listitem>
					<para>
					File authorization
					</para>
					<para>
					This authorization module is active when the Window authentication is used. The module uses some ACL to check if a user should have access to a .aspx or .asmx file. Of course the developer can use impersonation to fiddle around some with this module. Impersonation is discusses some later.
					</para>
				</listitem>
				<listitem>
					<para>
					URL authorization
					</para>
					<para>
					This module is active all the time. It basically matches URL's or parts of them to users and roles (groups). One can configure therefore to either allow or deny access on an url to a given role or user. The normal behaviour is that these conditions are also for all possible subdirectories, except they are defined differently. The rights can either be granted or revoked with &lt;allow&gt; or &lt;deny&gt;.
					</para>
				</listitem>
				</itemizedlist>
			</sect3>
			<sect3>
				<title>Impersonation</title>
				<para>
				...
				</para>
			</sect3>
		</sect2>
		
		<sect2>
			<title>ADO.NET</title>
			<para>
			Working with the framework and a database (SQL Server) you may want to use ADO.NET. ADO.NET is the latest evolution of Data Access technology by Microsoft. You may want to know that ADO is designed to work with disconnected record sources, something which is seen often within web application development.
			</para>
		</sect2>
			
		<sect2>
			<title>ADO.NET Security</title>
			<para>
			</para>
			<sect3>
				<title>Authentication</title>
			</sect3>
			<sect3>
				<title>Authorization</title>
			</sect3>
			<sect3>
				<title>Impersonation</title>
			</sect3>
			<sect3>
				<title>Secure Communication</title>
			</sect3>
			<sect3>
				<title>Input Validation</title>
				<para />
			</sect3>
			<sect3>
				<title>Stored Procedures and Prepared Statements</title>
				<para />
			</sect3>
		</sect2>
		
		<sect2>
			<title>Best Practices</title>
			<para>
			...
			</para>
		</sect2>
		
	</sect1>
	<sect1>
		<title>J2EE</title>

	<para>The Java 2 Enterprise Edition (J2EE) is a framework built on Java that provides a standardized solution to the common infrastructure issues of enterprise applications.	
	</para>

	<sect2>

	<title>J2EE overview</title>
	<para>
	J2EE is a collection of APIs. JSP, EJB, JDNI, JDBC, JavaMail, JMS, JTS
	</para>

	<para>Further reading</para>
	<para>
	<ulink url="http://java.sun.com/j2ee/">Sun J2EE Official Home</ulink>
	</para>
	</sect2>

	
	<sect2>
	<title>
	J2EE security model
	</title>
	<para>
	The J2EE security model builds on the safeguards of Java and adds additional measures for specifying application security.

	> Declarative vs. programmatic security
	> security roles
	> method permissions
	> access control

	</para>
	<para>Further reading</para>
	</sect2>


	<sect2>
	<title>J2EE in practice</title>
	<para>
	Putting all J2EE components together in a cohesive and secure manner can be a difficult task. Not every application requires all J2EE components and technologies. Smaller projects might not warrant some of the more complex component types. Some of the components can be implemented and used by themselves, such JSP and JMS. Others require application servers, such as BEA Weblogic and IBM Websphere, that integrate most if not all J2EE components. 
	</para>
	<para>
	Although Java mitigates some of the large security problems associated with programming like buffer overflows, applications are still vulnerable to poor design or programming mistakes. Java coding practices  and mistakes are addressed in a separate chapter in the guide as well as by <attribution><xref linkend="Oaks01" /></attribution>.  This section consists of design patterns and strategies for building secure J2EE applications with consideration to the general security guidelines mentioned early in the guide and the OWASP Top Ten mistakes. We will not deal with design decisions like when to use enterprise beans and which types. 
	</para>


	<sect3>
	<title>	Best Practices (or what tends to be most effective)</title>
	<para>
	Information security is lot of common sense. In 1975, Jerome Saltzer and Michael Schroeder wrote some design principles that still apply today. Most of them overlap with the guidelines described in the guide. They are: 
		</para>
		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				least priviledge (need to know basis of information disclosure)
				</para>
			</listitem>
			<listitem>
				<para>
				economy of design (keep it simple)
				</para>
			</listitem>
			<listitem>
				<para>
				complete mediation (every access point should be verified for proper authentication)
				</para>
			</listitem>
			<listitem>
				<para>
				open design (do not rely on security by obscurity)
				</para>
			</listitem>
			<listitem>
				<para>
				separation of priviledges  
				</para>
			</listitem>
			<listitem>
				<para>
				least common mechanism (compartmentation)
				</para>
			</listitem>
			<listitem>
				<para>
				psychological acceptability (make security measures easy to use or they won't be used)
				</para>
			</listitem>
		</itemizedlist>

	<para>
	In the context of J2EE, these guidelines can be best addressed with design patterns. Design patterns describe general solutions to a specific problem domain. They are commonly used in software engineering as well as other engineering disciplines such as architecture. 
	</para>
	</sect3>
	<sect3>
		<title>
		Common Pitfalls (or the most popular ways of screwing up)
		</title>
		<para>
		Many reputable organizations publish various top ten or twenty security vulnerabilities and mistakes. For this section the OWASP Top Ten Vulnerability list is the most appropriate.  Here are the most critical web application security vulnerabilities: 
		</para>
		<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Unvalidated parameters
				</para>
			</listitem>
			<listitem>
				<para>
				Broken Access Control
				</para>
			</listitem>
			<listitem>
				<para>
				Broken Account and Session Management
				</para>
			</listitem>
			<listitem>
				<para>
				Cross Site Scripting (XSS)
				</para>
			</listitem>
			<listitem>
				<para>
				Buffer Overflows
				</para>
			</listitem>
			<listitem>
				<para>
				Command Injection Flaws
				</para>
			</listitem>
			<listitem>
				<para>
				Error Handling Problems
				</para>
			</listitem>
			<listitem>
				<para>
				Insecure Use of Cryptography
				</para>
			</listitem>
			<listitem>
				<para>
				Remote Administration Flaws
				</para>
			</listitem>
			<listitem>
				<para>
				Web and Application Server Misconfiguration
				</para>
			</listitem>
		</itemizedlist>


		<sect4>
			<title>
			1 - Unvalidated Parameters
			</title>
			<para>
			Parameters such as those found in forms, cookies, HTTP request are vulnerable to tampering as they are coming from a computer outside our control. The safeguard to reduce this risk is data validation. 

			Where do we validate? Validation can be performed on the client with scripting such as JavaScript or on the server. Validation is the most secure performed on the server as the client could disable any checking mechanism. Yet it is common to validate on the client side as well for performance reasons. Typically, a strategy mixing the two yields good results. The client side could perform basic checks while the server could handle more complex checks. These checks are in addition to the ones performed on the client. For example, checking for an empty field  with a client side script will save your server from processing an incorrect request. However, the server also has to check for empty fields along with other checks on the client becuase we don't control the client. The client's browser could have scripting disabled. HTTP requests can be generated automatically with proxy tools or scripts. Don't assume all input will come from a browser, an attacker can even use telnet to send requests to your server. Client validation is for performance and usability, not security. Validation should also be performed on the output. 
			</para>
			<para>
			What do we validate against?
			</para>
			<para>
			All user input is not to be trusted and must be validated. This includes hidden fields and anything a malicious client can manipulate. There are a few types of validation: 
			</para>
			<para>
			1) coarse grained data formatting
			Data formatting checks for things like missing felds (that are required or null), data types, data ranges, allowed values. Java uses Unicode (an extended character set) so perform canonicalization prior to validation. Check against expected values. Defang all strings. This removes any potentially dangerous HTML or scripting tags from a text field. 
			</para>
			<para>
			2) fine grained application specific
			This type of validation invokes business logic to check, for example, if the zip code entered is located in the state submitted. 
			</para>
			<para>
			In general, validation should be performed against the allowed values and everything else should be discarded. 
			</para>
			<para>
			How do we validate?
			</para>
			<para>
			The logic to perform the validation can run in the form by a specific JSP, servlet, EJB or in a centralized manner. A centralized approach is recommended even for small applications. The application's documentation should delineate what type of input it will expect.  Keeping this information in a central place will simplify and administration and enforce consistent validation. 
			</para>
			<para>
			The coarse grained and regular expressions validation can be accomplished using freely available solutions. Jason Hunter wrote a ParameterParser class for his book on Servlets. A more comprehensive solution is the Jakarta Validator Framework, originally part of Struts. The upcoming OWASP Filters project also deals with this problem domain.  Application specific logic is by definition custom and it should also be centralized. Look at the Session Facade pattern or the Strategy pattern from [1].
			</para>
			<para>
			Further Reading:
			</para>
			<para>
			<ulink url="http://www-106.ibm.com/developerworks/library/j-ejb1217.html?n-j-12192">EJB best practices: The fine points of data validation, from IBM DeveloperWorks</ulink>
			</para>
			<para>
			<ulink url="http://www.javaworld.com/javaworld/jw-09-2000/jw-0908-validation.html">Validation with Java and XML Schema, from Javaworld</ulink>
			</para>
			<para>
			<ulink url="http://www.onjava.com/lpt/a/2912">Using the Validator Framework with Struts</ulink>
			</para>
			<para>
			<ulink url="http://www.servlets.com/cos/javadoc/com/oreilly/servlet/ParameterParser.html">Jason Hunter's ParameterParser</ulink>
</para>

		</sect4>
		<sect4>
			<title>
			2 - Broken Access Control
			</title>
			<para>
			The general guidelines for this domain are covered in the access control chapter of this guide.  Some useful design patterns here are Single Access Point and Role pattern, from J2EE Designs Applied. Access control uses a mixture of components. Controller servlets, deployment descriptors  <![CDATA[<security-constraint>]]> <![CDATA[</security-constraint>]]> tags), method permissions, programmatic security (using the isUserInRole() method), database security, single-sign on, etc. 
			</para>
			<para>
			The Struts framework incorporates a simple and flexible Controller that should be adequate for most applications. Many vendors have comprehensive solutions to this problem. Just like data validation, unless your application has esoteric requirements it is recommended to avoid building access control from scratch. There are many aspects besides ACLs that would require building. How do you mitigate forceful browsing or duplicate form submissions? Struts and most packages use a synchronizer token in the user's session that they compare against. If the user submits a token different than that expected, it may mean he or she may have hit the back or the reload button. 
			</para>
			<para>
			Further Reading:
			</para>
			<para>
			EJB Tier Security
			http://java.sun.com/j2ee/1.4/docs/tutorial/doc/Security7.html#79857
			</para>
			<para>
			Java Tip 136: Protect Web application control flow
			http://www.javaworld.com/javaworld/javatips/jw-javatip136.html
			</para>
		</sect4>		
		<sect4>
			<title>
			3 - Broken Account and Session Management
			</title>
			<para>
			Session management is discussed in the OWASP guide. We can save session state on the client, using hidden form fields, cookies or even saving parameters in the URI.  The advantages with these techniques is simplicity and scalability. Large session objects will use your server memory exponentially. Load balancing across multiple servers requires session state replication and its difficult to do with thousands of large session objects. However, we have the same security implications as we do in data validation. Saving state on an untrusted client introduces many problems. It is possible to use encryption to mitigate some of these problems but in general the complexity and resource cost is not worthwhile for applications that deal with a large amounts of session data. 
			</para>
			<para>
			So for small and simple applications, saving session on the client would be reasonable. For most applications, its recommended to save this information on the server. J2EE offers a few methods of doing so:
			</para>
			<para>
			HttpSession object
			This is a simple and widely used approach. Most application servers can be persist and replicate this data across mulitple servers using memory replication, or the file system or a database. One disadvantage with this approach is the limitation to web clients. If your application supports Java clients (using Swing) or wireless devices, another session manager would need to be used.
			</para>
			<para>
			Stateful session beans
			Session beans can accomodate more functionality and flexibility and thus they are generally slower and more complex to write. They can also be persisted and replicated by most application servers.  
			</para>
			<para>
			Regardless of the the method used, the session state on the server is associated with a user by some type of session id. Application servers deal with this session tracking by sending a cookie with the id or by appending it on the URL, such as the example below:
			</para>
			<programlisting>
http://www.aa.com/apps/travelInformation/TravelInformationHome.jhtml;jsessionid=KQ4ZJQTPDV423EAJJNFSNAMQBFFU4LTT?anchorEvent=false
			</programlisting>
			<para>
			These session ids are the target of many attacks and threats: interception (sniffing), prediction, session fixation and session id brute force. None of these are Java specific. Some countermeasures are hashing the ids (using SHA1 or MD5).
			</para>
			<para>
			Further reading:
			</para>
			<para>
			Maintaining Client State
			http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/Servlets11.html#63281
			</para>
			<para>
			Session Fixation Vulnerability in Web-based Applications
			http://www.acros.si/papers/session_fixation.pdf
			</para>
			<para>
			Session ID Brute Force Exploitation
			http://www.blackhat.com/presentations/bh-usa-02/endler/iDEFENSE%20SessionIDs.pdf
			</para>
			<para>
			OWASP Authentication and Session Management
			http://www.owasp.org/asac/auth-session/replay.shtml
			</para>
		</sect4>	
		<sect4>
			<title>
			4 - Cross site scripting (XSS)
			</title>
			<para>
			Cross site scripting is discussed in the OWASP guide.  Web sites dynamically generating content are vulnerable to this class of attacks. Only static HTML files are not vulnerable. The J2EE safeguards against this threat are in data validation. Defang all parameters of HTML tags such as <![CDATA[<script>]]>.  Cookie data encryption is another countermeasure to cookies being leaked to an attacker. Single Sign On solutions can also make XSS attacks more difficult to detect. 
			</para>
			<para>
			Further Reading:
			</para>
			<para>
			Cross-site scripting
			http://www-106.ibm.com/developerworks/security/library/s-csscript/?dwzone=security
			</para>

		</sect4>	
			<sect4>
			<title>
			5 - Buffer Overflows
			</title>
			<para>
			Buffer overflows are a big problem for application security. Becuase Java does not support pointers, much less their manipulation, Java programs are theorically not vulnerable to this threat. In practice this attack is unlikely but possible. A JVM or the application server your J2EE application  is running might contain a buffer overflow, if they are not written in Java. That is unlikely today as well.  Native code invocation via JNI, especially of C program is still a large risk.
			</para>
		</sect4>	
		<sect4>
			<title>
			6 - Command Injection Flaws  
			</title>
			<para>
			Command injections can happen anytime a J2EE makes a call to an external system, like a database (via JDBC), another application (via JNI, JavaMail, etc) or the operating system (via java.lang.Runtime.exec). JDBC PreparedStatements and database stored procedures can mitigate against this threat. It is also flexible enough so you don't need to create dynamic queries. If you do create dynamic queries, row level security (sucas Oracle VPD) might be a last countermeasure. Careful data validation is the first defense. 
			</para>
			<para>
			If your application uses bean managed persistence (BMP) consider using the Data Access Object pattern, from Core J2EE Patterns. This pattern abstracts and encapsulates your data sources into a centralized layer. 
			</para>
			<para>
			Further Reading
			</para>
			<para>
			<ulink url="http://www.sqlsecurity.com/DesktopDefault.aspx?tabindex=2&amp;tabid=3">SQL Injection FAQ</ulink>
			</para>
		</sect4>
		<sect4>
			<title>
			7 - Error Handling Problems
			</title>
			<para>
			Error handling leaks information that an attack might exploit. Although by itself it is not a large risk, error handling is commonly poorly implemented. Some general best practices:
			</para>
	<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Draft error message dislosure strategy. This should be part of the application security policy and documentation. 
				</para>
			</listitem>
			<listitem>
				<para>
				Centralize error reporting and establish a error hierarchy and mitigation action. Some errors should simply be logged, other errors should email or page someone. 
				</para>
			</listitem>
			<listitem>
				<para>
				The user should be redirected with an error page that give the opportunity for comment and reporting.  	
				</para>
			</listitem>
			</itemizedlist>
			<para>
			J2EE handles errors in a few ways. At the logic tier, the Java try-catch block is the fundamental way to handle  exceptions. A common problem here is not catching the exception, which will propagate to the application server. Most application server's default action is to display the exception and stack trace to the user. Another common mistake is catching all exceptions with one handlier (ie java.lang.Exception) instead of dealing with the specific exception individually. It is similar to having a single Exception class to handle with all exception. This is not optimal for an enterprise application. By the same token, a long hierarchy of specific exception classes is also not recommended due to complexity. A handful of exception categories should be used.
			</para>
			<para>
			Java Server Pages have built-in support for error handling. Once any uncaught error has occured, the processing will forward to another JSP page defined in the errorPage attribute. 
			</para>
			<para>
			Log4j is a great J2EE logging package widely used in web applications. Sun's java.util.logging API was based on the log4j approach. The levels of logging supported are: debug, info, warn, error and fatal. You can add additional levels but its not recommended, for the same reasons to avoid a large hierachy of complex exceptions. 
			</para>
			
			<para>
			Further reading:
			</para>
			<para>
			Build Flexible Logs with log4j
			http://www.onjava.com/lpt/a/2525
			</para>
		</sect4>
		<sect4>
			<title>
			8 - Insecure Use of Cryptography 
			</title>
			<para>
			A reading the cryptography and SSL chapters provide the foundation of this section. Cryptograpy is not an intuitive topic and hence it can be easily misunderstood. Some of the most common mistakes:
			</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
				<para>
				Insecure storage of keys, certificates and passwords.
				Number seven of Microsoft's top ten immutable security laws state: "encrypted data is only as secure the decryption key".  Consider using a hardware security module for key management if your budget allows. Rainbow,  http://www.rainbow.com/cryptoswifthsm/ and ncipher http://www.ncipher.com/nshield/ are some vendors in this space
			</para>
			</listitem>
			<listitem>
			<para>
			Improper storage of secrets in memory.
			J2EE applications run on a trusted server that you control so its not worthwhile in most cases to securely store sensitive application data in memory.  Although the threat remains, the risk is small and the performance hit in mitigating it is significant.   	</para>
			</listitem>
			<listitem>
				<para>
			Poor sources of randomness.
			Randomness or entropy is an important element in a number of cryptographic functions. True sources of randomness remains a computer science problem. You can purchase a hardware random number generator for higher entropy. Java uses a pseudo-random number generator (PRNG) found in  java.security.SecureRandom. Sun's default provider for randomness is SHA1 although some operating systems also provide a source of entropy (ie /dev/random)
			</para>
			</listitem>
			<listitem>
			<para>
			Poor choice of algorithm.
			A common mistake is mistaking enconding for encryption. Remember if a key is not required you are not using encryption! There are a lot of algorithms and acronyms and its sometimes difficult to keep track of them all. The table below illustrates the most common algorithms and what they do.
			</para>

<table>
<title>crypto algorithms demystified</title>
<tgroup cols="5">

<thead>
<row>
<entry>algorithm</entry>
<entry>encryption</entry>
<entry>hashing</entry>
<entry>digital signature</entry>
<entry>key distribution</entry>
</row>
</thead>
<tbody>
<row>
<entry>RSA</entry>
<entry>X</entry>
<entry></entry>
<entry>X</entry>
<entry>X</entry>
</row>
<row>
<entry>ECC</entry>
<entry>X</entry>
<entry></entry>
<entry>X</entry>
<entry>X</entry>
</row>
<row>
<entry>Diffie-Helman</entry>
<entry></entry>
<entry></entry>
<entry></entry>
<entry>X</entry>
</row>
<row>
<entry>El Gamal</entry>
<entry></entry>
<entry></entry>
<entry>X</entry>
<entry>X</entry>
</row>
<row>
<entry>DES and 3DES</entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>Blowfish</entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>IDEA</entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>RC4</entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>SAFER</entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>MD2, MD4, MD5</entry>
<entry></entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>SHA</entry>
<entry></entry>
<entry>X</entry>
<entry></entry>
<entry></entry>
</row>
<row>
<entry>DSA</entry>
<entry></entry>
<entry></entry>
<entry>X</entry>
<entry></entry>
</row>
</tbody>
</tgroup>
</table>

<para>
So when do you use these? As discussed in the cryptography section, the purpose of cryptography is to provide confidentiality, integrity and authenticity. So if you encrypt something, you have confidentiality. If you hash something, you have integrity. If you sign something (digitally), you have authentication and integrity. You can also sign and encrypt in which case you'll have confidentiality, integrity and authenticity. Encoding algorithms like base64 or ROT13 do not provide security, at best they provide obfuscation. 
</para>
<para>
The most common attacks on cryptographic system is not cryptanalysis but key exchange and management issues. Man in the middle attacks are very common.

</para>
			</listitem>
			<listitem>
				<para>
				 Failure to encrypt critical data.
To be able to encrypt critical data one must identify it and perform some type of risk analysis. Things like encrypting user passwords and credit card numbers are obvious. Other things are less obvious. A good practice is to hash the user's password recovery questions (such as their mother's maiden name). All major databases support encryption at the row level. Some offer encryption at the file system in case the operating system of the database server is compromised. 
				</para>
			</listitem>

			<listitem>
				<para>
Attempting to invent a new encryption algorithm. 
It is recommended in general to avoid writing your own components when there exists stable and mature alternatives. This is especially critical in this domain. The Java Cryptography Extension (JCE) and JCA (Java Cryptographic Architecture) allows you to plug into your application the major cryptographic standards easily. Please do not write your own encryption. It is exceptionally difficult to come up with good cryptography and anyone can write an algorithm that he himself won't be able to break. 
			</para>
			</listitem>
		</itemizedlist>

			<para>
			Further Reading:
			</para>
			<para>
Master the basics of Java Cryptography Extension (JCE)
http://www.zdnet.com.au/builder/program/java/story/0,2000034779,20264547,00.htm
			</para>
			<para>
Unshackling key management in Java\x{2122} security
http://www6.software.ibm.com/devcon/key0201/keyjavaarticle.html
			</para>
<para>
Java security evolution and concepts, Part 1: Security nuts and bolts
http://www.javaworld.com/javaworld/jw-04-2000/jw-0428-security.html
</para>

<para>
Crytography FAQ
http://www.faqs.org/faqs/cryptography-faq/
</para>

		</sect4>
		<sect4>
			<title>
			9 - Remote Administration flaws
			</title>
			<para>
Remote administration flaws are common in web and application servers although a few J2EE applications have custom remote management functionality. The configuration of application servers is addressed the next section. A custom administration interface should have a high level of access control security. A critical production application should be managed like firewalls or other critical servers. They typically have an additional network interface to a private network for out of band administration. End to end encryption and VPN are also commonly used.
			</para>
			<para>
Some applications integrate with third party solutions like content management. If any remote interface can change any aspect or content of your application, out of band should be used.
			</para>
			<para>
Resources
			</para>	
			<para>
CERT - Configure computers for secure remote administration.
http://www.cert.org/security-improvement/practices/p062.html
			</para>		
		</sect4>	
		<sect4>
			<title>
			10- Web + App Server Misconfiguration. 
			</title>
			<para>
Securing web servers is out of scope for this section. The operating system is the foundation for the application server. There are many sources and benchmarks to aid in securing the operating system. In addition to vendor guidelines, SANS, CIS and NIST produce checklists and guidelines in this area. The general guidelines for Java application servers are:
</para>
			<itemizedlist mark="opencircle" spacing="compact">
			<listitem>
			<para>
			Keep up with vendor patches. J2EE application servers, just like any complex software system, are not free of security bugs and vulnerabilities. An Internet search for 'Weblogic security advisory' reveals the urgency for continous updates. Weblogic is a widely used application server.
			</para>
			<para>
Effective patch management relies on responsibility and discipline. An experience engineer should be explicitly responsible for server updates. Know who to contact if something goes wrong before applying any patches. Let them know what you are doing and when you are planning to do it. A file integrity program, such as tripwire, is a valuable tool in a patch recovery plan. And keep meticulous documention regarding version numbers, changes, servers, dates, etc. 
			</para>
			</listitem>
			<listitem>
			<para>
			Remove sample scripts and applications.
			</para>
			</listitem>
			<listitem>
			<para>
			Remove and change default accounts and passwords.
			</para>
			</listitem>

			<listitem>
			<para>
			Configure proper logging levels and disable debugging functions.
			</para>
			</listitem>
		</itemizedlist>
<para>
None of the items above are specific to J2EE applications save for the details of implementation. Java's security model using realms, roles, policies is somewhat different than other models but the security practices described above apply uniformly. 
</para>
<para>
Resources:
</para>
<para>
[Bugdev] [LSD] Java and JVM security vulnerabilities 
http://www.avet.com.pl/pipermail/bugdev/2002-November/001281.html
</para>

	</sect4>
	</sect3>
<sect3>
<title>Summary</title>
<para>



</para>
<para>
Further reading:
</para>

<para>
Secure a Web application, Java-style
http://www.javaworld.com/javaworld/jw-04-2000/jw-0428-websecurity.html
</para>

</sect3>
	


	</sect2>
	</sect1>
</chapter>
