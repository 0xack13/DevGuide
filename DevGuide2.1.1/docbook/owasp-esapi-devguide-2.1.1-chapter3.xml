<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.0/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
	<title>Chapter 3</title>
	<section>
		<title>What are web applications?</title>
		<section>
			<title>Overview</title>
			<para>In the early days of the web, web sites consisted of static pages. Obviously, static content prevents the application interacting with the user. As this is limiting, web server manufacturers allowed external programs to run by implementing the Common Gateway Interface (or CGI) mechanism. This allowed input from the user to be sent to an external program or script, processed and then the result rendered back to the user. CGI is the granddaddy of all the various web application frameworks, scripting languages and web services in common use today.</para>
			<para>CGI is becoming rare now, but the idea of a process executing dynamic information supplied by the user or a data store, and rendering the dynamic output back is now the mainstay of web applications.</para>
		</section>
		<section>
			<title>Technologies</title>
			<section>
				<title>CGI</title>
				<para>CGI is still used by many sites. An advantage for CGI is the ease of writing the application logic in a fast native language, like C or C++, or to enable a previously non-web enabled application to be accessible via web browsers.</para>
				<para>There are several disadvantages to writing applications using CGI:</para>
				<itemizedlist>
					<listitem><para>Most low level languages do not directly support HTML output, and thus a library needs to be written (or used), or HTML output is manually created on the fly by the programmer</para></listitem>
					<listitem><para>The write - compile – deploy - run cycle is slower than most of the later technologies (but not hugely so)</para></listitem>
					<listitem><para>CGI’s are a separate process, and the performance penalty of IPC and process creation can be huge on some architectures</para></listitem>
					<listitem><para>CGI does not support session controls, so a library has to be written or imported to support sessions</para></listitem>
					<listitem><para>Not everyone is comfortable writing in a low level language (like C or C++), so the barrier of entry is somewhat high, particularly compared to scripting languages</para></listitem>
					<listitem><para>Most 3rd generation languages commonly used in CGI programs (C or C++) suffer from buffer overflows and resource leaks. This requires a fair amount of skill to avoid.</para></listitem>
				</itemizedlist>
				<para>CGI can be useful in heavy-duty computation or lengthy processes with a smaller number of users.</para>
			</section>
			<section>
				<title>Filters</title>
				<para>Filters are used for specific purposes, such as controlling access to a web site, implementing another web application framework (like Perl, PHP or ASP), or providing a security check. A filter has to be written in C or C++ and can be high performance as it lives within the execution context of the web server itself. Typical examples of a filter interface include Apache web server modules, Sun ONE’s NSAPI, and Microsoft’s ISAPI. As filters are rarely used specialist interfaces that can directly affect the availability of the web server, they are not considered further.</para>
			</section>
			<section>
				<title>Scripting</title>
				<para>CGI’s lack of session management and authorization controls hampered the development of commercially useful web applications. Along with a relatively slower development turn around, web developers moved to interpreted scripting languages as a solution. The interpreters run script code within the web server process, and as the scripts were not compiled, the write-deploy-run cycle was a bit quicker. Scripting languages rarely suffer from buffer overflows or resource leaks, and thus are easier for programmers to avoid the one of the most common security issues.</para>
				<para>There are some disadvantages:</para>
				<itemizedlist>
					<listitem><para>Most scripting languages aren’t strongly typed and do not promote good programming practices</para></listitem>
					<listitem><para>Scripting languages are generally slower than their compiled counterparts (sometimes as much as 100 times slower)</para></listitem>
					<listitem><para>Scripts often lead to unmentionable code bases that perform poorly as their size grows</para></listitem>
					<listitem><para>It’s difficult (but not impossible) to write multi-tier large scale applications in scripting languages, so often the presentation, application and data tiers reside on the same machine, limiting scalability and security</para></listitem>
					<listitem><para>Most scripting languages do not natively support remote method or web service calls, thus making it difficult to communicate with application servers and external web services.</para></listitem>
				</itemizedlist>
				<para>Despite the disadvantages, many large and useful code bases are written in scripting languages, such as eGroupWare (PHP), and many older Internet Banking sites are often written in ASP.</para>
				<para>Scripting frameworks include ASP, Perl, Cold Fusion, and PHP. However, many of these would be considered interpreted hybrids now, particularly later versions of PHP and Cold Fusion, which pre-tokenize and optimize scripts.</para>
			</section>
			<section>
				<title>Web application frameworks</title>
				<para>As the boundaries of performance and scalability were being reached by scripting languages, many larger vendors jumped on Sun’s J2EE web development platform. J2EE:</para>
				<itemizedlist>
					<listitem><para>Uses the Java language to produce fast applications (nearly as fast as C++ applications) that do not easily suffer from buffer overflows and memory leaks</para></listitem>
					<listitem><para>Allowed large distributed applications to run acceptably for the first time</para></listitem>
					<listitem><para>Possesses good session and authorization controls</para></listitem>
					<listitem><para>Enabled relatively transparent multi-tier applications via various remote component invocation mechanisms</para></listitem>
					<listitem><para>Is strongly typed to prevent many common security and programming issues before the program even runs</para></listitem>
				</itemizedlist>
				<para>There are many J2EE implementations available, including the Tomcat reference implementation from the Apache Foundation. The downside is that J2EE has a similar or steeper learning curve to C++, which makes it difficult for web designers and entry-level programmers to write applications. Recently, graphical development tools made it somewhat easier, but compared to PHP, J2EE is still quite a stretch.</para>
				<para>Microsoft massively updated their ASP technology to ASP.NET, which uses the .NET Framework and just-in-time MSIL native compilers. .NET Framework in many ways mimicked the J2EE framework, but MS improved on the development process in various ways, such as:</para>
				<itemizedlist>
					<listitem><para>Easy for entry level programmers and web designers to whip up smaller applications</para></listitem>
					<listitem><para>Allows large distributed applications</para></listitem>
					<listitem><para>Possesses good session and authorization controls</para></listitem>
					<listitem><para>Programmers can use their favorite language, which is compiled to native code for excellent performance (near to C++ speeds), along with buffer overflow and resource garbage collection</para></listitem>
					<listitem><para>Transparent communication with remote and external components</para></listitem>
					<listitem><para>is strongly typed to prevent many common security and programming issues before the program even runs</para></listitem>
				</itemizedlist>
				<para>The choice of between J2EE or ASP.NET frameworks is largely dependent upon platform choice. Applications targeting J2EE theoretically can run with few (if any) changes between any of the major vendors and on many platforms from Linux, AIX, MacOS X, or Windows. In practice, some tweaking is required, but complete re-writes are not required.</para>
				<para>ASP.Net is primarily available for the Microsoft Windows platform. The Mono project (http://www.go-mono.com/) can run ASP.NET applications on many platforms including Solaris, Netware, and Linux.</para>
				<para>There is little reason to choose one over the other from a security perspective.</para>
			</section>
		</section>
		<section>
			<title>Common Types of Programming Structures</title>
			<section>
				<title>Small to medium scale applications</title>
				<para>Most applications fall into this category. The usual architecture is a simple linear procedural script. This is the most common form of coding for ASP, Cold Fusion and PHP scripts, but rarer (but not impossible) for ASP.NET and J2EE applications.</para>
				<para>The reason for this architecture is that it is easy to write, and few skills are required to maintain the code. For smaller applications, any perceived performance benefit from moving to a more scalable architecture will never be recovered in the runtime for those applications. For example, if it takes an additional three weeks of developer time to re-factor the scripts into an MVC approach, the three weeks will never be recovered (or noticed by end users) from the improvements in scalability.</para>
				<para>It is typical to find many security issues in such applications, including dynamic database queries constructed from insufficiently validated data input, poor error handling and weak authorization controls.</para>
				<para>This Guide provides advice throughout to help improve the security of these applications.</para>
			</section>
			<section>
				<title>Large scale applications</title>
				<para>Larger applications need a different architecture to that of a simple survey or feedback form. As applications get larger, it becomes ever more difficult to implement and maintain features and to keep scalability high. Using scalable application architectures becomes a necessity rather than a luxury when an application needs more than about three database tables or presents more than approximately 20 - 50 functions to a user.</para>
				<para>Scalable application architecture is often divided into tiers, and if design patterns are used, often broken down into re-usable chunks using specific guidelines to enforce modularity, interface requirements and object re-use. Breaking the application into tiers allows the application to be distributed to various servers, thus improving the scalability of the application at the expense of complexity.</para>
				<para>One of the most common web application architectures is model-view-controller (MVC), which implements the Smalltalk 80 application architecture. MVC is typical of most Apache Foundation Jakarta Struts J2EE applications, and the code-behinds of ASP.NET can be considered a partial implementation of this approach. For PHP, the WACT project (http://wact.sourceforge.net) aims to implement the MVC paradigm in a PHP friendly fashion.</para>
				<section>
					<title>View</title>
					<para>The front-end rendering code, often called the presentation tier, should aim to produce the HTML output for the user with little to no application logic.</para>
					<para>As many applications will be internationalized (i.e. contain no localized strings or culture information in the presentation layer), they must use calls into the model (application logic) to obtain the data required to render useful information to the user in their preferred language and culture, script direction, and units.</para>
					<para>All user input is directed back to controllers in the application logic.</para>
				</section>
				<section>
					<title>Controller</title>
					<para>The controller (or application logic) takes input from the users and gates it through various workflows that call on the application’s model objects to retrieve, process, or store the data.</para>
					<para>Well written controllers centrally server-side validate input data against common security issues before passing the data to the model for processing, and ensure that output is safe or in a ready form for safe output by the view code.</para>
					<para>As the application is likely to be internationalized and accessible, the data needs to be in the local language and culture. For example, dates cannot only be in different orders, but an entirely different calendar could be in use. Applications need to be flexible about presenting and storing data. Simply displaying “9/11/2001” is completely ambiguous to anyone outside a few countries.</para>
				</section>
				<section>
					<title>Model</title>
					<para>Models encapsulate functionality, such as “Account” or “User”. A good model should be transparent to the caller, and provide a method to deal with high-level business processes rather than a thin shim to the data store. For example, a good model will allow pseudo code like this to exist in the controller:</para>
					<screen>oAccount-&gt;TransferFunds(fromAcct, ToAcct, Amount)</screen>
					<para>rather than writing it like this:</para>
					<screen>if    oAccount-&gt;isMyAcct(fromAcct) &amp;
						amount &lt; oAccount-&gt;getMaxTransferLimit() &amp;
						oAccount-&gt;getBalance(fromAcct) &gt; amount &amp;
						oAccount-&gt;ToAccountExists(ToAcct) &amp;
						then
							if oAccount-&gt;withdraw(fromAcct, Amount) = OK then
								oAccount-&gt;deposit(ToAcct, Amount)
							end if
					end if</screen>
					<para>The idea is to encapsulate the actual dirty work into the model code, rather than exposing primitives. If the controller and model are on different machines, the performance difference will be staggering, so it is important for the model to be useful at a high level.</para>
					<para>The model is responsible for checking data against business rules, and any residual risks unique to the data store in use. For example, if a model stores data in a flat file, the code needs to check for OS injection commands if the flat files are named by the user. If the model stores data in an interpreted language, like SQL, then the model is responsible for preventing SQL injection. If it uses a message queue interface to a mainframe, the message queue data format (typically XML) needs to be well formed and compliant with a DTD.</para>
					<para>The contract between the controller and the model needs to be carefully considered to ensure that data is strongly typed, with reasonable structure (syntax), and appropriate length, whilst allowing flexibility to allow for internationalization and future needs.</para>
					<para>Calls by the model to the data store should be through the most secure method possible. Often the weakest possibility is dynamic queries, where a string is built up from unverified user input. This leads directly to SQL injection and is frowned upon. For more information, see chapter <!-- ??? Error! Reference source not found. --> and section <!-- ??? Error! Reference source not found.-->.</para>
					<para>The best performance and highest security is often obtained through parameterized stored procedures, followed by parameterized queries (also known as prepared statements) with strong typing of the parameters and schema. The major reason for using stored procedures is to minimize network traffic for a multi-stage transaction or to remove security sensitive information from traversing the network.</para>
					<para>Stored procedures are not always a good idea – they tie you to a particular database vendor and many implementations are not fast for numeric computation. If you use the 80/20 rule for optimization and move the slow and high-risk transactions to stored procedures, the wins can be worthwhile from a security and performance perspective.</para>
				</section>
			</section>
		</section>
		<section>
			<title>Conclusion</title>
			<para>Web applications can be written in many different ways, and in many different languages. Although the Guide concentrates upon three common choices for its examples (PHP, J2EE and ASP.NET), the Guide can be used with any web application technology.</para>
		</section>
	</section>
</chapter>
